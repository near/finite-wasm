(module
  (type (;0;) (func (param v128) (result v128)))
  (type (;1;) (func (param v128 v128) (result v128)))
  (type (;2;) (func (param v128 v128 v128) (result v128)))
  (type (;3;) (func (param i64)))
  (type (;4;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 3)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 4)))
  (func (;2;) (type 0) (param $0 v128) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 3
    call 0
    local.get $0
    v128.not
  )
  (func (;3;) (type 1) (param $0 v128) (param $1 v128) (result v128)
    i64.const 32
    i64.const 1
    call 1
    i64.const 4
    call 0
    local.get $0
    local.get $1
    v128.and
  )
  (func (;4;) (type 1) (param $0 v128) (param $1 v128) (result v128)
    i64.const 32
    i64.const 1
    call 1
    i64.const 4
    call 0
    local.get $0
    local.get $1
    v128.or
  )
  (func (;5;) (type 1) (param $0 v128) (param $1 v128) (result v128)
    i64.const 32
    i64.const 1
    call 1
    i64.const 4
    call 0
    local.get $0
    local.get $1
    v128.xor
  )
  (func (;6;) (type 2) (param $0 v128) (param $1 v128) (param $2 v128) (result v128)
    i64.const 48
    i64.const 2
    call 1
    i64.const 5
    call 0
    local.get $0
    local.get $1
    local.get $2
    v128.bitselect
  )
  (func (;7;) (type 1) (param $0 v128) (param $1 v128) (result v128)
    i64.const 32
    i64.const 1
    call 1
    i64.const 4
    call 0
    local.get $0
    local.get $1
    v128.andnot
  )
  (export "not" (func 2))
  (export "and" (func 3))
  (export "or" (func 4))
  (export "xor" (func 5))
  (export "bitselect" (func 6))
  (export "andnot" (func 7))
)
(assert_return (invoke "not" (v128.const i32x4 0 0 0 0))
                             (v128.const i32x4 -1 -1 -1 -1))
(assert_return (invoke "not" (v128.const i32x4 -1 -1 -1 -1))
                             (v128.const i32x4 0 0 0 0))
(assert_return (invoke "not" (v128.const i32x4 -1 0 -1 0))
                             (v128.const i32x4 0 -1 0 -1))
(assert_return (invoke "not" (v128.const i32x4 0 -1 0 -1))
                             (v128.const i32x4 -1 0 -1 0))
(assert_return (invoke "not" (v128.const i32x4 0x55555555 0x55555555 0x55555555 0x55555555))
                             (v128.const i32x4 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA))
(assert_return (invoke "not" (v128.const i32x4 3435973836 3435973836 3435973836 3435973836))
                             (v128.const i32x4 858993459 858993459 858993459 858993459))
(assert_return (invoke "not" (v128.const i32x4 01_234_567_890 01_234_567_890 01_234_567_890 01_234_567_890))
                             (v128.const i32x4 3060399405 3060399405 3060399405 3060399405))
(assert_return (invoke "not" (v128.const i32x4 0x0_1234_5678 0x0_1234_5678 0x0_1234_5678 0x0_1234_5678))
                             (v128.const i32x4 0xedcba987 0xedcba987 0xedcba987 0xedcba987))
(assert_return (invoke "and" (v128.const i32x4 0 0 -1 -1)
                             (v128.const i32x4 0 -1 0 -1))
                             (v128.const i32x4 0 0 0 -1))
(assert_return (invoke "and" (v128.const i32x4 0 0 0 0)
                             (v128.const i32x4 0 0 0 0))
                             (v128.const i32x4 0 0 0 0))
(assert_return (invoke "and" (v128.const i32x4 0 0 0 0)
                             (v128.const i32x4 -1 -1 -1 -1))
                             (v128.const i32x4 0 0 0 0))
(assert_return (invoke "and" (v128.const i32x4 0 0 0 0)
                             (v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF))
                             (v128.const i32x4 0 0 0 0))
(assert_return (invoke "and" (v128.const i32x4 1 1 1 1)
                             (v128.const i32x4 1 1 1 1))
                             (v128.const i32x4 1 1 1 1))
(assert_return (invoke "and" (v128.const i32x4 255 255 255 255)
                             (v128.const i32x4 85 85 85 85))
                             (v128.const i32x4 85 85 85 85))
(assert_return (invoke "and" (v128.const i32x4 255 255 255 255)
                             (v128.const i32x4 128 128 128 128))
                             (v128.const i32x4 128 128 128 128))
(assert_return (invoke "and" (v128.const i32x4 2863311530 2863311530 2863311530 2863311530)
                             (v128.const i32x4 10 128 5 165))
                             (v128.const i32x4 10 128 0 160))
(assert_return (invoke "and" (v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF)
                             (v128.const i32x4 0x55555555 0x55555555 0x55555555 0x55555555))
                             (v128.const i32x4 0x55555555 0x55555555 0x55555555 0x55555555))
(assert_return (invoke "and" (v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF)
                             (v128.const i32x4 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA))
                             (v128.const i32x4 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA))
(assert_return (invoke "and" (v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF)
                             (v128.const i32x4 0x0 0x0 0x0 0x0))
                             (v128.const i32x4 0x0 0x0 0x0 0x0))
(assert_return (invoke "and" (v128.const i32x4 0x55555555 0x55555555 0x55555555 0x55555555)
                             (v128.const i32x4 0x5555 0xFFFF 0x55FF 0x5FFF))
                             (v128.const i32x4 0x5555 0x5555 0x5555 0x5555))
(assert_return (invoke "and" (v128.const i32x4 01_234_567_890 01_234_567_890 01_234_567_890 01_234_567_890)
                             (v128.const i32x4 01_234_567_890 01_234_567_890 01_234_567_890 01_234_567_890))
                             (v128.const i32x4 1234567890 1234567890 1234567890 1234567890))
(assert_return (invoke "and" (v128.const i32x4 0x0_1234_5678 0x0_1234_5678 0x0_1234_5678 0x0_1234_5678)
                             (v128.const i32x4 0x0_90AB_cdef 0x0_90AB_cdef 0x0_90AB_cdef 0x0_90AB_cdef))
                             (v128.const i32x4 0x10204468 0x10204468 0x10204468 0x10204468))
(assert_return (invoke "or" (v128.const i32x4 0 0 -1 -1)
                            (v128.const i32x4 0 -1 0 -1))
                            (v128.const i32x4 0 -1 -1 -1))
(assert_return (invoke "or" (v128.const i32x4 0 0 0 0)
                            (v128.const i32x4 0 0 0 0))
                            (v128.const i32x4 0 0 0 0))
(assert_return (invoke "or" (v128.const i32x4 0 0 0 0)
                            (v128.const i32x4 -1 -1 -1 -1))
                            (v128.const i32x4 -1 -1 -1 -1))
(assert_return (invoke "or" (v128.const i32x4 0 0 0 0)
                            (v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF))
                            (v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF))
(assert_return (invoke "or" (v128.const i32x4 1 1 1 1)
                            (v128.const i32x4 1 1 1 1))
                            (v128.const i32x4 1 1 1 1))
(assert_return (invoke "or" (v128.const i32x4 255 255 255 255)
                            (v128.const i32x4 85 85 85 85))
                            (v128.const i32x4 255 255 255 255))
(assert_return (invoke "or" (v128.const i32x4 255 255 255 255)
                            (v128.const i32x4 128 128 128 128))
                            (v128.const i32x4 255 255 255 255))
(assert_return (invoke "or" (v128.const i32x4 2863311530 2863311530 2863311530 2863311530)
                            (v128.const i32x4 10 128 5 165))
                            (v128.const i32x4 2863311530 2863311530 2863311535 2863311535))
(assert_return (invoke "or" (v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF)
                            (v128.const i32x4 0x55555555 0x55555555 0x55555555 0x55555555))
                            (v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF))
(assert_return (invoke "or" (v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF)
                            (v128.const i32x4 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA))
                            (v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF))
(assert_return (invoke "or" (v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF)
                            (v128.const i32x4 0x0 0x0 0x0 0x0))
                            (v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF))
(assert_return (invoke "or" (v128.const i32x4 0x55555555 0x55555555 0x55555555 0x55555555)
                            (v128.const i32x4 0x5555 0xFFFF 0x55FF 0x5FFF))
                            (v128.const i32x4 0x55555555 0x5555ffff 0x555555ff 0x55555fff))
(assert_return (invoke "or" (v128.const i32x4 01_234_567_890 01_234_567_890 01_234_567_890 01_234_567_890)
                            (v128.const i32x4 01_234_567_890 01_234_567_890 01_234_567_890 01_234_567_890))
                            (v128.const i32x4 1234567890 1234567890 1234567890 1234567890))
(assert_return (invoke "or" (v128.const i32x4 0x0_1234_5678 0x0_1234_5678 0x0_1234_5678 0x0_1234_5678)
                            (v128.const i32x4 0x0_90AB_cdef 0x0_90AB_cdef 0x0_90AB_cdef 0x0_90AB_cdef))
                            (v128.const i32x4 0x92bfdfff 0x92bfdfff 0x92bfdfff 0x92bfdfff))
(assert_return (invoke "xor" (v128.const i32x4 0 0 -1 -1)
                             (v128.const i32x4 0 -1 0 -1))
                             (v128.const i32x4 0 -1 -1 0))
(assert_return (invoke "xor" (v128.const i32x4 0 0 0 0)
                             (v128.const i32x4 0 0 0 0))
                             (v128.const i32x4 0 0 0 0))
(assert_return (invoke "xor" (v128.const i32x4 0 0 0 0)
                             (v128.const i32x4 -1 -1 -1 -1))
                             (v128.const i32x4 -1 -1 -1 -1))
(assert_return (invoke "xor" (v128.const i32x4 0 0 0 0)
                             (v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF))
                             (v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF))
(assert_return (invoke "xor" (v128.const i32x4 1 1 1 1)
                             (v128.const i32x4 1 1 1 1))
                             (v128.const i32x4 0 0 0 0))
(assert_return (invoke "xor" (v128.const i32x4 255 255 255 255)
                             (v128.const i32x4 85 85 85 85))
                             (v128.const i32x4 170 170 170 170))
(assert_return (invoke "xor" (v128.const i32x4 255 255 255 255)
                             (v128.const i32x4 128 128 128 128))
                             (v128.const i32x4 127 127 127 127))
(assert_return (invoke "xor" (v128.const i32x4 2863311530 2863311530 2863311530 2863311530)
                             (v128.const i32x4 10 128 5 165))
                             (v128.const i32x4 2863311520 2863311402 2863311535 2863311375))
(assert_return (invoke "xor" (v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF)
                             (v128.const i32x4 0x55555555 0x55555555 0x55555555 0x55555555))
                             (v128.const i32x4 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA))
(assert_return (invoke "xor" (v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF)
                             (v128.const i32x4 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA))
                             (v128.const i32x4 0x55555555 0x55555555 0x55555555 0x55555555))
(assert_return (invoke "xor" (v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF)
                             (v128.const i32x4 0x0 0x0 0x0 0x0))
                             (v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF))
(assert_return (invoke "xor" (v128.const i32x4 0x55555555 0x55555555 0x55555555 0x55555555)
                             (v128.const i32x4 0x5555 0xFFFF 0x55FF 0x5FFF))
                             (v128.const i32x4 0x55550000 0x5555AAAA 0x555500AA 0x55550AAA))
(assert_return (invoke "xor" (v128.const i32x4 01_234_567_890 01_234_567_890 01_234_567_890 01_234_567_890)
                             (v128.const i32x4 01_234_567_890 01_234_567_890 01_234_567_890 01_234_567_890))
                             (v128.const i32x4 0 0 0 0))
(assert_return (invoke "xor" (v128.const i32x4 0x0_1234_5678 0x0_1234_5678 0x0_1234_5678 0x0_1234_5678)
                             (v128.const i32x4 0x0_90AB_cdef 0x0_90AB_cdef 0x0_90AB_cdef 0x0_90AB_cdef))
                             (v128.const i32x4 0x829f9b97 0x829f9b97 0x829f9b97 0x829f9b97))
(assert_return (invoke "bitselect" (v128.const i32x4 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA)
                                   (v128.const i32x4 0xBBBBBBBB 0xBBBBBBBB 0xBBBBBBBB 0xBBBBBBBB)
                                   (v128.const i32x4 0x00112345 0xF00FFFFF 0x10112021 0xBBAABBAA))
                                   (v128.const i32x4 0xBBAABABA 0xABBAAAAA 0xABAABBBA 0xAABBAABB))
(assert_return (invoke "bitselect" (v128.const i32x4 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA)
                                   (v128.const i32x4 0xBBBBBBBB 0xBBBBBBBB 0xBBBBBBBB 0xBBBBBBBB)
                                   (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000))
                                   (v128.const i32x4 0xBBBBBBBB 0xBBBBBBBB 0xBBBBBBBB 0xBBBBBBBB))
(assert_return (invoke "bitselect" (v128.const i32x4 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA)
                                   (v128.const i32x4 0xBBBBBBBB 0xBBBBBBBB 0xBBBBBBBB 0xBBBBBBBB)
                                   (v128.const i32x4 0x11111111 0x11111111 0x11111111 0x11111111))
                                   (v128.const i32x4 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA))
(assert_return (invoke "bitselect" (v128.const i32x4 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA)
                                   (v128.const i32x4 0xBBBBBBBB 0xBBBBBBBB 0xBBBBBBBB 0xBBBBBBBB)
                                   (v128.const i32x4 0x01234567 0x89ABCDEF 0xFEDCBA98 0x76543210))
                                   (v128.const i32x4 0xBABABABA 0xBABABABA 0xABABABAB 0xABABABAB))
(assert_return (invoke "bitselect" (v128.const i32x4 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA)
                                   (v128.const i32x4 0x55555555 0x55555555 0x55555555 0x55555555)
                                   (v128.const i32x4 0x01234567 0x89ABCDEF 0xFEDCBA98 0x76543210))
                                   (v128.const i32x4 0x54761032 0xDCFE98BA 0xAB89EFCD 0x23016745))
(assert_return (invoke "bitselect" (v128.const i32x4 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA)
                                   (v128.const i32x4 0x55555555 0x55555555 0x55555555 0x55555555)
                                   (v128.const i32x4 0x55555555 0xAAAAAAAA 0x00000000 0xFFFFFFFF))
                                   (v128.const i32x4 0x00000000 0xFFFFFFFF 0x55555555 0xAAAAAAAA))
(assert_return (invoke "bitselect" (v128.const i32x4 01_234_567_890 01_234_567_890 01_234_567_890 01_234_567_890)
                                   (v128.const i32x4 03_060_399_406 03_060_399_406 03_060_399_406 03_060_399_406)
                                   (v128.const i32x4 0xcdefcdef 0xcdefcdef 0xcdefcdef 0xcdefcdef))
                                   (v128.const i32x4 2072391874 2072391874 2072391874 2072391874))
(assert_return (invoke "bitselect" (v128.const i32x4 0x0_1234_5678 0x0_1234_5678 0x0_1234_5678 0x0_1234_5678)
                                   (v128.const i32x4 0x0_90AB_cdef 0x0_90AB_cdef 0x0_90AB_cdef 0x0_90AB_cdef)
                                   (v128.const i32x4 0xcdefcdef 0xcdefcdef 0xcdefcdef 0xcdefcdef))
                                   (v128.const i32x4 0x10244468 0x10244468 0x10244468 0x10244468))
(assert_return (invoke "andnot" (v128.const i32x4 0 0 -1 -1)
                                (v128.const i32x4 0 -1 0 -1))
                                (v128.const i32x4 0 0 -1 0))
(assert_return (invoke "andnot" (v128.const i32x4 0 0 0 0)
                                (v128.const i32x4 0 0 0 0))
                                (v128.const i32x4 0 0 0 0))
(assert_return (invoke "andnot" (v128.const i32x4 0 0 0 0)
                                (v128.const i32x4 -1 -1 -1 -1))
                                (v128.const i32x4 0 0 0 0))
(assert_return (invoke "andnot" (v128.const i32x4 0 0 0 0)
                                (v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF))
                                (v128.const i32x4 0 0 0 0))
(assert_return (invoke "andnot" (v128.const i32x4 1 1 1 1)
                                (v128.const i32x4 1 1 1 1))
                                (v128.const i32x4 0 0 0 0))
(assert_return (invoke "andnot" (v128.const i32x4 255 255 255 255)
                                (v128.const i32x4 85 85 85 85))
                                (v128.const i32x4 170 170 170 170))
(assert_return (invoke "andnot" (v128.const i32x4 255 255 255 255)
                                (v128.const i32x4 128 128 128 128))
                                (v128.const i32x4 127 127 127 127))
(assert_return (invoke "andnot" (v128.const i32x4 2863311530 2863311530 2863311530 2863311530)
                                (v128.const i32x4 10 128 5 165))
                                (v128.const i32x4 2863311520 2863311402 2863311530 2863311370))
(assert_return (invoke "andnot" (v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF)
                                (v128.const i32x4 0x55555555 0x55555555 0x55555555 0x55555555))
                                (v128.const i32x4 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA))
(assert_return (invoke "andnot" (v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF)
                                (v128.const i32x4 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA))
                                (v128.const i32x4 0x55555555 0x55555555 0x55555555 0x55555555))
(assert_return (invoke "andnot" (v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF)
                                (v128.const i32x4 0x0 0x0 0x0 0x0))
                                (v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF))
(assert_return (invoke "andnot" (v128.const i32x4 0x55555555 0x55555555 0x55555555 0x55555555)
                                (v128.const i32x4 0x5555 0xFFFF 0x55FF 0x5FFF))
                                (v128.const i32x4 0x55550000 0x55550000 0x55550000 0x55550000))
(assert_return (invoke "andnot" (v128.const i32x4 01_234_567_890 01_234_567_890 01_234_567_890 01_234_567_890)
                                (v128.const i32x4 01_234_567_890 01_234_567_890 01_234_567_890 01_234_567_890))
                                (v128.const i32x4 0 0 0 0))
(assert_return (invoke "andnot" (v128.const i32x4 0x0_1234_5678 0x0_1234_5678 0x0_1234_5678 0x0_1234_5678)
                                (v128.const i32x4 0x0_90AB_cdef 0x0_90AB_cdef 0x0_90AB_cdef 0x0_90AB_cdef))
                                (v128.const i32x4 0x02141210 0x02141210 0x02141210 0x02141210))

;; for float special data [e.g. -nan nan -inf inf]
(assert_return (invoke "not" (v128.const f32x4 -nan -nan -nan -nan))
                             (v128.const f32x4 5.87747e-39 5.87747e-39 5.87747e-39 5.87747e-39))
(assert_return (invoke "not" (v128.const f32x4 nan nan nan nan))
                             (v128.const f32x4 -5.87747e-39 -5.87747e-39 -5.87747e-39 -5.87747e-39))
(assert_return (invoke "not" (v128.const f32x4 -inf -inf -inf -inf))
                             (v128.const i32x4 0x007fffff 0x007fffff 0x007fffff 0x007fffff))
(assert_return (invoke "not" (v128.const f32x4 inf inf inf inf))
                             (v128.const i32x4 0x807fffff 0x807fffff 0x807fffff 0x807fffff))
(assert_return (invoke "and" (v128.const f32x4 -nan -nan -nan -nan)
                             (v128.const f32x4 -nan -nan -nan -nan))
                             (v128.const i32x4 0xffc00000 0xffc00000 0xffc00000 0xffc00000))
(assert_return (invoke "and" (v128.const f32x4 -nan -nan -nan -nan)
                             (v128.const f32x4 nan nan nan nan))
                             (v128.const f32x4 nan nan nan nan))
(assert_return (invoke "and" (v128.const f32x4 -nan -nan -nan -nan)
                             (v128.const f32x4 -inf -inf -inf -inf))
                             (v128.const f32x4 -inf -inf -inf -inf))
(assert_return (invoke "and" (v128.const f32x4 -nan -nan -nan -nan)
                             (v128.const f32x4 inf inf inf inf))
                             (v128.const f32x4 inf inf inf inf))
(assert_return (invoke "and" (v128.const f32x4 nan nan nan nan)
                             (v128.const f32x4 nan nan nan nan))
                             (v128.const f32x4 nan nan nan nan))
(assert_return (invoke "and" (v128.const f32x4 nan nan nan nan)
                             (v128.const f32x4 -inf -inf -inf -inf))
                             (v128.const f32x4 inf inf inf inf))
(assert_return (invoke "and" (v128.const f32x4 nan nan nan nan)
                             (v128.const f32x4 inf inf inf inf))
                             (v128.const f32x4 inf inf inf inf))
(assert_return (invoke "and" (v128.const f32x4 -inf -inf -inf -inf)
                             (v128.const f32x4 -inf -inf -inf -inf))
                             (v128.const f32x4 -inf -inf -inf -inf))
(assert_return (invoke "and" (v128.const f32x4 -inf -inf -inf -inf)
                             (v128.const f32x4 inf inf inf inf))
                             (v128.const f32x4 inf inf inf inf))
(assert_return (invoke "and" (v128.const f32x4 inf inf inf inf)
                             (v128.const f32x4 inf inf inf inf))
                             (v128.const f32x4 inf inf inf inf))
(assert_return (invoke "or" (v128.const f32x4 -nan -nan -nan -nan)
                            (v128.const f32x4 -nan -nan -nan -nan))
                            (v128.const i32x4 0xffc00000 0xffc00000 0xffc00000 0xffc00000))
(assert_return (invoke "or" (v128.const f32x4 -nan -nan -nan -nan)
                            (v128.const f32x4 nan nan nan nan))
                            (v128.const i32x4 0xffc00000 0xffc00000 0xffc00000 0xffc00000))
(assert_return (invoke "or" (v128.const f32x4 -nan -nan -nan -nan)
                            (v128.const f32x4 -inf -inf -inf -inf))
                            (v128.const i32x4 0xffc00000 0xffc00000 0xffc00000 0xffc00000))
(assert_return (invoke "or" (v128.const f32x4 -nan -nan -nan -nan)
                            (v128.const f32x4 inf inf inf inf))
                            (v128.const i32x4 0xffc00000 0xffc00000 0xffc00000 0xffc00000))
(assert_return (invoke "or" (v128.const f32x4 nan nan nan nan)
                            (v128.const f32x4 nan nan nan nan))
                            (v128.const f32x4 nan nan nan nan))
(assert_return (invoke "or" (v128.const f32x4 nan nan nan nan)
                            (v128.const f32x4 -inf -inf -inf -inf))
                            (v128.const i32x4 0xffc00000 0xffc00000 0xffc00000 0xffc00000))
(assert_return (invoke "or" (v128.const f32x4 nan nan nan nan)
                            (v128.const f32x4 inf inf inf inf))
                            (v128.const f32x4 nan nan nan nan))
(assert_return (invoke "or" (v128.const f32x4 -inf -inf -inf -inf)
                            (v128.const f32x4 -inf -inf -inf -inf))
                            (v128.const f32x4 -inf -inf -inf -inf))
(assert_return (invoke "or" (v128.const f32x4 -inf -inf -inf -inf)
                            (v128.const f32x4 inf inf inf inf))
                            (v128.const f32x4 -inf -inf -inf -inf))
(assert_return (invoke "or" (v128.const f32x4 inf inf inf inf)
                            (v128.const f32x4 inf inf inf inf))
                            (v128.const f32x4 inf inf inf inf))
(assert_return (invoke "xor" (v128.const f32x4 -nan -nan -nan -nan)
                             (v128.const f32x4 -nan -nan -nan -nan))
                             (v128.const f32x4 0 0 0 0))
(assert_return (invoke "xor" (v128.const f32x4 -nan -nan -nan -nan)
                             (v128.const f32x4 nan nan nan nan))
                             (v128.const f32x4 -0 -0 -0 -0))
(assert_return (invoke "xor" (v128.const f32x4 -nan -nan -nan -nan)
                             (v128.const f32x4 -inf -inf -inf -inf))
                             (v128.const i32x4 0x00400000 0x00400000 0x00400000 0x00400000))
(assert_return (invoke "xor" (v128.const f32x4 -nan -nan -nan -nan)
                             (v128.const f32x4 inf inf inf inf))
                             (v128.const i32x4 0x80400000 0x80400000 0x80400000 0x80400000))
(assert_return (invoke "xor" (v128.const f32x4 nan nan nan nan)
                             (v128.const f32x4 nan nan nan nan))
                             (v128.const f32x4 0 0 0 0))
(assert_return (invoke "xor" (v128.const f32x4 nan nan nan nan)
                             (v128.const f32x4 -inf -inf -inf -inf))
                             (v128.const i32x4 0x80400000 0x80400000 0x80400000 0x80400000))
(assert_return (invoke "xor" (v128.const f32x4 nan nan nan nan)
                             (v128.const f32x4 inf inf inf inf))
                             (v128.const i32x4 0x00400000 0x00400000 0x00400000 0x00400000))
(assert_return (invoke "xor" (v128.const f32x4 -inf -inf -inf -inf)
                             (v128.const f32x4 -inf -inf -inf -inf))
                             (v128.const f32x4 0 0 0 0))
(assert_return (invoke "xor" (v128.const f32x4 -inf -inf -inf -inf)
                             (v128.const f32x4 inf inf inf inf))
                             (v128.const i32x4 0x80000000 0x80000000 0x80000000 0x80000000))
(assert_return (invoke "xor" (v128.const f32x4 inf inf inf inf)
                             (v128.const f32x4 inf inf inf inf))
                             (v128.const f32x4 0 0 0 0))
(assert_return (invoke "bitselect" (v128.const f32x4 -nan -nan -nan -nan)
                                   (v128.const f32x4 -nan -nan -nan -nan)
                                   (v128.const f32x4 0xA5A5A5A5 0xA5A5A5A5 0xA5A5A5A5 0xA5A5A5A5))
                                   (v128.const i32x4 0xffc00000 0xffc00000 0xffc00000 0xffc00000))
(assert_return (invoke "bitselect" (v128.const f32x4 -nan -nan -nan -nan)
                                   (v128.const f32x4 nan nan nan nan)
                                   (v128.const f32x4 0xA5A5A5A5 0xA5A5A5A5 0xA5A5A5A5 0xA5A5A5A5))
                                   (v128.const f32x4 nan nan nan nan))
(assert_return (invoke "bitselect" (v128.const f32x4 -nan -nan -nan -nan)
                                   (v128.const f32x4 -inf -inf -inf -inf)
                                   (v128.const f32x4 0xA5A5A5A5 0xA5A5A5A5 0xA5A5A5A5 0xA5A5A5A5))
                                   (v128.const f32x4 -inf -inf -inf -inf))
(assert_return (invoke "bitselect" (v128.const f32x4 -nan -nan -nan -nan)
                                   (v128.const f32x4 inf inf inf inf)
                                   (v128.const f32x4 0xA5A5A5A5 0xA5A5A5A5 0xA5A5A5A5 0xA5A5A5A5))
                                   (v128.const f32x4 inf inf inf inf))
(assert_return (invoke "bitselect" (v128.const f32x4 nan nan nan nan)
                                   (v128.const f32x4 nan nan nan nan)
                                   (v128.const f32x4 0xA5A5A5A5 0xA5A5A5A5 0xA5A5A5A5 0xA5A5A5A5))
                                   (v128.const f32x4 nan nan nan nan))
(assert_return (invoke "bitselect" (v128.const f32x4 nan nan nan nan)
                                   (v128.const f32x4 -inf -inf -inf -inf)
                                   (v128.const f32x4 0xA5A5A5A5 0xA5A5A5A5 0xA5A5A5A5 0xA5A5A5A5))
                                   (v128.const f32x4 -inf -inf -inf -inf))
(assert_return (invoke "bitselect" (v128.const f32x4 nan nan nan nan)
                                   (v128.const f32x4 inf inf inf inf)
                                   (v128.const f32x4 0xA5A5A5A5 0xA5A5A5A5 0xA5A5A5A5 0xA5A5A5A5))
                                   (v128.const f32x4 inf inf inf inf))
(assert_return (invoke "bitselect" (v128.const f32x4 -inf -inf -inf -inf)
                                   (v128.const f32x4 -inf -inf -inf -inf)
                                   (v128.const f32x4 0xA5A5A5A5 0xA5A5A5A5 0xA5A5A5A5 0xA5A5A5A5))
                                   (v128.const f32x4 -inf -inf -inf -inf))
(assert_return (invoke "bitselect" (v128.const f32x4 -inf -inf -inf -inf)
                                   (v128.const f32x4 inf inf inf inf)
                                   (v128.const f32x4 0xA5A5A5A5 0xA5A5A5A5 0xA5A5A5A5 0xA5A5A5A5))
                                   (v128.const f32x4 inf inf inf inf))
(assert_return (invoke "bitselect" (v128.const f32x4 inf inf inf inf)
                                   (v128.const f32x4 inf inf inf inf)
                                   (v128.const f32x4 0xA5A5A5A5 0xA5A5A5A5 0xA5A5A5A5 0xA5A5A5A5))
                                   (v128.const f32x4 inf inf inf inf))
(assert_return (invoke "andnot" (v128.const f32x4 -nan -nan -nan -nan)
                                (v128.const f32x4 -nan -nan -nan -nan))
                                (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000))
(assert_return (invoke "andnot" (v128.const f32x4 -nan -nan -nan -nan)
                                (v128.const f32x4 nan nan nan nan))
                                (v128.const f32x4 -0 -0 -0 -0))
(assert_return (invoke "andnot" (v128.const f32x4 -nan -nan -nan -nan)
                                (v128.const f32x4 -inf -inf -inf -inf))
                                (v128.const i32x4 0x00400000 0x00400000 0x00400000 0x00400000))
(assert_return (invoke "andnot" (v128.const f32x4 -nan -nan -nan -nan)
                                (v128.const f32x4 inf inf inf inf))
                                (v128.const i32x4 0x80400000 0x80400000 0x80400000 0x80400000))
(assert_return (invoke "andnot" (v128.const f32x4 nan nan nan nan)
                                (v128.const f32x4 nan nan nan nan))
                                (v128.const f32x4 0x00000000 0x00000000 0x00000000 0x00000000))
(assert_return (invoke "andnot" (v128.const f32x4 nan nan nan nan)
                                (v128.const f32x4 -inf -inf -inf -inf))
                                (v128.const i32x4 0x00400000 0x00400000 0x00400000 0x00400000))
(assert_return (invoke "andnot" (v128.const f32x4 nan nan nan nan)
                                (v128.const f32x4 inf inf inf inf))
                                (v128.const i32x4 0x00400000 0x00400000 0x00400000 0x00400000))
(assert_return (invoke "andnot" (v128.const f32x4 -inf -inf -inf -inf)
                                (v128.const f32x4 -inf -inf -inf -inf))
                                (v128.const f32x4 0x00000000 0x00000000 0x00000000 0x00000000))
(assert_return (invoke "andnot" (v128.const f32x4 -inf -inf -inf -inf)
                                (v128.const f32x4 inf inf inf inf))
                                (v128.const i32x4 0x80000000 0x80000000 0x80000000 0x80000000))
(assert_return (invoke "andnot" (v128.const f32x4 inf inf inf inf)
                                (v128.const f32x4 inf inf inf inf))
                                (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000))

;; Type check

;; not
(module
  (type (;0;) (func))
  (type (;1;) (func (param i64)))
  (type (;2;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 1)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 2)))
  (func (;2;) (type 0)
    i64.const 16
    i64.const 0
    call 1
    i64.const 5
    call 0
    block ;; label = @1
      block (result v128) ;; label = @2
        block (result v128) ;; label = @3
          i32.const 0
          v128.load
          i64.const 6
          call 0
        end
        v128.not
      end
      drop
    end
  )
  (func (;3;) (type 0)
    i64.const 32
    i64.const 0
    call 1
    i64.const 5
    call 0
    block ;; label = @1
      block (result v128) ;; label = @2
        block (result v128) ;; label = @3
          i32.const 0
          v128.load
          i64.const 4
          call 0
        end
        block (result v128) ;; label = @3
          i32.const 1
          v128.load
          i64.const 6
          call 0
        end
        v128.and
      end
      drop
    end
  )
  (func (;4;) (type 0)
    i64.const 32
    i64.const 0
    call 1
    i64.const 5
    call 0
    block ;; label = @1
      block (result v128) ;; label = @2
        block (result v128) ;; label = @3
          i32.const 0
          v128.load
          i64.const 4
          call 0
        end
        block (result v128) ;; label = @3
          i32.const 1
          v128.load
          i64.const 6
          call 0
        end
        v128.or
      end
      drop
    end
  )
  (func (;5;) (type 0)
    i64.const 32
    i64.const 0
    call 1
    i64.const 5
    call 0
    block ;; label = @1
      block (result v128) ;; label = @2
        block (result v128) ;; label = @3
          i32.const 0
          v128.load
          i64.const 4
          call 0
        end
        block (result v128) ;; label = @3
          i32.const 1
          v128.load
          i64.const 6
          call 0
        end
        v128.xor
      end
      drop
    end
  )
  (func (;6;) (type 0)
    i64.const 48
    i64.const 0
    call 1
    i64.const 5
    call 0
    block ;; label = @1
      block (result v128) ;; label = @2
        block (result v128) ;; label = @3
          i32.const 0
          v128.load
          i64.const 4
          call 0
        end
        block (result v128) ;; label = @3
          i32.const 1
          v128.load
          i64.const 4
          call 0
        end
        block (result v128) ;; label = @3
          i32.const 2
          v128.load
          i64.const 6
          call 0
        end
        v128.bitselect
      end
      drop
    end
  )
  (func (;7;) (type 0)
    i64.const 32
    i64.const 0
    call 1
    i64.const 5
    call 0
    block ;; label = @1
      block (result v128) ;; label = @2
        block (result v128) ;; label = @3
          i32.const 0
          v128.load
          i64.const 4
          call 0
        end
        block (result v128) ;; label = @3
          i32.const 1
          v128.load
          i64.const 6
          call 0
        end
        v128.andnot
      end
      drop
    end
  )
  (func (;8;) (type 0)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 0
    v128.load
    i64.const 5
    call 0
    v128.not
    v128.not
    v128.not
    drop
  )
  (func (;9;) (type 0)
    i64.const 64
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 0
    v128.load
    i64.const 2
    call 0
    i32.const 1
    v128.load
    i64.const 3
    call 0
    v128.and
    i32.const 0
    v128.load
    i64.const 2
    call 0
    i32.const 1
    v128.load
    i64.const 4
    call 0
    v128.and
    v128.and
    i32.const 0
    v128.load
    i64.const 2
    call 0
    i32.const 1
    v128.load
    i64.const 3
    call 0
    v128.and
    i32.const 0
    v128.load
    i64.const 2
    call 0
    i32.const 1
    v128.load
    i64.const 5
    call 0
    v128.and
    v128.and
    v128.and
    drop
  )
  (func (;10;) (type 0)
    i64.const 64
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 0
    v128.load
    i64.const 2
    call 0
    i32.const 1
    v128.load
    i64.const 3
    call 0
    v128.or
    i32.const 0
    v128.load
    i64.const 2
    call 0
    i32.const 1
    v128.load
    i64.const 4
    call 0
    v128.or
    v128.or
    i32.const 0
    v128.load
    i64.const 2
    call 0
    i32.const 1
    v128.load
    i64.const 3
    call 0
    v128.or
    i32.const 0
    v128.load
    i64.const 2
    call 0
    i32.const 1
    v128.load
    i64.const 5
    call 0
    v128.or
    v128.or
    v128.or
    drop
  )
  (func (;11;) (type 0)
    i64.const 64
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 0
    v128.load
    i64.const 2
    call 0
    i32.const 1
    v128.load
    i64.const 3
    call 0
    v128.xor
    i32.const 0
    v128.load
    i64.const 2
    call 0
    i32.const 1
    v128.load
    i64.const 4
    call 0
    v128.xor
    v128.xor
    i32.const 0
    v128.load
    i64.const 2
    call 0
    i32.const 1
    v128.load
    i64.const 3
    call 0
    v128.xor
    i32.const 0
    v128.load
    i64.const 2
    call 0
    i32.const 1
    v128.load
    i64.const 5
    call 0
    v128.xor
    v128.xor
    v128.xor
    drop
  )
  (func (;12;) (type 0)
    i64.const 112
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 0
    v128.load
    i64.const 2
    call 0
    i32.const 1
    v128.load
    i64.const 2
    call 0
    i32.const 2
    v128.load
    i64.const 3
    call 0
    v128.bitselect
    i32.const 0
    v128.load
    i64.const 2
    call 0
    i32.const 1
    v128.load
    i64.const 2
    call 0
    i32.const 2
    v128.load
    i64.const 3
    call 0
    v128.bitselect
    i32.const 0
    v128.load
    i64.const 2
    call 0
    i32.const 1
    v128.load
    i64.const 2
    call 0
    i32.const 2
    v128.load
    i64.const 4
    call 0
    v128.bitselect
    v128.bitselect
    i32.const 0
    v128.load
    i64.const 2
    call 0
    i32.const 1
    v128.load
    i64.const 2
    call 0
    i32.const 2
    v128.load
    i64.const 3
    call 0
    v128.bitselect
    i32.const 0
    v128.load
    i64.const 2
    call 0
    i32.const 1
    v128.load
    i64.const 2
    call 0
    i32.const 2
    v128.load
    i64.const 3
    call 0
    v128.bitselect
    i32.const 0
    v128.load
    i64.const 2
    call 0
    i32.const 1
    v128.load
    i64.const 2
    call 0
    i32.const 2
    v128.load
    i64.const 4
    call 0
    v128.bitselect
    v128.bitselect
    i32.const 0
    v128.load
    i64.const 2
    call 0
    i32.const 1
    v128.load
    i64.const 2
    call 0
    i32.const 2
    v128.load
    i64.const 3
    call 0
    v128.bitselect
    i32.const 0
    v128.load
    i64.const 2
    call 0
    i32.const 1
    v128.load
    i64.const 2
    call 0
    i32.const 2
    v128.load
    i64.const 3
    call 0
    v128.bitselect
    i32.const 0
    v128.load
    i64.const 2
    call 0
    i32.const 1
    v128.load
    i64.const 2
    call 0
    i32.const 2
    v128.load
    i64.const 5
    call 0
    v128.bitselect
    v128.bitselect
    v128.bitselect
    drop
  )
  (func (;13;) (type 0)
    i64.const 64
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 0
    v128.load
    i64.const 2
    call 0
    i32.const 1
    v128.load
    i64.const 3
    call 0
    v128.andnot
    i32.const 0
    v128.load
    i64.const 2
    call 0
    i32.const 1
    v128.load
    i64.const 4
    call 0
    v128.andnot
    v128.andnot
    i32.const 0
    v128.load
    i64.const 2
    call 0
    i32.const 1
    v128.load
    i64.const 3
    call 0
    v128.andnot
    i32.const 0
    v128.load
    i64.const 2
    call 0
    i32.const 1
    v128.load
    i64.const 5
    call 0
    v128.andnot
    v128.andnot
    v128.andnot
    drop
  )
  (func (;14;) (type 0)
    i64.const 64
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 0
    v128.load
    i64.const 3
    call 0
    v128.not
    i32.const 1
    v128.load
    i64.const 4
    call 0
    v128.not
    v128.and
    i32.const 0
    v128.load
    i64.const 2
    call 0
    i32.const 1
    v128.load
    i64.const 2
    call 0
    i32.const 2
    v128.load
    i64.const 3
    call 0
    v128.bitselect
    i32.const 0
    v128.load
    i64.const 2
    call 0
    i32.const 1
    v128.load
    i64.const 5
    call 0
    v128.andnot
    v128.xor
    v128.or
    drop
  )
  (memory (;0;) 1)
  (export "v128.not-in-block" (func 2))
  (export "v128.and-in-block" (func 3))
  (export "v128.or-in-block" (func 4))
  (export "v128.xor-in-block" (func 5))
  (export "v128.bitselect-in-block" (func 6))
  (export "v128.andnot-in-block" (func 7))
  (export "nested-v128.not" (func 8))
  (export "nested-v128.and" (func 9))
  (export "nested-v128.or" (func 10))
  (export "nested-v128.xor" (func 11))
  (export "nested-v128.bitselect" (func 12))
  (export "nested-v128.andnot" (func 13))
  (export "as-param" (func 14))
)
(assert_return (invoke "v128.not-in-block"))
(assert_return (invoke "v128.and-in-block"))
(assert_return (invoke "v128.or-in-block"))
(assert_return (invoke "v128.xor-in-block"))
(assert_return (invoke "v128.bitselect-in-block"))
(assert_return (invoke "v128.andnot-in-block"))
(assert_return (invoke "nested-v128.not"))
(assert_return (invoke "nested-v128.and"))
(assert_return (invoke "nested-v128.or"))
(assert_return (invoke "nested-v128.xor"))
(assert_return (invoke "nested-v128.bitselect"))
(assert_return (invoke "nested-v128.andnot"))
(assert_return (invoke "as-param"))


;; Test operation with empty argument

