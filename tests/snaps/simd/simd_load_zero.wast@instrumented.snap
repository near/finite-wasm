(module
  (type (;0;) (func (param i32) (result v128)))
  (type (;1;) (func (result v128)))
  (type (;2;) (func (param i64)))
  (type (;3;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 2)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 3)))
  (func (;2;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load32_zero
    i64.const 1
    call 0
  )
  (func (;3;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load64_zero
    i64.const 1
    call 0
  )
  (func (;4;) (type 1) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 0
    v128.load32_zero
    i64.const 1
    call 0
  )
  (func (;5;) (type 1) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 8
    v128.load64_zero
    i64.const 1
    call 0
  )
  (func (;6;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load32_zero
    i64.const 1
    call 0
  )
  (func (;7;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load32_zero align=1
    i64.const 1
    call 0
  )
  (func (;8;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load32_zero align=1
    i64.const 1
    call 0
  )
  (func (;9;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load32_zero offset=1 align=1
    i64.const 1
    call 0
  )
  (func (;10;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load32_zero offset=10
    i64.const 1
    call 0
  )
  (func (;11;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load64_zero
    i64.const 1
    call 0
  )
  (func (;12;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load64_zero align=1
    i64.const 1
    call 0
  )
  (func (;13;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load64_zero align=1
    i64.const 1
    call 0
  )
  (func (;14;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load64_zero offset=1 align=1
    i64.const 1
    call 0
  )
  (func (;15;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load64_zero offset=10 align=4
    i64.const 1
    call 0
  )
  (func (;16;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load64_zero offset=20
    i64.const 1
    call 0
  )
  (memory (;0;) 1)
  (export "v128.load32_zero" (func 2))
  (export "v128.load64_zero" (func 3))
  (export "v128.load32_zero_const0" (func 4))
  (export "v128.load64_zero_const8" (func 5))
  (export "v128.load32_zero_offset0" (func 6))
  (export "v128.load32_zero_align1" (func 7))
  (export "v128.load32_zero_offset0_align1" (func 8))
  (export "v128.load32_zero_offset1_align1" (func 9))
  (export "v128.load32_zero_offset10_align4" (func 10))
  (export "v128.load64_zero_offset0" (func 11))
  (export "v128.load64_zero_align1" (func 12))
  (export "v128.load64_zero_offset0_align1" (func 13))
  (export "v128.load64_zero_offset1_align1" (func 14))
  (export "v128.load64_zero_offset10_align4" (func 15))
  (export "v128.load64_zero_offset20_align8" (func 16))
  (data (;0;) (i32.const 0) "\00\01\02\03\04\05\06\07\08\09\0a\0b\0c\0d\0e\0f\80\81\82\83\84\85\86\87\88\89")
  (data (;1;) (i32.const 65520) "\0a\0b\0c\0d\0e\0f\80\81\82\83\84\85\86\87\88\89")
)
(assert_return (invoke "v128.load32_zero" (i32.const 0)) (v128.const i32x4 0x03020100 0x00000000 0x00000000 0x00000000))
(assert_return (invoke "v128.load64_zero" (i32.const 0)) (v128.const i64x2 0x0706050403020100 0x0000000000000000))
(assert_return (invoke "v128.load32_zero" (i32.const 10)) (v128.const i32x4 0x0D0C0B0A 0x00000000 0x00000000 0x00000000))
(assert_return (invoke "v128.load64_zero" (i32.const 10)) (v128.const i64x2 0x81800F0E0D0C0B0A 0x0000000000000000))
(assert_return (invoke "v128.load32_zero" (i32.const 20)) (v128.const i32x4 0x87868584 0x00000000 0x00000000 0x00000000))
(assert_return (invoke "v128.load64_zero" (i32.const 20)) (v128.const i64x2 0x0000898887868584 0x0000000000000000))

;; load by a constant amount
(assert_return (invoke "v128.load32_zero_const0") (v128.const i32x4 0x03020100 0x00000000 0x00000000 0x00000000))
(assert_return (invoke "v128.load64_zero_const8") (v128.const i64x2 0x0F0E0D0C0B0A0908 0x0000000000000000))

;; load data with different offset/align arguments
;; load32_zero
(assert_return (invoke "v128.load32_zero_offset0" (i32.const 0)) (v128.const i32x4 0x03020100 0x00000000 0x00000000 0x00000000))
(assert_return (invoke "v128.load32_zero_align1" (i32.const 1)) (v128.const i32x4 0x04030201 0x00000000 0x00000000 0x00000000))
(assert_return (invoke "v128.load32_zero_offset0_align1" (i32.const 2)) (v128.const i32x4 0x05040302 0x00000000 0x00000000 0x00000000))
(assert_return (invoke "v128.load32_zero_offset10_align4" (i32.const 3)) (v128.const i32x4 0x800F0E0D 0x00000000 0x00000000 0x00000000))

;; load64_zero
(assert_return (invoke "v128.load64_zero_offset0" (i32.const 0)) (v128.const i64x2 0x0706050403020100 0x0000000000000000))
(assert_return (invoke "v128.load64_zero_align1" (i32.const 1)) (v128.const i64x2 0x0807060504030201 0x0000000000000000))
(assert_return (invoke "v128.load64_zero_offset0_align1" (i32.const 2)) (v128.const i64x2 0x0908070605040302 0x0000000000000000))
(assert_return (invoke "v128.load64_zero_offset10_align4" (i32.const 3)) (v128.const i64x2 0x84838281800F0E0D 0x0000000000000000))
(assert_return (invoke "v128.load64_zero_offset20_align8" (i32.const 4)) (v128.const i64x2 0x0000000000008988 0x0000000000000000))

;; out of bounds memory access
(assert_trap (invoke "v128.load32_zero" (i32.const -1))  "out of bounds memory access")
(assert_trap (invoke "v128.load64_zero" (i32.const -1))  "out of bounds memory access")

(assert_trap (invoke "v128.load32_zero_offset1_align1" (i32.const -1)) "out of bounds memory access")
(assert_trap (invoke "v128.load64_zero_offset1_align1" (i32.const -1)) "out of bounds memory access")

;; type check
(module
  (type (;0;) (func (result v128)))
  (type (;1;) (func (result i32)))
  (type (;2;) (func (result i64)))
  (type (;3;) (func (param i64)))
  (type (;4;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 3)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 4)))
  (func (;2;) (type 0) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 4
    call 0
    block (result v128) ;; label = @1
      block (result v128) ;; label = @2
        i32.const 0
        v128.load32_zero
        i64.const 3
        call 0
      end
    end
  )
  (func (;3;) (type 0) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 4
    call 0
    block (result v128) ;; label = @1
      block (result v128) ;; label = @2
        i32.const 1
        v128.load64_zero
        i64.const 3
        call 0
      end
    end
  )
  (func (;4;) (type 0) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 3
    call 0
    block (result v128) ;; label = @1
      i32.const 6
      v128.load32_zero
      i64.const 1
      call 0
      br 0 (;@1;)
      i64.const 1
      call 0
    end
    i64.const 1
    call 0
  )
  (func (;5;) (type 0) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 3
    call 0
    block (result v128) ;; label = @1
      i32.const 7
      v128.load64_zero
      i64.const 1
      call 0
      br 0 (;@1;)
      i64.const 1
      call 0
    end
    i64.const 1
    call 0
  )
  (func (;6;) (type 1) (result i32)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 12
    v128.load32_zero
    i64.const 2
    call 0
    i32x4.extract_lane 0
  )
  (func (;7;) (type 2) (result i64)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 13
    v128.load64_zero
    i64.const 2
    call 0
    i64x2.extract_lane 0
  )
  (memory (;0;) 1)
  (export "v128.load32_zero-in-block" (func 2))
  (export "v128.load64_zero-in-block" (func 3))
  (export "v128.load32_zero-as-br-value" (func 4))
  (export "v128.load64_zero-as-br-value" (func 5))
  (export "v128.load32_zero-extract_lane_s-operand" (func 6))
  (export "v128.load64_zero-extract_lane_s-operand" (func 7))
  (data (;0;) (i32.const 0) "\00\01\02\03\04\05\06\07\08\09\0a\0b\0c\0d\0e\0f\80\81\82\83\84\85\86\87\88\89")
)
(assert_return (invoke "v128.load32_zero-in-block") (v128.const i32x4 0x03020100 0x00000000 0x00000000 0x00000000))
(assert_return (invoke "v128.load64_zero-in-block") (v128.const i64x2 0x0807060504030201 0x0000000000000000))
(assert_return (invoke "v128.load32_zero-as-br-value") (v128.const i32x4 0x09080706 0x00000000 0x00000000 0x00000000))
(assert_return (invoke "v128.load64_zero-as-br-value") (v128.const i64x2 0x0E0D0C0B0A090807 0x0000000000000000))
(assert_return (invoke "v128.load32_zero-extract_lane_s-operand") (i32.const 0x0F0E0D0C))
(assert_return (invoke "v128.load64_zero-extract_lane_s-operand") (i64.const 0x84838281800F0E0D))
