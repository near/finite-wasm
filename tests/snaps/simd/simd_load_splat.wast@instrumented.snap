(module
  (type (;0;) (func (param i32) (result v128)))
  (type (;1;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 1)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 1)))
  (func (;2;) (type 0) (param $address i32) (result v128)
    i64.const 1000000000016
    call 1
    i64.const 2
    call 0
    local.get $address
    v128.load8_splat
    i64.const 1
    call 0
  )
  (func (;3;) (type 0) (param $address i32) (result v128)
    i64.const 1000000000016
    call 1
    i64.const 2
    call 0
    local.get $address
    v128.load16_splat
    i64.const 1
    call 0
  )
  (func (;4;) (type 0) (param $address i32) (result v128)
    i64.const 1000000000016
    call 1
    i64.const 2
    call 0
    local.get $address
    v128.load32_splat
    i64.const 1
    call 0
  )
  (func (;5;) (type 0) (param $address i32) (result v128)
    i64.const 1000000000016
    call 1
    i64.const 2
    call 0
    local.get $address
    v128.load64_splat
    i64.const 1
    call 0
  )
  (func (;6;) (type 0) (param $address i32) (result v128)
    i64.const 1000000000016
    call 1
    i64.const 2
    call 0
    local.get $address
    v128.load8_splat
    i64.const 1
    call 0
  )
  (func (;7;) (type 0) (param $address i32) (result v128)
    i64.const 1000000000016
    call 1
    i64.const 2
    call 0
    local.get $address
    v128.load8_splat
    i64.const 1
    call 0
  )
  (func (;8;) (type 0) (param $address i32) (result v128)
    i64.const 1000000000016
    call 1
    i64.const 2
    call 0
    local.get $address
    v128.load8_splat offset=1
    i64.const 1
    call 0
  )
  (func (;9;) (type 0) (param $address i32) (result v128)
    i64.const 1000000000016
    call 1
    i64.const 2
    call 0
    local.get $address
    v128.load8_splat offset=2
    i64.const 1
    call 0
  )
  (func (;10;) (type 0) (param $address i32) (result v128)
    i64.const 1000000000016
    call 1
    i64.const 2
    call 0
    local.get $address
    v128.load8_splat offset=15
    i64.const 1
    call 0
  )
  (func (;11;) (type 0) (param $address i32) (result v128)
    i64.const 1000000000016
    call 1
    i64.const 2
    call 0
    local.get $address
    v128.load16_splat
    i64.const 1
    call 0
  )
  (func (;12;) (type 0) (param $address i32) (result v128)
    i64.const 1000000000016
    call 1
    i64.const 2
    call 0
    local.get $address
    v128.load16_splat align=1
    i64.const 1
    call 0
  )
  (func (;13;) (type 0) (param $address i32) (result v128)
    i64.const 1000000000016
    call 1
    i64.const 2
    call 0
    local.get $address
    v128.load16_splat offset=1 align=1
    i64.const 1
    call 0
  )
  (func (;14;) (type 0) (param $address i32) (result v128)
    i64.const 1000000000016
    call 1
    i64.const 2
    call 0
    local.get $address
    v128.load16_splat offset=2 align=1
    i64.const 1
    call 0
  )
  (func (;15;) (type 0) (param $address i32) (result v128)
    i64.const 1000000000016
    call 1
    i64.const 2
    call 0
    local.get $address
    v128.load16_splat offset=15
    i64.const 1
    call 0
  )
  (func (;16;) (type 0) (param $address i32) (result v128)
    i64.const 1000000000016
    call 1
    i64.const 2
    call 0
    local.get $address
    v128.load32_splat
    i64.const 1
    call 0
  )
  (func (;17;) (type 0) (param $address i32) (result v128)
    i64.const 1000000000016
    call 1
    i64.const 2
    call 0
    local.get $address
    v128.load32_splat align=1
    i64.const 1
    call 0
  )
  (func (;18;) (type 0) (param $address i32) (result v128)
    i64.const 1000000000016
    call 1
    i64.const 2
    call 0
    local.get $address
    v128.load32_splat offset=1 align=1
    i64.const 1
    call 0
  )
  (func (;19;) (type 0) (param $address i32) (result v128)
    i64.const 1000000000016
    call 1
    i64.const 2
    call 0
    local.get $address
    v128.load32_splat offset=2 align=2
    i64.const 1
    call 0
  )
  (func (;20;) (type 0) (param $address i32) (result v128)
    i64.const 1000000000016
    call 1
    i64.const 2
    call 0
    local.get $address
    v128.load32_splat offset=15
    i64.const 1
    call 0
  )
  (func (;21;) (type 0) (param $address i32) (result v128)
    i64.const 1000000000016
    call 1
    i64.const 2
    call 0
    local.get $address
    v128.load64_splat
    i64.const 1
    call 0
  )
  (func (;22;) (type 0) (param $address i32) (result v128)
    i64.const 1000000000016
    call 1
    i64.const 2
    call 0
    local.get $address
    v128.load64_splat align=1
    i64.const 1
    call 0
  )
  (func (;23;) (type 0) (param $address i32) (result v128)
    i64.const 1000000000016
    call 1
    i64.const 2
    call 0
    local.get $address
    v128.load64_splat offset=1 align=2
    i64.const 1
    call 0
  )
  (func (;24;) (type 0) (param $address i32) (result v128)
    i64.const 1000000000016
    call 1
    i64.const 2
    call 0
    local.get $address
    v128.load64_splat offset=2 align=4
    i64.const 1
    call 0
  )
  (func (;25;) (type 0) (param $address i32) (result v128)
    i64.const 1000000000016
    call 1
    i64.const 2
    call 0
    local.get $address
    v128.load64_splat offset=15
    i64.const 1
    call 0
  )
  (func (;26;) (type 0) (param $address i32) (result v128)
    i64.const 1000000000016
    call 1
    i64.const 2
    call 0
    local.get $address
    v128.load8_splat offset=65536
    i64.const 1
    call 0
  )
  (func (;27;) (type 0) (param $address i32) (result v128)
    i64.const 1000000000016
    call 1
    i64.const 2
    call 0
    local.get $address
    v128.load16_splat offset=65535
    i64.const 1
    call 0
  )
  (func (;28;) (type 0) (param $address i32) (result v128)
    i64.const 1000000000016
    call 1
    i64.const 2
    call 0
    local.get $address
    v128.load32_splat offset=65533
    i64.const 1
    call 0
  )
  (func (;29;) (type 0) (param $address i32) (result v128)
    i64.const 1000000000016
    call 1
    i64.const 2
    call 0
    local.get $address
    v128.load64_splat offset=65529
    i64.const 1
    call 0
  )
  (memory (;0;) 1)
  (export "v128.load8_splat" (func 2))
  (export "v128.load16_splat" (func 3))
  (export "v128.load32_splat" (func 4))
  (export "v128.load64_splat" (func 5))
  (export "v8x16.offset0" (func 6))
  (export "v8x16.align1" (func 7))
  (export "v8x16.offset1_align1" (func 8))
  (export "v8x16.offset2_align1" (func 9))
  (export "v8x16.offset15_align1" (func 10))
  (export "v16x8.offset0" (func 11))
  (export "v16x8.align1" (func 12))
  (export "v16x8.offset1_align1" (func 13))
  (export "v16x8.offset2_align1" (func 14))
  (export "v16x8.offset15_align2" (func 15))
  (export "v32x4.offset0" (func 16))
  (export "v32x4.align1" (func 17))
  (export "v32x4.offset1_align1" (func 18))
  (export "v32x4.offset2_align2" (func 19))
  (export "v32x4.offset15_align4" (func 20))
  (export "v64x2.offset0" (func 21))
  (export "v64x2.align1" (func 22))
  (export "v64x2.offset1_align2" (func 23))
  (export "v64x2.offset2_align4" (func 24))
  (export "v64x2.offset15_align8" (func 25))
  (export "v8x16.offset65536" (func 26))
  (export "v16x8.offset65535" (func 27))
  (export "v32x4.offset65533" (func 28))
  (export "v64x2.offset65529" (func 29))
  (data (;0;) (i32.const 0) "\00\01\02\03\04\05\06\07\08\09\0a\0b\0c\0d\0e\0f")
  (data (;1;) (i32.const 65520) "\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f")
)
(assert_return (invoke "v128.load8_splat" (i32.const 0)) (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
(assert_return (invoke "v128.load8_splat" (i32.const 1)) (v128.const i8x16 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))
(assert_return (invoke "v128.load8_splat" (i32.const 2)) (v128.const i8x16 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2))
(assert_return (invoke "v128.load8_splat" (i32.const 3)) (v128.const i8x16 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3))
(assert_return (invoke "v128.load8_splat" (i32.const 65535)) (v128.const i8x16 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31))
(assert_return (invoke "v128.load16_splat" (i32.const 4)) (v128.const i16x8 0x0504 0x0504 0x0504 0x0504 0x0504 0x0504 0x0504 0x0504))
(assert_return (invoke "v128.load16_splat" (i32.const 5)) (v128.const i16x8 0x0605 0x0605 0x0605 0x0605 0x0605 0x0605 0x0605 0x0605))
(assert_return (invoke "v128.load16_splat" (i32.const 6)) (v128.const i16x8 0x0706 0x0706 0x0706 0x0706 0x0706 0x0706 0x0706 0x0706))
(assert_return (invoke "v128.load16_splat" (i32.const 7)) (v128.const i16x8 0x0807 0x0807 0x0807 0x0807 0x0807 0x0807 0x0807 0x0807))
(assert_return (invoke "v128.load16_splat" (i32.const 65534)) (v128.const i16x8 0x1F1E 0x1F1E 0x1F1E 0x1F1E 0x1F1E 0x1F1E 0x1F1E 0x1F1E))
(assert_return (invoke "v128.load32_splat" (i32.const 8)) (v128.const i32x4 0x0B0A0908 0x0B0A0908 0x0B0A0908 0x0B0A0908))
(assert_return (invoke "v128.load32_splat" (i32.const 9)) (v128.const i32x4 0x0C0B0A09 0x0C0B0A09 0x0C0B0A09 0x0C0B0A09))
(assert_return (invoke "v128.load32_splat" (i32.const 10)) (v128.const i32x4 0x0D0C0B0A 0x0D0C0B0A 0x0D0C0B0A 0x0D0C0B0A))
(assert_return (invoke "v128.load32_splat" (i32.const 11)) (v128.const i32x4 0x0E0D0C0B 0x0E0D0C0B 0x0E0D0C0B 0x0E0D0C0B))
(assert_return (invoke "v128.load32_splat" (i32.const 65532)) (v128.const i32x4 0x1F1E1D1C 0x1F1E1D1C 0x1F1E1D1C 0x1F1E1D1C))
(assert_return (invoke "v128.load64_splat" (i32.const 12)) (v128.const i64x2 0x000000000F0E0D0C 0x000000000F0E0D0C))
(assert_return (invoke "v128.load64_splat" (i32.const 13)) (v128.const i64x2 0x00000000000F0E0D 0x00000000000F0E0D))
(assert_return (invoke "v128.load64_splat" (i32.const 14)) (v128.const i64x2 0x0000000000000F0E 0x0000000000000F0E))
(assert_return (invoke "v128.load64_splat" (i32.const 15)) (v128.const i64x2 0x000000000000000F 0x000000000000000F))
(assert_return (invoke "v128.load64_splat" (i32.const 65528)) (v128.const i64x2 0x1F1E1D1C1B1A1918 0x1F1E1D1C1B1A1918))

;; v8x16
(assert_return (invoke "v8x16.offset0" (i32.const 0)) (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
(assert_return (invoke "v8x16.align1" (i32.const 0)) (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
(assert_return (invoke "v8x16.offset1_align1" (i32.const 0)) (v128.const i8x16 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))
(assert_return (invoke "v8x16.offset2_align1" (i32.const 0)) (v128.const i8x16 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2))
(assert_return (invoke "v8x16.offset15_align1" (i32.const 0)) (v128.const i8x16 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15))
(assert_return (invoke "v8x16.offset0" (i32.const 1)) (v128.const i8x16 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))
(assert_return (invoke "v8x16.align1" (i32.const 1)) (v128.const i8x16 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))
(assert_return (invoke "v8x16.offset1_align1" (i32.const 1)) (v128.const i8x16 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2))
(assert_return (invoke "v8x16.offset2_align1" (i32.const 1)) (v128.const i8x16 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3))
(assert_return (invoke "v8x16.offset15_align1" (i32.const 1)) (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
(assert_return (invoke "v8x16.offset0" (i32.const 65535)) (v128.const i8x16 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31))
(assert_return (invoke "v8x16.align1" (i32.const 65535)) (v128.const i8x16 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31))
;; v16x8
(assert_return (invoke "v16x8.offset0" (i32.const 0)) (v128.const i16x8 0x0100 0x0100 0x0100 0x0100 0x0100 0x0100 0x0100 0x0100))
(assert_return (invoke "v16x8.align1" (i32.const 0)) (v128.const i16x8 0x0100 0x0100 0x0100 0x0100 0x0100 0x0100 0x0100 0x0100))
(assert_return (invoke "v16x8.offset1_align1" (i32.const 0)) (v128.const i16x8 0x0201 0x0201 0x0201 0x0201 0x0201 0x0201 0x0201 0x0201))
(assert_return (invoke "v16x8.offset2_align1" (i32.const 0)) (v128.const i16x8 0x0302 0x0302 0x0302 0x0302 0x0302 0x0302 0x0302 0x0302))
(assert_return (invoke "v16x8.offset15_align2" (i32.const 0)) (v128.const i16x8 0x000F 0x000F 0x000F 0x000F 0x000F 0x000F 0x000F 0x000F))
(assert_return (invoke "v16x8.offset0" (i32.const 1)) (v128.const i16x8 0x0201 0x0201 0x0201 0x0201 0x0201 0x0201 0x0201 0x0201))
(assert_return (invoke "v16x8.align1" (i32.const 1)) (v128.const i16x8 0x0201 0x0201 0x0201 0x0201 0x0201 0x0201 0x0201 0x0201))
(assert_return (invoke "v16x8.offset1_align1" (i32.const 1)) (v128.const i16x8 0x0302 0x0302 0x0302 0x0302 0x0302 0x0302 0x0302 0x0302))
(assert_return (invoke "v16x8.offset2_align1" (i32.const 1)) (v128.const i16x8 0x0403 0x0403 0x0403 0x0403 0x0403 0x0403 0x0403 0x0403))
(assert_return (invoke "v16x8.offset15_align2" (i32.const 1)) (v128.const i16x8 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000))
(assert_return (invoke "v16x8.offset0" (i32.const 65534)) (v128.const i16x8 0x1F1E 0x1F1E 0x1F1E 0x1F1E 0x1F1E 0x1F1E 0x1F1E 0x1F1E))
(assert_return (invoke "v16x8.align1" (i32.const 65534)) (v128.const i16x8 0x1F1E 0x1F1E 0x1F1E 0x1F1E 0x1F1E 0x1F1E 0x1F1E 0x1F1E))
;; v32x4
(assert_return (invoke "v32x4.offset0" (i32.const 0)) (v128.const i32x4 0x03020100 0x03020100 0x03020100 0x03020100))
(assert_return (invoke "v32x4.align1" (i32.const 0)) (v128.const i32x4 0x03020100 0x03020100 0x03020100 0x03020100))
(assert_return (invoke "v32x4.offset1_align1" (i32.const 0)) (v128.const i32x4 0x04030201 0x04030201 0x04030201 0x04030201))
(assert_return (invoke "v32x4.offset2_align2" (i32.const 0)) (v128.const i32x4 0x05040302 0x05040302 0x05040302 0x05040302))
(assert_return (invoke "v32x4.offset15_align4" (i32.const 0)) (v128.const i32x4 0x0000000F 0x0000000F 0x0000000F 0x0000000F))
(assert_return (invoke "v32x4.offset0" (i32.const 1)) (v128.const i32x4 0x04030201 0x04030201 0x04030201 0x04030201))
(assert_return (invoke "v32x4.align1" (i32.const 1)) (v128.const i32x4 0x04030201 0x04030201 0x04030201 0x04030201))
(assert_return (invoke "v32x4.offset1_align1" (i32.const 1)) (v128.const i32x4 0x05040302 0x05040302 0x05040302 0x05040302))
(assert_return (invoke "v32x4.offset2_align2" (i32.const 1)) (v128.const i32x4 0x06050403 0x06050403 0x06050403 0x06050403))
(assert_return (invoke "v32x4.offset15_align4" (i32.const 1)) (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000))
(assert_return (invoke "v32x4.offset0" (i32.const 65532)) (v128.const i32x4 0x1F1E1D1C 0x1F1E1D1C 0x1F1E1D1C 0x1F1E1D1C))
(assert_return (invoke "v32x4.align1" (i32.const 65532)) (v128.const i32x4 0x1F1E1D1C 0x1F1E1D1C 0x1F1E1D1C 0x1F1E1D1C))
;; v64x2
(assert_return (invoke "v64x2.offset0" (i32.const 0)) (v128.const i64x2 0x0706050403020100 0x0706050403020100))
(assert_return (invoke "v64x2.align1" (i32.const 0)) (v128.const i64x2 0x0706050403020100 0x0706050403020100))
(assert_return (invoke "v64x2.offset1_align2" (i32.const 0)) (v128.const i64x2 0x0807060504030201 0x0807060504030201))
(assert_return (invoke "v64x2.offset2_align4" (i32.const 0)) (v128.const i64x2 0x0908070605040302 0x0908070605040302))
(assert_return (invoke "v64x2.offset15_align8" (i32.const 0)) (v128.const i64x2 0x000000000000000F 0x000000000000000F))
(assert_return (invoke "v64x2.offset0" (i32.const 1)) (v128.const i64x2 0x0807060504030201 0x0807060504030201))
(assert_return (invoke "v64x2.align1" (i32.const 1)) (v128.const i64x2 0x0807060504030201 0x0807060504030201))
(assert_return (invoke "v64x2.offset1_align2" (i32.const 1)) (v128.const i64x2 0x0908070605040302 0x0908070605040302))
(assert_return (invoke "v64x2.offset2_align4" (i32.const 1)) (v128.const i64x2 0x0A09080706050403 0x0A09080706050403))
(assert_return (invoke "v64x2.offset15_align8" (i32.const 1)) (v128.const i64x2 0x0000000000000000 0x0000000000000000))
(assert_return (invoke "v64x2.offset0" (i32.const 65528)) (v128.const i64x2 0x1F1E1D1C1B1A1918 0x1F1E1D1C1B1A1918))
(assert_return (invoke "v64x2.align1" (i32.const 65528)) (v128.const i64x2 0x1F1E1D1C1B1A1918 0x1F1E1D1C1B1A1918))


;; Out of bounds memory access
(assert_trap (invoke "v128.load8_splat" (i32.const -1)) "out of bounds memory access")
(assert_trap (invoke "v128.load16_splat" (i32.const -1)) "out of bounds memory access")
(assert_trap (invoke "v128.load32_splat" (i32.const -1)) "out of bounds memory access")
(assert_trap (invoke "v128.load64_splat" (i32.const -1)) "out of bounds memory access")
(assert_trap (invoke "v128.load8_splat" (i32.const 65536)) "out of bounds memory access")
(assert_trap (invoke "v128.load16_splat" (i32.const 65535)) "out of bounds memory access")
(assert_trap (invoke "v128.load32_splat" (i32.const 65533)) "out of bounds memory access")
(assert_trap (invoke "v128.load64_splat" (i32.const 65529)) "out of bounds memory access")

(assert_trap (invoke "v8x16.offset1_align1" (i32.const 65535)) "out of bounds memory access")
(assert_trap (invoke "v8x16.offset2_align1" (i32.const 65535)) "out of bounds memory access")
(assert_trap (invoke "v8x16.offset15_align1" (i32.const 65535)) "out of bounds memory access")
(assert_trap (invoke "v16x8.offset1_align1" (i32.const 65534)) "out of bounds memory access")
(assert_trap (invoke "v16x8.offset2_align1" (i32.const 65534)) "out of bounds memory access")
(assert_trap (invoke "v16x8.offset15_align2" (i32.const 65534)) "out of bounds memory access")
(assert_trap (invoke "v32x4.offset1_align1" (i32.const 65532)) "out of bounds memory access")
(assert_trap (invoke "v32x4.offset2_align2" (i32.const 65532)) "out of bounds memory access")
(assert_trap (invoke "v32x4.offset15_align4" (i32.const 65532)) "out of bounds memory access")
(assert_trap (invoke "v64x2.offset1_align2" (i32.const 65528)) "out of bounds memory access")
(assert_trap (invoke "v64x2.offset2_align4" (i32.const 65528)) "out of bounds memory access")
(assert_trap (invoke "v64x2.offset15_align8" (i32.const 65528)) "out of bounds memory access")

(assert_trap (invoke "v8x16.offset1_align1" (i32.const -1)) "out of bounds memory access")
(assert_trap (invoke "v16x8.offset1_align1" (i32.const -1)) "out of bounds memory access")
(assert_trap (invoke "v32x4.offset1_align1" (i32.const -1)) "out of bounds memory access")
(assert_trap (invoke "v64x2.offset1_align2" (i32.const -1)) "out of bounds memory access")

(assert_trap (invoke "v8x16.offset65536" (i32.const 0)) "out of bounds memory access")
(assert_trap (invoke "v16x8.offset65535" (i32.const 0)) "out of bounds memory access")
(assert_trap (invoke "v32x4.offset65533" (i32.const 0)) "out of bounds memory access")
(assert_trap (invoke "v64x2.offset65529" (i32.const 0)) "out of bounds memory access")
(assert_trap (invoke "v8x16.offset65536" (i32.const 1)) "out of bounds memory access")
(assert_trap (invoke "v16x8.offset65535" (i32.const 1)) "out of bounds memory access")
(assert_trap (invoke "v32x4.offset65533" (i32.const 1)) "out of bounds memory access")
(assert_trap (invoke "v64x2.offset65529" (i32.const 1)) "out of bounds memory access")


;; Combination

(module
  (type (;0;) (func (result v128)))
  (type (;1;) (func (result i32)))
  (type (;2;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 2)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 2)))
  (func (;2;) (type 0) (result v128)
    i64.const 1000000000016
    call 1
    i64.const 4
    call 0
    block (result v128) ;; label = @1
      block (result v128) ;; label = @2
        i32.const 0
        v128.load8_splat
        i64.const 3
        call 0
      end
    end
  )
  (func (;3;) (type 0) (result v128)
    i64.const 1000000000016
    call 1
    i64.const 4
    call 0
    block (result v128) ;; label = @1
      block (result v128) ;; label = @2
        i32.const 1
        v128.load16_splat
        i64.const 3
        call 0
      end
    end
  )
  (func (;4;) (type 0) (result v128)
    i64.const 1000000000016
    call 1
    i64.const 4
    call 0
    block (result v128) ;; label = @1
      block (result v128) ;; label = @2
        i32.const 2
        v128.load32_splat
        i64.const 3
        call 0
      end
    end
  )
  (func (;5;) (type 0) (result v128)
    i64.const 1000000000016
    call 1
    i64.const 4
    call 0
    block (result v128) ;; label = @1
      block (result v128) ;; label = @2
        i32.const 9
        v128.load64_splat
        i64.const 3
        call 0
      end
    end
  )
  (func (;6;) (type 0) (result v128)
    i64.const 1000000000016
    call 1
    i64.const 3
    call 0
    block (result v128) ;; label = @1
      i32.const 3
      v128.load8_splat
      i64.const 1
      call 0
      br 0 (;@1;)
      i64.const 1
      call 0
    end
    i64.const 1
    call 0
  )
  (func (;7;) (type 0) (result v128)
    i64.const 1000000000016
    call 1
    i64.const 3
    call 0
    block (result v128) ;; label = @1
      i32.const 4
      v128.load16_splat
      i64.const 1
      call 0
      br 0 (;@1;)
      i64.const 1
      call 0
    end
    i64.const 1
    call 0
  )
  (func (;8;) (type 0) (result v128)
    i64.const 1000000000016
    call 1
    i64.const 3
    call 0
    block (result v128) ;; label = @1
      i32.const 5
      v128.load32_splat
      i64.const 1
      call 0
      br 0 (;@1;)
      i64.const 1
      call 0
    end
    i64.const 1
    call 0
  )
  (func (;9;) (type 0) (result v128)
    i64.const 1000000000016
    call 1
    i64.const 3
    call 0
    block (result v128) ;; label = @1
      i32.const 10
      v128.load64_splat
      i64.const 1
      call 0
      br 0 (;@1;)
      i64.const 1
      call 0
    end
    i64.const 1
    call 0
  )
  (func (;10;) (type 1) (result i32)
    i64.const 1000000000016
    call 1
    i64.const 2
    call 0
    i32.const 6
    v128.load8_splat
    i64.const 2
    call 0
    i8x16.extract_lane_s 0
  )
  (func (;11;) (type 1) (result i32)
    i64.const 1000000000016
    call 1
    i64.const 2
    call 0
    i32.const 7
    v128.load16_splat
    i64.const 2
    call 0
    i8x16.extract_lane_s 0
  )
  (func (;12;) (type 1) (result i32)
    i64.const 1000000000016
    call 1
    i64.const 2
    call 0
    i32.const 8
    v128.load32_splat
    i64.const 2
    call 0
    i8x16.extract_lane_s 0
  )
  (func (;13;) (type 1) (result i32)
    i64.const 1000000000016
    call 1
    i64.const 2
    call 0
    i32.const 11
    v128.load64_splat
    i64.const 2
    call 0
    i8x16.extract_lane_s 0
  )
  (memory (;0;) 1)
  (export "v128.load8_splat-in-block" (func 2))
  (export "v128.load16_splat-in-block" (func 3))
  (export "v128.load32_splat-in-block" (func 4))
  (export "v128.load64_splat-in-block" (func 5))
  (export "v128.load8_splat-as-br-value" (func 6))
  (export "v128.load16_splat-as-br-value" (func 7))
  (export "v128.load32_splat-as-br-value" (func 8))
  (export "v128.load64_splat-as-br-value" (func 9))
  (export "v128.load8_splat-extract_lane_s-operand" (func 10))
  (export "v128.load16_splat-extract_lane_s-operand" (func 11))
  (export "v128.load32_splat-extract_lane_s-operand" (func 12))
  (export "v128.load64_splat-extract_lane_s-operand" (func 13))
  (data (;0;) (i32.const 0) "\00\01\02\03\04\05\06\07\08\09\0a")
)
(assert_return (invoke "v128.load8_splat-in-block") (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
(assert_return (invoke "v128.load16_splat-in-block") (v128.const i16x8 0x0201 0x0201 0x0201 0x0201 0x0201 0x0201 0x0201 0x0201))
(assert_return (invoke "v128.load32_splat-in-block") (v128.const i32x4 0x05040302 0x05040302 0x05040302 0x05040302))
(assert_return (invoke "v128.load64_splat-in-block") (v128.const i64x2 0x0000000000000A09 0x0000000000000A09))
(assert_return (invoke "v128.load8_splat-as-br-value") (v128.const i8x16 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3))
(assert_return (invoke "v128.load16_splat-as-br-value") (v128.const i16x8 0x0504 0x0504 0x0504 0x0504 0x0504 0x0504 0x0504 0x0504))
(assert_return (invoke "v128.load32_splat-as-br-value") (v128.const i32x4 0x08070605 0x08070605 0x08070605 0x08070605))
(assert_return (invoke "v128.load64_splat-as-br-value") (v128.const i64x2 0x000000000000000A 0x000000000000000A))
(assert_return (invoke "v128.load8_splat-extract_lane_s-operand") (i32.const 6))
(assert_return (invoke "v128.load16_splat-extract_lane_s-operand") (i32.const 7))
(assert_return (invoke "v128.load32_splat-extract_lane_s-operand") (i32.const 8))
(assert_return (invoke "v128.load64_splat-extract_lane_s-operand") (i32.const 0))


;; Type check

