(module
  (type $sig (;0;) (func (param v128 v128 v128) (result v128)))
  (type (;1;) (func (result v128)))
  (type (;2;) (func))
  (type (;3;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func $finite_wasm_gas (;0;) (type 3)))
  (import "spectest" "finite_wasm_stack" (func $finite_wasm_stack (;1;) (type 3)))
  (func (;2;) (type 1) (result v128)
    i64.const 1000000000016
    call $finite_wasm_stack
    i64.const 3
    call $finite_wasm_gas
    block (result v128) ;; label = @1
      v128.const i32x4 0x03020100 0x07060504 0x0b0a0908 0x0f0e0d0c
      br 0 (;@1;)
      i64.const 1
      call $finite_wasm_gas
    end
    i64.const 1
    call $finite_wasm_gas
  )
  (func (;3;) (type 1) (result v128)
    i64.const 1000000000020
    call $finite_wasm_stack
    i64.const 4
    call $finite_wasm_gas
    block (result v128) ;; label = @1
      v128.const i32x4 0x00000000 0x00000001 0x00000002 0x00000003
      i32.const 1
      br_if 0 (;@1;)
      i64.const 1
      call $finite_wasm_gas
    end
    i64.const 1
    call $finite_wasm_gas
  )
  (func (;4;) (type 1) (result v128)
    i64.const 1000000000016
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    v128.const i32x4 0x00000000 0x00000001 0x00000002 0x00000003
    return
    i64.const 1
    call $finite_wasm_gas
  )
  (func (;5;) (type 1) (result v128)
    i64.const 1000000000016
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 1
    if (result v128) ;; label = @1
      i64.const 2
      call $finite_wasm_gas
      v128.const i32x4 0x00000000 0x00000001 0x00000002 0x00000003
    else
      i64.const 2
      call $finite_wasm_gas
      v128.const i32x4 0x00000003 0x00000002 0x00000001 0x00000000
    end
    i64.const 1
    call $finite_wasm_gas
  )
  (func (;6;) (type 1) (result v128)
    i64.const 1000000000016
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 0
    if (result v128) ;; label = @1
      i64.const 2
      call $finite_wasm_gas
      v128.const i32x4 0x00000000 0x00000001 0x00000002 0x00000003
    else
      i64.const 2
      call $finite_wasm_gas
      v128.const i32x4 0x00000003 0x00000002 0x00000001 0x00000000
    end
    i64.const 1
    call $finite_wasm_gas
  )
  (func $f (;7;) (type $sig) (param v128 v128 v128) (result v128)
    i64.const 1000002000016
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    v128.const i32x4 0x00000000 0x00000001 0x00000002 0x00000003
  )
  (func (;8;) (type 1) (result v128)
    i64.const 1000000000048
    call $finite_wasm_stack
    i64.const 4
    call $finite_wasm_gas
    v128.const i32x4 0x00000000 0x00000001 0x00000002 0x00000003
    v128.const i32x4 0x00000000 0x00000001 0x00000002 0x00000003
    v128.const i32x4 0x00000000 0x00000001 0x00000002 0x00000003
    call $f
    i64.const 1
    call $finite_wasm_gas
  )
  (func (;9;) (type 1) (result v128)
    i64.const 1000000000016
    call $finite_wasm_stack
    i64.const 4
    call $finite_wasm_gas
    block (result v128) ;; label = @1
      v128.const i32x4 0x00000000 0x00000001 0x00000002 0x00000003
    end
  )
  (func (;10;) (type 1) (result v128)
    i64.const 1000000000016
    call $finite_wasm_stack
    i64.const 4
    call $finite_wasm_gas
    loop (result v128) ;; label = @1
      v128.const i32x4 0x00000000 0x00000001 0x00000002 0x00000003
    end
  )
  (func (;11;) (type 2)
    i64.const 1000000000016
    call $finite_wasm_stack
    i64.const 3
    call $finite_wasm_gas
    v128.const i32x4 0x00000000 0x00000001 0x00000002 0x00000003
    drop
  )
  (func (;12;) (type 1) (result v128)
    i64.const 1000000000016
    call $finite_wasm_stack
    i64.const 3
    call $finite_wasm_gas
    block (result v128) ;; label = @1
      v128.const i32x4 0x07060504 0x03020100 0x0f0e0d0c 0x0b0a0908
      br 0 (;@1;)
      i64.const 1
      call $finite_wasm_gas
    end
    i64.const 1
    call $finite_wasm_gas
  )
  (func (;13;) (type 1) (result v128)
    i64.const 1000000000020
    call $finite_wasm_stack
    i64.const 4
    call $finite_wasm_gas
    block (result v128) ;; label = @1
      v128.const i32x4 0x00000000 0x00000000 0x00000001 0x00000000
      i32.const 1
      br_if 0 (;@1;)
      i64.const 1
      call $finite_wasm_gas
    end
    i64.const 1
    call $finite_wasm_gas
  )
  (func (;14;) (type 1) (result v128)
    i64.const 1000000000016
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    v128.const i32x4 0x00000000 0x00000000 0x00000001 0x00000000
    return
    i64.const 1
    call $finite_wasm_gas
  )
  (func (;15;) (type 1) (result v128)
    i64.const 1000000000016
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 1
    if (result v128) ;; label = @1
      i64.const 2
      call $finite_wasm_gas
      v128.const i32x4 0x00000000 0x00000000 0x00000001 0x00000000
    else
      i64.const 2
      call $finite_wasm_gas
      v128.const i32x4 0x00000001 0x00000000 0x00000000 0x00000000
    end
    i64.const 1
    call $finite_wasm_gas
  )
  (func (;16;) (type 1) (result v128)
    i64.const 1000000000016
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 0
    if (result v128) ;; label = @1
      i64.const 2
      call $finite_wasm_gas
      v128.const i32x4 0x00000000 0x00000000 0x00000001 0x00000000
    else
      i64.const 2
      call $finite_wasm_gas
      v128.const i32x4 0x00000001 0x00000000 0x00000000 0x00000000
    end
    i64.const 1
    call $finite_wasm_gas
  )
  (func $f2 (;17;) (type $sig) (param v128 v128 v128) (result v128)
    i64.const 1000002000016
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    v128.const i32x4 0x00000000 0x00000000 0x00000001 0x00000000
  )
  (func (;18;) (type 1) (result v128)
    i64.const 1000000000048
    call $finite_wasm_stack
    i64.const 4
    call $finite_wasm_gas
    v128.const i32x4 0x00000000 0x00000000 0x00000001 0x00000000
    v128.const i32x4 0x00000000 0x00000000 0x00000001 0x00000000
    v128.const i32x4 0x00000000 0x00000000 0x00000001 0x00000000
    call $f2
    i64.const 1
    call $finite_wasm_gas
  )
  (func (;19;) (type 1) (result v128)
    i64.const 1000000000052
    call $finite_wasm_stack
    i64.const 5
    call $finite_wasm_gas
    v128.const i32x4 0x00000000 0x00000001 0x00000002 0x00000003
    v128.const i32x4 0x00000000 0x00000001 0x00000002 0x00000003
    v128.const i32x4 0x00000000 0x00000001 0x00000002 0x00000003
    i32.const 0
    call_indirect (type $sig)
    i64.const 1
    call $finite_wasm_gas
  )
  (func (;20;) (type 1) (result v128)
    i64.const 1000000000052
    call $finite_wasm_stack
    i64.const 5
    call $finite_wasm_gas
    v128.const i32x4 0x00000000 0x00000000 0x00000001 0x00000000
    v128.const i32x4 0x00000000 0x00000000 0x00000001 0x00000000
    v128.const i32x4 0x00000000 0x00000000 0x00000001 0x00000000
    i32.const 1
    call_indirect (type $sig)
    i64.const 1
    call $finite_wasm_gas
  )
  (func (;21;) (type 1) (result v128)
    i64.const 1000000000016
    call $finite_wasm_stack
    i64.const 4
    call $finite_wasm_gas
    block (result v128) ;; label = @1
      v128.const i32x4 0x00000000 0x00000000 0x00000001 0x00000000
    end
  )
  (func (;22;) (type 1) (result v128)
    i64.const 1000000000016
    call $finite_wasm_stack
    i64.const 4
    call $finite_wasm_gas
    loop (result v128) ;; label = @1
      v128.const i32x4 0x00000000 0x00000000 0x00000001 0x00000000
    end
  )
  (func (;23;) (type 2)
    i64.const 1000000000016
    call $finite_wasm_stack
    i64.const 3
    call $finite_wasm_gas
    v128.const i32x4 0x00000000 0x00000000 0x00000001 0x00000000
    drop
  )
  (table (;0;) 2 2 funcref)
  (memory (;0;) 1)
  (export "as-br-retval" (func 2))
  (export "as-br_if-retval" (func 3))
  (export "as-return-retval" (func 4))
  (export "as-if-then-retval" (func 5))
  (export "as-if-else-retval" (func 6))
  (export "as-call-param" (func 8))
  (export "as-block-retval" (func 9))
  (export "as-loop-retval" (func 10))
  (export "as-drop-operand" (func 11))
  (export "as-br-retval2" (func 12))
  (export "as-br_if-retval2" (func 13))
  (export "as-return-retval2" (func 14))
  (export "as-if-then-retval2" (func 15))
  (export "as-if-else-retval2" (func 16))
  (export "as-call-param2" (func 18))
  (export "as-call_indirect-param" (func 19))
  (export "as-call_indirect-param2" (func 20))
  (export "as-block-retval2" (func 21))
  (export "as-loop-retval2" (func 22))
  (export "as-drop-operand2" (func 23))
  (elem (;0;) (i32.const 0) func)
)