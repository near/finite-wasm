(module
  (type (;0;) (func (param i32) (result v128)))
  (type (;1;) (func (param f32) (result v128)))
  (type (;2;) (func (param i64) (result v128)))
  (type (;3;) (func (param f64) (result v128)))
  (type (;4;) (func (param i64)))
  (type (;5;) (func (param i64 i64)))
  (type (;6;) (func (param i32 i64 i64) (result i32)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 4)))
  (import "spectest" "finite_wasm_memory_copy" (func (;1;) (type 6)))
  (import "spectest" "finite_wasm_memory_fill" (func (;2;) (type 6)))
  (import "spectest" "finite_wasm_memory_init" (func (;3;) (type 6)))
  (import "spectest" "finite_wasm_table_copy" (func (;4;) (type 6)))
  (import "spectest" "finite_wasm_table_fill" (func (;5;) (type 6)))
  (import "spectest" "finite_wasm_table_init" (func (;6;) (type 6)))
  (import "spectest" "finite_wasm_stack" (func (;7;) (type 5)))
  (import "spectest" "finite_wasm_unstack" (func (;8;) (type 5)))
  (export "i8x16.splat" (func 9))
  (export "i16x8.splat" (func 10))
  (export "i32x4.splat" (func 11))
  (export "f32x4.splat" (func 12))
  (export "i64x2.splat" (func 13))
  (export "f64x2.splat" (func 14))
  (func (;9;) (type 0) (param i32) (result v128)
    block (result v128) ;; label = @1
      i64.const 16
      i64.const 1
      call 7
      i64.const 2
      call 0
      local.get 0
      i8x16.splat
    end
    i64.const 16
    i64.const 1
    call 8
  )
  (func (;10;) (type 0) (param i32) (result v128)
    block (result v128) ;; label = @1
      i64.const 16
      i64.const 1
      call 7
      i64.const 2
      call 0
      local.get 0
      i16x8.splat
    end
    i64.const 16
    i64.const 1
    call 8
  )
  (func (;11;) (type 0) (param i32) (result v128)
    block (result v128) ;; label = @1
      i64.const 16
      i64.const 1
      call 7
      i64.const 2
      call 0
      local.get 0
      i32x4.splat
    end
    i64.const 16
    i64.const 1
    call 8
  )
  (func (;12;) (type 1) (param f32) (result v128)
    block (result v128) ;; label = @1
      i64.const 16
      i64.const 1
      call 7
      i64.const 2
      call 0
      local.get 0
      f32x4.splat
    end
    i64.const 16
    i64.const 1
    call 8
  )
  (func (;13;) (type 2) (param i64) (result v128)
    block (result v128) ;; label = @1
      i64.const 16
      i64.const 1
      call 7
      i64.const 2
      call 0
      local.get 0
      i64x2.splat
    end
    i64.const 16
    i64.const 1
    call 8
  )
  (func (;14;) (type 3) (param f64) (result v128)
    block (result v128) ;; label = @1
      i64.const 16
      i64.const 1
      call 7
      i64.const 2
      call 0
      local.get 0
      f64x2.splat
    end
    i64.const 16
    i64.const 1
    call 8
  )
)

(assert_return (invoke "i8x16.splat" (i32.const 0)) (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
(assert_return (invoke "i8x16.splat" (i32.const 5)) (v128.const i8x16 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5))
(assert_return (invoke "i8x16.splat" (i32.const -5)) (v128.const i8x16 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5))
(assert_return (invoke "i8x16.splat" (i32.const 257)) (v128.const i8x16 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))
(assert_return (invoke "i8x16.splat" (i32.const 0xff)) (v128.const i8x16 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1))
(assert_return (invoke "i8x16.splat" (i32.const -128)) (v128.const i8x16 -128 -128 -128 -128 -128 -128 -128 -128 -128 -128 -128 -128 -128 -128 -128 -128))
(assert_return (invoke "i8x16.splat" (i32.const 127)) (v128.const i8x16 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127))
(assert_return (invoke "i8x16.splat" (i32.const -129)) (v128.const i8x16 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127))
(assert_return (invoke "i8x16.splat" (i32.const 128)) (v128.const i8x16 -128 -128 -128 -128 -128 -128 -128 -128 -128 -128 -128 -128 -128 -128 -128 -128))
(assert_return (invoke "i8x16.splat" (i32.const 0xff7f)) (v128.const i8x16 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f))
(assert_return (invoke "i8x16.splat" (i32.const 0x80)) (v128.const i8x16 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80))
(assert_return (invoke "i8x16.splat" (i32.const 0xAB)) (v128.const i32x4 0xABABABAB 0xABABABAB 0xABABABAB 0xABABABAB))

(assert_return (invoke "i16x8.splat" (i32.const 0)) (v128.const i16x8 0 0 0 0 0 0 0 0))
(assert_return (invoke "i16x8.splat" (i32.const 5)) (v128.const i16x8 5 5 5 5 5 5 5 5))
(assert_return (invoke "i16x8.splat" (i32.const -5)) (v128.const i16x8 -5 -5 -5 -5 -5 -5 -5 -5))
(assert_return (invoke "i16x8.splat" (i32.const 65537)) (v128.const i16x8 1 1 1 1 1 1 1 1))
(assert_return (invoke "i16x8.splat" (i32.const 0xffff)) (v128.const i16x8 -1 -1 -1 -1 -1 -1 -1 -1))
(assert_return (invoke "i16x8.splat" (i32.const -32768)) (v128.const i16x8 -32768 -32768 -32768 -32768 -32768 -32768 -32768 -32768))
(assert_return (invoke "i16x8.splat" (i32.const 32767)) (v128.const i16x8 32767 32767 32767 32767 32767 32767 32767 32767))
(assert_return (invoke "i16x8.splat" (i32.const -32769)) (v128.const i16x8 32767 32767 32767 32767 32767 32767 32767 32767))
(assert_return (invoke "i16x8.splat" (i32.const 32768)) (v128.const i16x8 -32768 -32768 -32768 -32768 -32768 -32768 -32768 -32768))
(assert_return (invoke "i16x8.splat" (i32.const 0xffff7fff)) (v128.const i16x8 0x7fff 0x7fff 0x7fff 0x7fff 0x7fff 0x7fff 0x7fff 0x7fff))
(assert_return (invoke "i16x8.splat" (i32.const 0x8000)) (v128.const i16x8 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000))
(assert_return (invoke "i16x8.splat" (i32.const 0xABCD)) (v128.const i32x4 0xABCDABCD 0xABCDABCD 0xABCDABCD 0xABCDABCD))
(assert_return (invoke "i16x8.splat" (i32.const 012345)) (v128.const i16x8 012_345 012_345 012_345 012_345 012_345 012_345 012_345 012_345))
(assert_return (invoke "i16x8.splat" (i32.const 0x01234)) (v128.const i16x8 0x0_1234 0x0_1234 0x0_1234 0x0_1234 0x0_1234 0x0_1234 0x0_1234 0x0_1234))

(assert_return (invoke "i32x4.splat" (i32.const 0)) (v128.const i32x4 0 0 0 0))
(assert_return (invoke "i32x4.splat" (i32.const 5)) (v128.const i32x4 5 5 5 5))
(assert_return (invoke "i32x4.splat" (i32.const -5)) (v128.const i32x4 -5 -5 -5 -5))
(assert_return (invoke "i32x4.splat" (i32.const 0xffffffff)) (v128.const i32x4 -1 -1 -1 -1))
(assert_return (invoke "i32x4.splat" (i32.const 4294967295)) (v128.const i32x4 -1 -1 -1 -1))
(assert_return (invoke "i32x4.splat" (i32.const -2147483648)) (v128.const i32x4 0x80000000 0x80000000 0x80000000 0x80000000))
(assert_return (invoke "i32x4.splat" (i32.const 2147483647)) (v128.const i32x4 0x7fffffff 0x7fffffff 0x7fffffff 0x7fffffff))
(assert_return (invoke "i32x4.splat" (i32.const 2147483648)) (v128.const i32x4 0x80000000 0x80000000 0x80000000 0x80000000))
(assert_return (invoke "i32x4.splat" (i32.const 01234567890)) (v128.const i32x4 012_3456_7890 012_3456_7890 012_3456_7890 012_3456_7890))
(assert_return (invoke "i32x4.splat" (i32.const 0x012345678)) (v128.const i32x4 0x0_1234_5678 0x0_1234_5678 0x0_1234_5678 0x0_1234_5678))

(assert_return (invoke "f32x4.splat" (f32.const 0.0)) (v128.const f32x4 0.0 0.0 0.0 0.0))
(assert_return (invoke "f32x4.splat" (f32.const 1.1)) (v128.const f32x4 1.1 1.1 1.1 1.1))
(assert_return (invoke "f32x4.splat" (f32.const -1.1)) (v128.const f32x4 -1.1 -1.1 -1.1 -1.1))
(assert_return (invoke "f32x4.splat" (f32.const 1e38)) (v128.const f32x4 1e38 1e38 1e38 1e38))
(assert_return (invoke "f32x4.splat" (f32.const -1e38)) (v128.const f32x4 -1e38 -1e38 -1e38 -1e38))
(assert_return (invoke "f32x4.splat" (f32.const 0x1.fffffep127)) (v128.const f32x4 0x1.fffffep127 0x1.fffffep127 0x1.fffffep127 0x1.fffffep127))
(assert_return (invoke "f32x4.splat" (f32.const -0x1.fffffep127)) (v128.const f32x4 -0x1.fffffep127 -0x1.fffffep127 -0x1.fffffep127 -0x1.fffffep127))
(assert_return (invoke "f32x4.splat" (f32.const 0x1p127)) (v128.const f32x4 0x1p127 0x1p127 0x1p127 0x1p127))
(assert_return (invoke "f32x4.splat" (f32.const -0x1p127)) (v128.const f32x4 -0x1p127 -0x1p127 -0x1p127 -0x1p127))
(assert_return (invoke "f32x4.splat" (f32.const inf)) (v128.const f32x4 inf inf inf inf))
(assert_return (invoke "f32x4.splat" (f32.const -inf)) (v128.const f32x4 -inf -inf -inf -inf))
(assert_return (invoke "f32x4.splat" (f32.const nan)) (v128.const f32x4 nan nan nan nan))
(assert_return (invoke "f32x4.splat" (f32.const nan:0x1)) (v128.const f32x4 nan:0x1 nan:0x1 nan:0x1 nan:0x1))
(assert_return (invoke "f32x4.splat" (f32.const nan:0x7f_ffff)) (v128.const f32x4 nan:0x7f_ffff nan:0x7f_ffff nan:0x7f_ffff nan:0x7f_ffff))
(assert_return (invoke "f32x4.splat" (f32.const 0123456789)) (v128.const f32x4 0123456789 0123456789 0123456789 0123456789))
(assert_return (invoke "f32x4.splat" (f32.const 0123456789.)) (v128.const f32x4 0123456789. 0123456789. 0123456789. 0123456789.))
(assert_return (invoke "f32x4.splat" (f32.const 0x0123456789ABCDEF)) (v128.const f32x4 0x0123456789ABCDEF 0x0123456789ABCDEF 0x0123456789ABCDEF 0x0123456789ABCDEF))
(assert_return (invoke "f32x4.splat" (f32.const 0x0123456789ABCDEF.)) (v128.const f32x4 0x0123456789ABCDEF. 0x0123456789ABCDEF. 0x0123456789ABCDEF. 0x0123456789ABCDEF.))
(assert_return (invoke "f32x4.splat" (f32.const 0123456789e019)) (v128.const f32x4 0123456789e019 0123456789e019 0123456789e019 0123456789e019))
(assert_return (invoke "f32x4.splat" (f32.const 0123456789.e+019)) (v128.const f32x4 0123456789.e+019 0123456789.e+019 0123456789.e+019 0123456789.e+019))
(assert_return (invoke "f32x4.splat" (f32.const 0x0123456789ABCDEFp019)) (v128.const f32x4 0x0123456789ABCDEFp019 0x0123456789ABCDEFp019 0x0123456789ABCDEFp019 0x0123456789ABCDEFp019))
(assert_return (invoke "f32x4.splat" (f32.const 0x0123456789ABCDEF.p-019)) (v128.const f32x4 0x0123456789ABCDEF.p-019 0x0123456789ABCDEF.p-019 0x0123456789ABCDEF.p-019 0x0123456789ABCDEF.p-019))

(assert_return (invoke "i64x2.splat" (i64.const 0)) (v128.const i64x2 0 0))
(assert_return (invoke "i64x2.splat" (i64.const -0)) (v128.const i64x2 0 0))
(assert_return (invoke "i64x2.splat" (i64.const 1)) (v128.const i64x2 1 1))
(assert_return (invoke "i64x2.splat" (i64.const -1)) (v128.const i64x2 -1 -1))
(assert_return (invoke "i64x2.splat" (i64.const -9223372036854775808)) (v128.const i64x2 -9223372036854775808 -9223372036854775808))
(assert_return (invoke "i64x2.splat" (i64.const -9223372036854775808)) (v128.const i64x2 9223372036854775808 9223372036854775808))
(assert_return (invoke "i64x2.splat" (i64.const 9223372036854775807)) (v128.const i64x2 9223372036854775807 9223372036854775807))
(assert_return (invoke "i64x2.splat" (i64.const 18446744073709551615)) (v128.const i64x2 -1 -1))
(assert_return (invoke "i64x2.splat" (i64.const 0x7fffffffffffffff)) (v128.const i64x2 0x7fffffffffffffff 0x7fffffffffffffff))
(assert_return (invoke "i64x2.splat" (i64.const 0xffffffffffffffff)) (v128.const i64x2 -1 -1))
(assert_return (invoke "i64x2.splat" (i64.const -0x8000000000000000)) (v128.const i64x2 -0x8000000000000000 -0x8000000000000000))
(assert_return (invoke "i64x2.splat" (i64.const -0x8000000000000000)) (v128.const i64x2 0x8000000000000000 0x8000000000000000))
(assert_return (invoke "i64x2.splat" (i64.const 01234567890123456789)) (v128.const i64x2 01_234_567_890_123_456_789 01_234_567_890_123_456_789))
(assert_return (invoke "i64x2.splat" (i64.const 0x01234567890ABcdef)) (v128.const i64x2 0x0_1234_5678_90AB_cdef 0x0_1234_5678_90AB_cdef))

(assert_return (invoke "f64x2.splat" (f64.const 0.0)) (v128.const f64x2 0.0 0.0))
(assert_return (invoke "f64x2.splat" (f64.const -0.0)) (v128.const f64x2 -0.0 -0.0))
(assert_return (invoke "f64x2.splat" (f64.const 1.1)) (v128.const f64x2 1.1 1.1))
(assert_return (invoke "f64x2.splat" (f64.const -1.1)) (v128.const f64x2 -1.1 -1.1))
(assert_return (invoke "f64x2.splat" (f64.const 0x0.0000000000001p-1022)) (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
(assert_return (invoke "f64x2.splat" (f64.const -0x0.0000000000001p-1022)) (v128.const f64x2 -0x0.0000000000001p-1022 -0x0.0000000000001p-1022))
(assert_return (invoke "f64x2.splat" (f64.const 0x1p-1022)) (v128.const f64x2 0x1p-1022 0x1p-1022))
(assert_return (invoke "f64x2.splat" (f64.const -0x1p-1022)) (v128.const f64x2 -0x1p-1022 -0x1p-1022))
(assert_return (invoke "f64x2.splat" (f64.const 0x1p-1)) (v128.const f64x2 0x1p-1 0x1p-1))
(assert_return (invoke "f64x2.splat" (f64.const -0x1p-1)) (v128.const f64x2 -0x1p-1 -0x1p-1))
(assert_return (invoke "f64x2.splat" (f64.const 0x1p+0)) (v128.const f64x2 0x1p+0 0x1p+0))
(assert_return (invoke "f64x2.splat" (f64.const -0x1p+0)) (v128.const f64x2 -0x1p+0 -0x1p+0))
(assert_return (invoke "f64x2.splat" (f64.const 0x1.921fb54442d18p+2)) (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.splat" (f64.const -0x1.921fb54442d18p+2)) (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.splat" (f64.const 0x1.fffffffffffffp+1023)) (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.splat" (f64.const -0x1.fffffffffffffp+1023)) (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.splat" (f64.const inf)) (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.splat" (f64.const -inf)) (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.splat" (f64.const nan)) (v128.const f64x2 nan nan))
(assert_return (invoke "f64x2.splat" (f64.const -nan)) (v128.const f64x2 -nan -nan))
(assert_return (invoke "f64x2.splat" (f64.const nan:0x4000000000000)) (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000))
(assert_return (invoke "f64x2.splat" (f64.const -nan:0x4000000000000)) (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000))
(assert_return (invoke "f64x2.splat" (f64.const 0123456789)) (v128.const f64x2 0123456789 0123456789))
(assert_return (invoke "f64x2.splat" (f64.const 0123456789.)) (v128.const f64x2 0123456789. 0123456789.))
(assert_return (invoke "f64x2.splat" (f64.const 0x0123456789ABCDEFabcdef)) (v128.const f64x2 0x0123456789ABCDEFabcdef 0x0123456789ABCDEFabcdef))
(assert_return (invoke "f64x2.splat" (f64.const 0x0123456789ABCDEFabcdef.)) (v128.const f64x2 0x0123456789ABCDEFabcdef. 0x0123456789ABCDEFabcdef.))
(assert_return (invoke "f64x2.splat" (f64.const 0123456789e019)) (v128.const f64x2 0123456789e019 0123456789e019))
(assert_return (invoke "f64x2.splat" (f64.const 0123456789e+019)) (v128.const f64x2 0123456789e+019 0123456789e+019))
(assert_return (invoke "f64x2.splat" (f64.const 0x0123456789ABCDEFabcdef.p019)) (v128.const f64x2 0x0123456789ABCDEFabcdef.p019 0x0123456789ABCDEFabcdef.p019))
(assert_return (invoke "f64x2.splat" (f64.const 0x0123456789ABCDEFabcdef.p-019)) (v128.const f64x2 0x0123456789ABCDEFabcdef.p-019 0x0123456789ABCDEFabcdef.p-019))

;; Unknown operator

(module
  (type (;0;) (func (param i32) (result v128)))
  (type (;1;) (func (param i64) (result v128)))
  (type (;2;) (func (param f64) (result v128)))
  (type (;3;) (func (param i64)))
  (type (;4;) (func (param i64 i64)))
  (type (;5;) (func (param i32 i64 i64) (result i32)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 3)))
  (import "spectest" "finite_wasm_memory_copy" (func (;1;) (type 5)))
  (import "spectest" "finite_wasm_memory_fill" (func (;2;) (type 5)))
  (import "spectest" "finite_wasm_memory_init" (func (;3;) (type 5)))
  (import "spectest" "finite_wasm_table_copy" (func (;4;) (type 5)))
  (import "spectest" "finite_wasm_table_fill" (func (;5;) (type 5)))
  (import "spectest" "finite_wasm_table_init" (func (;6;) (type 5)))
  (import "spectest" "finite_wasm_stack" (func (;7;) (type 4)))
  (import "spectest" "finite_wasm_unstack" (func (;8;) (type 4)))
  (memory (;0;) 1)
  (export "as-v128_store-operand-1" (func 9))
  (export "as-v128_store-operand-2" (func 10))
  (export "as-v128_store-operand-3" (func 11))
  (export "as-v128_store-operand-4" (func 12))
  (export "as-v128_store-operand-5" (func 13))
  (func (;9;) (type 0) (param i32) (result v128)
    block (result v128) ;; label = @1
      i64.const 20
      i64.const 1
      call 7
      i64.const 4
      call 0
      i32.const 0
      local.get 0
      i8x16.splat
      v128.store
      i64.const 2
      call 0
      i32.const 0
      v128.load
    end
    i64.const 20
    i64.const 1
    call 8
  )
  (func (;10;) (type 0) (param i32) (result v128)
    block (result v128) ;; label = @1
      i64.const 20
      i64.const 1
      call 7
      i64.const 4
      call 0
      i32.const 0
      local.get 0
      i16x8.splat
      v128.store
      i64.const 2
      call 0
      i32.const 0
      v128.load
    end
    i64.const 20
    i64.const 1
    call 8
  )
  (func (;11;) (type 0) (param i32) (result v128)
    block (result v128) ;; label = @1
      i64.const 20
      i64.const 1
      call 7
      i64.const 4
      call 0
      i32.const 0
      local.get 0
      i32x4.splat
      v128.store
      i64.const 2
      call 0
      i32.const 0
      v128.load
    end
    i64.const 20
    i64.const 1
    call 8
  )
  (func (;12;) (type 1) (param i64) (result v128)
    block (result v128) ;; label = @1
      i64.const 20
      i64.const 1
      call 7
      i64.const 4
      call 0
      i32.const 0
      local.get 0
      i64x2.splat
      v128.store
      i64.const 2
      call 0
      i32.const 0
      v128.load
    end
    i64.const 20
    i64.const 1
    call 8
  )
  (func (;13;) (type 2) (param f64) (result v128)
    block (result v128) ;; label = @1
      i64.const 20
      i64.const 1
      call 7
      i64.const 4
      call 0
      i32.const 0
      local.get 0
      f64x2.splat
      v128.store
      i64.const 2
      call 0
      i32.const 0
      v128.load
    end
    i64.const 20
    i64.const 1
    call 8
  )
)

(assert_return (invoke "as-v128_store-operand-1" (i32.const 1)) (v128.const i8x16 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))
(assert_return (invoke "as-v128_store-operand-2" (i32.const 256)) (v128.const i16x8 0x100 0x100 0x100 0x100 0x100 0x100 0x100 0x100))
(assert_return (invoke "as-v128_store-operand-3" (i32.const 0xffffffff)) (v128.const i32x4 -1 -1 -1 -1))
(assert_return (invoke "as-v128_store-operand-4" (i64.const 1)) (v128.const i64x2 1 1))
(assert_return (invoke "as-v128_store-operand-5" (f64.const -0x1p+0)) (v128.const f64x2 -0x1p+0 -0x1p+0))

(module
  (type (;0;) (func (param i32) (result i32)))
  (type (;1;) (func (param f32) (result f32)))
  (type (;2;) (func (param i32 i32) (result v128)))
  (type (;3;) (func (param i64) (result i64)))
  (type (;4;) (func (param f64) (result f64)))
  (type (;5;) (func (param i32 i32 i32) (result v128)))
  (type (;6;) (func (param i32 i32 i32 i32) (result v128)))
  (type (;7;) (func (param i64 i64 i64 i64) (result v128)))
  (type (;8;) (func (param f64 f64 f64 f64) (result v128)))
  (type (;9;) (func (param i64) (result i32)))
  (type (;10;) (func (param i64 i64) (result v128)))
  (type (;11;) (func (param f32 f32) (result v128)))
  (type (;12;) (func (param f64 f64) (result v128)))
  (type (;13;) (func (param f32) (result v128)))
  (type (;14;) (func (param i32) (result v128)))
  (type (;15;) (func (param i64)))
  (type (;16;) (func (param i64 i64)))
  (type (;17;) (func (param i32 i64 i64) (result i32)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 15)))
  (import "spectest" "finite_wasm_memory_copy" (func (;1;) (type 17)))
  (import "spectest" "finite_wasm_memory_fill" (func (;2;) (type 17)))
  (import "spectest" "finite_wasm_memory_init" (func (;3;) (type 17)))
  (import "spectest" "finite_wasm_table_copy" (func (;4;) (type 17)))
  (import "spectest" "finite_wasm_table_fill" (func (;5;) (type 17)))
  (import "spectest" "finite_wasm_table_init" (func (;6;) (type 17)))
  (import "spectest" "finite_wasm_stack" (func (;7;) (type 16)))
  (import "spectest" "finite_wasm_unstack" (func (;8;) (type 16)))
  (export "as-i8x16_extract_lane_s-operand-first" (func 9))
  (export "as-i8x16_extract_lane_s-operand-last" (func 10))
  (export "as-i16x8_extract_lane_s-operand-first" (func 11))
  (export "as-i16x8_extract_lane_s-operand-last" (func 12))
  (export "as-i32x4_extract_lane_s-operand-first" (func 13))
  (export "as-i32x4_extract_lane_s-operand-last" (func 14))
  (export "as-f32x4_extract_lane_s-operand-first" (func 15))
  (export "as-f32x4_extract_lane_s-operand-last" (func 16))
  (export "as-v8x16_swizzle-operands" (func 17))
  (export "as-i64x2_extract_lane-operand-first" (func 18))
  (export "as-i64x2_extract_lane-operand-last" (func 19))
  (export "as-f64x2_extract_lane-operand-first" (func 20))
  (export "as-f64x2_extract_lane-operand-last" (func 21))
  (export "as-i8x16_add_sub-operands" (func 22))
  (export "as-i16x8_add_sub_mul-operands" (func 23))
  (export "as-i32x4_add_sub_mul-operands" (func 24))
  (export "as-i64x2_add_sub_mul-operands" (func 25))
  (export "as-f64x2_add_sub_mul-operands" (func 26))
  (export "as-i8x16_add_sat_s-operands" (func 27))
  (export "as-i16x8_add_sat_s-operands" (func 28))
  (export "as-i8x16_sub_sat_u-operands" (func 29))
  (export "as-i16x8_sub_sat_u-operands" (func 30))
  (export "as-i8x16_shr_s-operand" (func 31))
  (export "as-i16x8_shr_s-operand" (func 32))
  (export "as-i32x4_shr_s-operand" (func 33))
  (export "as-v128_and-operands" (func 34))
  (export "as-v128_or-operands" (func 35))
  (export "as-v128_xor-operands" (func 36))
  (export "as-i8x16_all_true-operand" (func 37))
  (export "as-i16x8_all_true-operand" (func 38))
  (export "as-i32x4_all_true-operand1" (func 39))
  (export "as-i32x4_all_true-operand2" (func 40))
  (export "as-i8x16_eq-operands" (func 41))
  (export "as-i16x8_eq-operands" (func 42))
  (export "as-i32x4_eq-operands1" (func 43))
  (export "as-i32x4_eq-operands2" (func 44))
  (export "as-f32x4_eq-operands" (func 45))
  (export "as-f64x2_eq-operands" (func 46))
  (export "as-f32x4_abs-operand" (func 47))
  (export "as-f32x4_min-operands" (func 48))
  (export "as-f32x4_div-operands" (func 49))
  (export "as-f32x4_convert_s_i32x4-operand" (func 50))
  (export "as-i32x4_trunc_s_f32x4_sat-operand" (func 51))
  (func (;9;) (type 0) (param i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 16
      i64.const 1
      call 7
      i64.const 3
      call 0
      local.get 0
      i8x16.splat
      i8x16.extract_lane_s 0
    end
    i64.const 16
    i64.const 1
    call 8
  )
  (func (;10;) (type 0) (param i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 16
      i64.const 1
      call 7
      i64.const 3
      call 0
      local.get 0
      i8x16.splat
      i8x16.extract_lane_s 15
    end
    i64.const 16
    i64.const 1
    call 8
  )
  (func (;11;) (type 0) (param i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 16
      i64.const 1
      call 7
      i64.const 3
      call 0
      local.get 0
      i16x8.splat
      i16x8.extract_lane_s 0
    end
    i64.const 16
    i64.const 1
    call 8
  )
  (func (;12;) (type 0) (param i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 16
      i64.const 1
      call 7
      i64.const 3
      call 0
      local.get 0
      i16x8.splat
      i16x8.extract_lane_s 7
    end
    i64.const 16
    i64.const 1
    call 8
  )
  (func (;13;) (type 0) (param i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 16
      i64.const 1
      call 7
      i64.const 3
      call 0
      local.get 0
      i32x4.splat
      i32x4.extract_lane 0
    end
    i64.const 16
    i64.const 1
    call 8
  )
  (func (;14;) (type 0) (param i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 16
      i64.const 1
      call 7
      i64.const 3
      call 0
      local.get 0
      i32x4.splat
      i32x4.extract_lane 3
    end
    i64.const 16
    i64.const 1
    call 8
  )
  (func (;15;) (type 1) (param f32) (result f32)
    block (result f32) ;; label = @1
      i64.const 16
      i64.const 1
      call 7
      i64.const 3
      call 0
      local.get 0
      f32x4.splat
      f32x4.extract_lane 0
    end
    i64.const 16
    i64.const 1
    call 8
  )
  (func (;16;) (type 1) (param f32) (result f32)
    block (result f32) ;; label = @1
      i64.const 16
      i64.const 1
      call 7
      i64.const 3
      call 0
      local.get 0
      f32x4.splat
      f32x4.extract_lane 3
    end
    i64.const 16
    i64.const 1
    call 8
  )
  (func (;17;) (type 2) (param i32 i32) (result v128)
    block (result v128) ;; label = @1
      i64.const 32
      i64.const 2
      call 7
      i64.const 5
      call 0
      local.get 0
      i8x16.splat
      local.get 1
      i8x16.splat
      i8x16.swizzle
    end
    i64.const 32
    i64.const 2
    call 8
  )
  (func (;18;) (type 3) (param i64) (result i64)
    block (result i64) ;; label = @1
      i64.const 16
      i64.const 1
      call 7
      i64.const 3
      call 0
      local.get 0
      i64x2.splat
      i64x2.extract_lane 0
    end
    i64.const 16
    i64.const 1
    call 8
  )
  (func (;19;) (type 3) (param i64) (result i64)
    block (result i64) ;; label = @1
      i64.const 16
      i64.const 1
      call 7
      i64.const 3
      call 0
      local.get 0
      i64x2.splat
      i64x2.extract_lane 1
    end
    i64.const 16
    i64.const 1
    call 8
  )
  (func (;20;) (type 4) (param f64) (result f64)
    block (result f64) ;; label = @1
      i64.const 16
      i64.const 1
      call 7
      i64.const 3
      call 0
      local.get 0
      f64x2.splat
      f64x2.extract_lane 0
    end
    i64.const 16
    i64.const 1
    call 8
  )
  (func (;21;) (type 4) (param f64) (result f64)
    block (result f64) ;; label = @1
      i64.const 16
      i64.const 1
      call 7
      i64.const 3
      call 0
      local.get 0
      f64x2.splat
      f64x2.extract_lane 1
    end
    i64.const 16
    i64.const 1
    call 8
  )
  (func (;22;) (type 5) (param i32 i32 i32) (result v128)
    block (result v128) ;; label = @1
      i64.const 48
      i64.const 3
      call 7
      i64.const 8
      call 0
      local.get 0
      i8x16.splat
      local.get 1
      i8x16.splat
      local.get 2
      i8x16.splat
      i8x16.sub
      i8x16.add
    end
    i64.const 48
    i64.const 3
    call 8
  )
  (func (;23;) (type 6) (param i32 i32 i32 i32) (result v128)
    block (result v128) ;; label = @1
      i64.const 64
      i64.const 4
      call 7
      i64.const 11
      call 0
      local.get 0
      i16x8.splat
      local.get 1
      i16x8.splat
      local.get 2
      i16x8.splat
      local.get 3
      i16x8.splat
      i16x8.mul
      i16x8.sub
      i16x8.add
    end
    i64.const 64
    i64.const 4
    call 8
  )
  (func (;24;) (type 6) (param i32 i32 i32 i32) (result v128)
    block (result v128) ;; label = @1
      i64.const 64
      i64.const 4
      call 7
      i64.const 11
      call 0
      local.get 0
      i32x4.splat
      local.get 1
      i32x4.splat
      local.get 2
      i32x4.splat
      local.get 3
      i32x4.splat
      i32x4.mul
      i32x4.sub
      i32x4.add
    end
    i64.const 64
    i64.const 4
    call 8
  )
  (func (;25;) (type 7) (param i64 i64 i64 i64) (result v128)
    block (result v128) ;; label = @1
      i64.const 64
      i64.const 4
      call 7
      i64.const 11
      call 0
      local.get 0
      i64x2.splat
      local.get 1
      i64x2.splat
      local.get 2
      i64x2.splat
      local.get 3
      i64x2.splat
      i64x2.mul
      i64x2.sub
      i64x2.add
    end
    i64.const 64
    i64.const 4
    call 8
  )
  (func (;26;) (type 8) (param f64 f64 f64 f64) (result v128)
    block (result v128) ;; label = @1
      i64.const 64
      i64.const 4
      call 7
      i64.const 11
      call 0
      local.get 0
      f64x2.splat
      local.get 1
      f64x2.splat
      local.get 2
      f64x2.splat
      local.get 3
      f64x2.splat
      f64x2.mul
      f64x2.sub
      f64x2.add
    end
    i64.const 64
    i64.const 4
    call 8
  )
  (func (;27;) (type 2) (param i32 i32) (result v128)
    block (result v128) ;; label = @1
      i64.const 32
      i64.const 2
      call 7
      i64.const 5
      call 0
      local.get 0
      i8x16.splat
      local.get 1
      i8x16.splat
      i8x16.add_sat_s
    end
    i64.const 32
    i64.const 2
    call 8
  )
  (func (;28;) (type 2) (param i32 i32) (result v128)
    block (result v128) ;; label = @1
      i64.const 32
      i64.const 2
      call 7
      i64.const 5
      call 0
      local.get 0
      i16x8.splat
      local.get 1
      i16x8.splat
      i16x8.add_sat_s
    end
    i64.const 32
    i64.const 2
    call 8
  )
  (func (;29;) (type 2) (param i32 i32) (result v128)
    block (result v128) ;; label = @1
      i64.const 32
      i64.const 2
      call 7
      i64.const 5
      call 0
      local.get 0
      i8x16.splat
      local.get 1
      i8x16.splat
      i8x16.sub_sat_u
    end
    i64.const 32
    i64.const 2
    call 8
  )
  (func (;30;) (type 2) (param i32 i32) (result v128)
    block (result v128) ;; label = @1
      i64.const 32
      i64.const 2
      call 7
      i64.const 5
      call 0
      local.get 0
      i16x8.splat
      local.get 1
      i16x8.splat
      i16x8.sub_sat_u
    end
    i64.const 32
    i64.const 2
    call 8
  )
  (func (;31;) (type 2) (param i32 i32) (result v128)
    block (result v128) ;; label = @1
      i64.const 20
      i64.const 2
      call 7
      i64.const 4
      call 0
      local.get 0
      i8x16.splat
      local.get 1
      i8x16.shr_s
    end
    i64.const 20
    i64.const 2
    call 8
  )
  (func (;32;) (type 2) (param i32 i32) (result v128)
    block (result v128) ;; label = @1
      i64.const 20
      i64.const 2
      call 7
      i64.const 4
      call 0
      local.get 0
      i16x8.splat
      local.get 1
      i16x8.shr_s
    end
    i64.const 20
    i64.const 2
    call 8
  )
  (func (;33;) (type 2) (param i32 i32) (result v128)
    block (result v128) ;; label = @1
      i64.const 20
      i64.const 2
      call 7
      i64.const 4
      call 0
      local.get 0
      i32x4.splat
      local.get 1
      i32x4.shr_s
    end
    i64.const 20
    i64.const 2
    call 8
  )
  (func (;34;) (type 2) (param i32 i32) (result v128)
    block (result v128) ;; label = @1
      i64.const 32
      i64.const 2
      call 7
      i64.const 5
      call 0
      local.get 0
      i8x16.splat
      local.get 1
      i8x16.splat
      v128.and
    end
    i64.const 32
    i64.const 2
    call 8
  )
  (func (;35;) (type 2) (param i32 i32) (result v128)
    block (result v128) ;; label = @1
      i64.const 32
      i64.const 2
      call 7
      i64.const 5
      call 0
      local.get 0
      i16x8.splat
      local.get 1
      i16x8.splat
      v128.or
    end
    i64.const 32
    i64.const 2
    call 8
  )
  (func (;36;) (type 2) (param i32 i32) (result v128)
    block (result v128) ;; label = @1
      i64.const 32
      i64.const 2
      call 7
      i64.const 5
      call 0
      local.get 0
      i32x4.splat
      local.get 1
      i32x4.splat
      v128.xor
    end
    i64.const 32
    i64.const 2
    call 8
  )
  (func (;37;) (type 0) (param i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 16
      i64.const 1
      call 7
      i64.const 3
      call 0
      local.get 0
      i8x16.splat
      i8x16.all_true
    end
    i64.const 16
    i64.const 1
    call 8
  )
  (func (;38;) (type 0) (param i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 16
      i64.const 1
      call 7
      i64.const 3
      call 0
      local.get 0
      i16x8.splat
      i16x8.all_true
    end
    i64.const 16
    i64.const 1
    call 8
  )
  (func (;39;) (type 0) (param i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 16
      i64.const 1
      call 7
      i64.const 3
      call 0
      local.get 0
      i32x4.splat
      i32x4.all_true
    end
    i64.const 16
    i64.const 1
    call 8
  )
  (func (;40;) (type 9) (param i64) (result i32)
    block (result i32) ;; label = @1
      i64.const 16
      i64.const 1
      call 7
      i64.const 3
      call 0
      local.get 0
      i64x2.splat
      i32x4.all_true
    end
    i64.const 16
    i64.const 1
    call 8
  )
  (func (;41;) (type 2) (param i32 i32) (result v128)
    block (result v128) ;; label = @1
      i64.const 32
      i64.const 2
      call 7
      i64.const 5
      call 0
      local.get 0
      i8x16.splat
      local.get 1
      i8x16.splat
      i8x16.eq
    end
    i64.const 32
    i64.const 2
    call 8
  )
  (func (;42;) (type 2) (param i32 i32) (result v128)
    block (result v128) ;; label = @1
      i64.const 32
      i64.const 2
      call 7
      i64.const 5
      call 0
      local.get 0
      i16x8.splat
      local.get 1
      i16x8.splat
      i16x8.eq
    end
    i64.const 32
    i64.const 2
    call 8
  )
  (func (;43;) (type 2) (param i32 i32) (result v128)
    block (result v128) ;; label = @1
      i64.const 32
      i64.const 2
      call 7
      i64.const 5
      call 0
      local.get 0
      i32x4.splat
      local.get 1
      i32x4.splat
      i32x4.eq
    end
    i64.const 32
    i64.const 2
    call 8
  )
  (func (;44;) (type 10) (param i64 i64) (result v128)
    block (result v128) ;; label = @1
      i64.const 32
      i64.const 2
      call 7
      i64.const 5
      call 0
      local.get 0
      i64x2.splat
      local.get 1
      i64x2.splat
      i32x4.eq
    end
    i64.const 32
    i64.const 2
    call 8
  )
  (func (;45;) (type 11) (param f32 f32) (result v128)
    block (result v128) ;; label = @1
      i64.const 32
      i64.const 2
      call 7
      i64.const 5
      call 0
      local.get 0
      f32x4.splat
      local.get 1
      f32x4.splat
      f32x4.eq
    end
    i64.const 32
    i64.const 2
    call 8
  )
  (func (;46;) (type 12) (param f64 f64) (result v128)
    block (result v128) ;; label = @1
      i64.const 32
      i64.const 2
      call 7
      i64.const 5
      call 0
      local.get 0
      f64x2.splat
      local.get 1
      f64x2.splat
      f64x2.eq
    end
    i64.const 32
    i64.const 2
    call 8
  )
  (func (;47;) (type 13) (param f32) (result v128)
    block (result v128) ;; label = @1
      i64.const 16
      i64.const 1
      call 7
      i64.const 3
      call 0
      local.get 0
      f32x4.splat
      f32x4.abs
    end
    i64.const 16
    i64.const 1
    call 8
  )
  (func (;48;) (type 11) (param f32 f32) (result v128)
    block (result v128) ;; label = @1
      i64.const 32
      i64.const 2
      call 7
      i64.const 5
      call 0
      local.get 0
      f32x4.splat
      local.get 1
      f32x4.splat
      f32x4.min
    end
    i64.const 32
    i64.const 2
    call 8
  )
  (func (;49;) (type 11) (param f32 f32) (result v128)
    block (result v128) ;; label = @1
      i64.const 32
      i64.const 2
      call 7
      i64.const 5
      call 0
      local.get 0
      f32x4.splat
      local.get 1
      f32x4.splat
      f32x4.div
    end
    i64.const 32
    i64.const 2
    call 8
  )
  (func (;50;) (type 14) (param i32) (result v128)
    block (result v128) ;; label = @1
      i64.const 16
      i64.const 1
      call 7
      i64.const 3
      call 0
      local.get 0
      i32x4.splat
      f32x4.convert_i32x4_s
    end
    i64.const 16
    i64.const 1
    call 8
  )
  (func (;51;) (type 13) (param f32) (result v128)
    block (result v128) ;; label = @1
      i64.const 16
      i64.const 1
      call 7
      i64.const 3
      call 0
      local.get 0
      f32x4.splat
      i32x4.trunc_sat_f32x4_s
    end
    i64.const 16
    i64.const 1
    call 8
  )
)

(assert_return (invoke "as-i8x16_extract_lane_s-operand-first" (i32.const 42)) (i32.const 42))
(assert_return (invoke "as-i8x16_extract_lane_s-operand-last" (i32.const -42)) (i32.const -42))
(assert_return (invoke "as-i16x8_extract_lane_s-operand-first" (i32.const 0xffff7fff)) (i32.const 32767))
(assert_return (invoke "as-i16x8_extract_lane_s-operand-last" (i32.const 0x8000)) (i32.const -32768))
(assert_return (invoke "as-i32x4_extract_lane_s-operand-first" (i32.const 0x7fffffff)) (i32.const 2147483647))
(assert_return (invoke "as-i32x4_extract_lane_s-operand-last" (i32.const 0x80000000)) (i32.const -2147483648))
(assert_return (invoke "as-f32x4_extract_lane_s-operand-first" (f32.const 1.5)) (f32.const 1.5))
(assert_return (invoke "as-f32x4_extract_lane_s-operand-last" (f32.const -0.25)) (f32.const -0.25))
(assert_return (invoke "as-v8x16_swizzle-operands" (i32.const 1) (i32.const -1)) (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
(assert_return (invoke "as-i64x2_extract_lane-operand-last" (i64.const -42)) (i64.const -42))
(assert_return (invoke "as-i64x2_extract_lane-operand-first" (i64.const 42)) (i64.const 42))
(assert_return (invoke "as-f64x2_extract_lane-operand-first" (f64.const 1.5)) (f64.const 1.5))
(assert_return (invoke "as-f64x2_extract_lane-operand-last" (f64.const -0x1p+0)) (f64.const -0x1p+0))

(assert_return (invoke "as-i8x16_add_sub-operands" (i32.const 3) (i32.const 2) (i32.const 1)) (v128.const i8x16 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4))
(assert_return (invoke "as-i16x8_add_sub_mul-operands" (i32.const 257) (i32.const 128) (i32.const 16) (i32.const 16)) (v128.const i16x8 129 129 129 129 129 129 129 129))
(assert_return (invoke "as-i32x4_add_sub_mul-operands" (i32.const 65535) (i32.const 65537) (i32.const 256) (i32.const 256)) (v128.const i32x4 0x10000 0x10000 0x10000 0x10000))
(assert_return (invoke "as-i64x2_add_sub_mul-operands" (i64.const 0x7fffffff) (i64.const 0x1_0000_0001) (i64.const 65536) (i64.const 65536)) (v128.const i64x2 0x8000_0000 0x8000_0000))
(assert_return (invoke "as-f64x2_add_sub_mul-operands" (f64.const 0x1p-1) (f64.const 0.75) (f64.const 0x1p-1) (f64.const 0.5)) (v128.const f64x2 0x1p+0 0x1p+0))

(assert_return (invoke "as-i8x16_add_sat_s-operands" (i32.const 0x7f) (i32.const 1)) (v128.const i8x16 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f))
(assert_return (invoke "as-i16x8_add_sat_s-operands" (i32.const 0x7fff) (i32.const 1)) (v128.const i16x8 0x7fff 0x7fff 0x7fff 0x7fff 0x7fff 0x7fff 0x7fff 0x7fff))
(assert_return (invoke "as-i8x16_sub_sat_u-operands" (i32.const 0x7f) (i32.const 0xff)) (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
(assert_return (invoke "as-i16x8_sub_sat_u-operands" (i32.const 0x7fff) (i32.const 0xffff)) (v128.const i16x8 0 0 0 0 0 0 0 0))

(assert_return (invoke "as-i8x16_shr_s-operand" (i32.const 0xf0) (i32.const 3)) (v128.const i8x16 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2))
(assert_return (invoke "as-i16x8_shr_s-operand" (i32.const 0x100) (i32.const 4)) (v128.const i16x8 16 16 16 16 16 16 16 16))
(assert_return (invoke "as-i32x4_shr_s-operand" (i32.const -1) (i32.const 16)) (v128.const i32x4 -1 -1 -1 -1))

(assert_return (invoke "as-v128_and-operands" (i32.const 0x11) (i32.const 0xff)) (v128.const i8x16 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17))
(assert_return (invoke "as-v128_or-operands" (i32.const 0) (i32.const 0xffff)) (v128.const i16x8 0xffff 0xffff 0xffff 0xffff 0xffff 0xffff 0xffff 0xffff))
(assert_return (invoke "as-v128_xor-operands" (i32.const 0xf0f0f0f0) (i32.const 0xffffffff)) (v128.const i32x4 0xf0f0f0f 0xf0f0f0f 0xf0f0f0f 0xf0f0f0f))

(assert_return (invoke "as-i8x16_all_true-operand" (i32.const 0)) (i32.const 0))
(assert_return (invoke "as-i16x8_all_true-operand" (i32.const 0xffff)) (i32.const 1))
(assert_return (invoke "as-i32x4_all_true-operand1" (i32.const 0xf0f0f0f0)) (i32.const 1))
(assert_return (invoke "as-i32x4_all_true-operand2" (i64.const -1)) (i32.const 1))

(assert_return (invoke "as-i8x16_eq-operands" (i32.const 1) (i32.const 2)) (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
(assert_return (invoke "as-i16x8_eq-operands" (i32.const -1) (i32.const 65535)) (v128.const i16x8 0xffff 0xffff 0xffff 0xffff 0xffff 0xffff 0xffff 0xffff))
(assert_return (invoke "as-i32x4_eq-operands1" (i32.const -1) (i32.const 0xffffffff)) (v128.const i32x4 0xffffffff 0xffffffff 0xffffffff 0xffffffff))
(assert_return (invoke "as-f32x4_eq-operands" (f32.const +0.0) (f32.const -0.0)) (v128.const i32x4 0xffffffff 0xffffffff 0xffffffff 0xffffffff))
(assert_return (invoke "as-i32x4_eq-operands2" (i64.const 1) (i64.const 2)) (v128.const i64x2 0xffffffff00000000 0xffffffff00000000))
(assert_return (invoke "as-f64x2_eq-operands" (f64.const +0.0) (f64.const -0.0)) (v128.const i64x2 -1 -1))

(assert_return (invoke "as-f32x4_abs-operand" (f32.const -1.125)) (v128.const f32x4 1.125 1.125 1.125 1.125))
(assert_return (invoke "as-f32x4_min-operands" (f32.const 0.25) (f32.const 1e-38)) (v128.const f32x4 1e-38 1e-38 1e-38 1e-38))
(assert_return (invoke "as-f32x4_div-operands" (f32.const 1.0) (f32.const 8.0)) (v128.const f32x4 0.125 0.125 0.125 0.125))

(assert_return (invoke "as-f32x4_convert_s_i32x4-operand" (i32.const 12345)) (v128.const f32x4 12345.0 12345.0 12345.0 12345.0))
(assert_return (invoke "as-i32x4_trunc_s_f32x4_sat-operand" (f32.const 1.1)) (v128.const i32x4 1 1 1 1))


;; As the argument of control constructs and WASM instructions

(module
  (type (;0;) (func (param i32) (result v128)))
  (type (;1;) (func (param f32) (result v128)))
  (type (;2;) (func (param i64) (result v128)))
  (type (;3;) (func (param f64) (result v128)))
  (type (;4;) (func (param i64)))
  (type (;5;) (func (param i64 i64)))
  (type (;6;) (func (param i32 i64 i64) (result i32)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 4)))
  (import "spectest" "finite_wasm_memory_copy" (func (;1;) (type 6)))
  (import "spectest" "finite_wasm_memory_fill" (func (;2;) (type 6)))
  (import "spectest" "finite_wasm_memory_init" (func (;3;) (type 6)))
  (import "spectest" "finite_wasm_table_copy" (func (;4;) (type 6)))
  (import "spectest" "finite_wasm_table_fill" (func (;5;) (type 6)))
  (import "spectest" "finite_wasm_table_init" (func (;6;) (type 6)))
  (import "spectest" "finite_wasm_stack" (func (;7;) (type 5)))
  (import "spectest" "finite_wasm_unstack" (func (;8;) (type 5)))
  (global $g (;0;) (mut v128) v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)
  (export "as-br-value1" (func 9))
  (export "as-return-value1" (func 10))
  (export "as-local_set-value1" (func 11))
  (export "as-global_set-value1" (func 12))
  (export "as-br-value2" (func 13))
  (export "as-return-value2" (func 14))
  (export "as-local_set-value2" (func 15))
  (export "as-global_set-value2" (func 16))
  (func (;9;) (type 0) (param i32) (result v128)
    block (result v128) ;; label = @1
      i64.const 16
      i64.const 1
      call 7
      i64.const 4
      call 0
      block (result v128) ;; label = @2
        local.get 0
        i8x16.splat
        br 0 (;@2;)
      end
    end
    i64.const 16
    i64.const 1
    call 8
  )
  (func (;10;) (type 0) (param i32) (result v128)
    block (result v128) ;; label = @1
      i64.const 16
      i64.const 1
      call 7
      i64.const 3
      call 0
      local.get 0
      i16x8.splat
      i64.const 16
      i64.const 1
      call 8
      return
    end
    i64.const 16
    i64.const 1
    call 8
  )
  (func (;11;) (type 0) (param i32) (result v128)
    (local v128)
    block (result v128) ;; label = @1
      i64.const 16
      i64.const 2
      call 7
      i64.const 5
      call 0
      local.get 0
      i32x4.splat
      local.set 1
      local.get 1
      i64.const 16
      i64.const 2
      call 8
      return
    end
    i64.const 16
    i64.const 2
    call 8
  )
  (func (;12;) (type 1) (param f32) (result v128)
    block (result v128) ;; label = @1
      i64.const 16
      i64.const 1
      call 7
      i64.const 5
      call 0
      local.get 0
      f32x4.splat
      global.set $g
      global.get $g
      i64.const 16
      i64.const 1
      call 8
      return
    end
    i64.const 16
    i64.const 1
    call 8
  )
  (func (;13;) (type 2) (param i64) (result v128)
    block (result v128) ;; label = @1
      i64.const 16
      i64.const 1
      call 7
      i64.const 4
      call 0
      block (result v128) ;; label = @2
        local.get 0
        i64x2.splat
        br 0 (;@2;)
      end
    end
    i64.const 16
    i64.const 1
    call 8
  )
  (func (;14;) (type 2) (param i64) (result v128)
    block (result v128) ;; label = @1
      i64.const 16
      i64.const 1
      call 7
      i64.const 3
      call 0
      local.get 0
      i64x2.splat
      i64.const 16
      i64.const 1
      call 8
      return
    end
    i64.const 16
    i64.const 1
    call 8
  )
  (func (;15;) (type 2) (param i64) (result v128)
    (local v128)
    block (result v128) ;; label = @1
      i64.const 16
      i64.const 2
      call 7
      i64.const 5
      call 0
      local.get 0
      i64x2.splat
      local.set 1
      local.get 1
      i64.const 16
      i64.const 2
      call 8
      return
    end
    i64.const 16
    i64.const 2
    call 8
  )
  (func (;16;) (type 3) (param f64) (result v128)
    block (result v128) ;; label = @1
      i64.const 16
      i64.const 1
      call 7
      i64.const 5
      call 0
      local.get 0
      f64x2.splat
      global.set $g
      global.get $g
      i64.const 16
      i64.const 1
      call 8
      return
    end
    i64.const 16
    i64.const 1
    call 8
  )
)

(assert_return (invoke "as-br-value1" (i32.const 0xAB)) (v128.const i8x16 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB 0xAB))
(assert_return (invoke "as-return-value1" (i32.const 0xABCD)) (v128.const i16x8 0xABCD 0xABCD 0xABCD 0xABCD 0xABCD 0xABCD 0xABCD 0xABCD))
(assert_return (invoke "as-local_set-value1" (i32.const 0x10000)) (v128.const i32x4 0x10000 0x10000 0x10000 0x10000))
(assert_return (invoke "as-global_set-value1" (f32.const 1.0)) (v128.const f32x4 1.0 1.0 1.0 1.0))
(assert_return (invoke "as-br-value2" (i64.const 0xABCD)) (v128.const i64x2 0xABCD 0xABCD))
(assert_return (invoke "as-return-value2" (i64.const 0xABCD)) (v128.const i64x2 0xABCD 0xABCD))
(assert_return (invoke "as-local_set-value2" (i64.const 0x10000)) (v128.const i64x2 0x10000 0x10000))
(assert_return (invoke "as-global_set-value2" (f64.const 1.0)) (v128.const f64x2 1.0 1.0))


;; Test operation with empty argument

