(module
  (type (;0;) (func (param v128 v128) (result v128)))
  (type (;1;) (func (param v128) (result v128)))
  (type (;2;) (func (result v128)))
  (type (;3;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 3)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 3)))
  (func (;2;) (type 0) (param v128 v128) (result v128)
    i64.const 1000001000032
    call 1
    i64.const 4
    call 0
    local.get 0
    local.get 1
    i16x8.min_s
  )
  (func (;3;) (type 0) (param v128 v128) (result v128)
    i64.const 1000001000032
    call 1
    i64.const 4
    call 0
    local.get 0
    local.get 1
    i16x8.min_u
  )
  (func (;4;) (type 0) (param v128 v128) (result v128)
    i64.const 1000001000032
    call 1
    i64.const 4
    call 0
    local.get 0
    local.get 1
    i16x8.max_s
  )
  (func (;5;) (type 0) (param v128 v128) (result v128)
    i64.const 1000001000032
    call 1
    i64.const 4
    call 0
    local.get 0
    local.get 1
    i16x8.max_u
  )
  (func (;6;) (type 0) (param v128 v128) (result v128)
    i64.const 1000001000032
    call 1
    i64.const 4
    call 0
    local.get 0
    local.get 1
    i16x8.avgr_u
  )
  (func (;7;) (type 1) (param v128) (result v128)
    i64.const 1000000000016
    call 1
    i64.const 3
    call 0
    local.get 0
    i16x8.abs
  )
  (func (;8;) (type 2) (result v128)
    i64.const 1000000000032
    call 1
    i64.const 4
    call 0
    v128.const i32x4 0x80008000 0x7fff7fff 0x40004000 0xffffffff
    v128.const i32x4 0xffffffff 0x40004000 0x7fff7fff 0x80008000
    i16x8.min_s
  )
  (func (;9;) (type 2) (result v128)
    i64.const 1000000000032
    call 1
    i64.const 4
    call 0
    v128.const i32x4 0x00000000 0x00010001 0x00020002 0x00030003
    v128.const i32x4 0x00030003 0x00020002 0x00010001 0x00000000
    i16x8.min_s
  )
  (func (;10;) (type 2) (result v128)
    i64.const 1000000000032
    call 1
    i64.const 4
    call 0
    v128.const i32x4 0x80008000 0x7fff7fff 0x40004000 0xffffffff
    v128.const i32x4 0xffffffff 0x40004000 0x7fff7fff 0x80008000
    i16x8.min_u
  )
  (func (;11;) (type 2) (result v128)
    i64.const 1000000000032
    call 1
    i64.const 4
    call 0
    v128.const i32x4 0x00000000 0x00010001 0x00020002 0x00030003
    v128.const i32x4 0x00030003 0x00020002 0x00010001 0x00000000
    i16x8.min_u
  )
  (func (;12;) (type 2) (result v128)
    i64.const 1000000000032
    call 1
    i64.const 4
    call 0
    v128.const i32x4 0x80008000 0x7fff7fff 0x40004000 0xffffffff
    v128.const i32x4 0xffffffff 0x40004000 0x7fff7fff 0x80008000
    i16x8.max_s
  )
  (func (;13;) (type 2) (result v128)
    i64.const 1000000000032
    call 1
    i64.const 4
    call 0
    v128.const i32x4 0x00000000 0x00010001 0x00020002 0x00030003
    v128.const i32x4 0x00030003 0x00020002 0x00010001 0x00000000
    i16x8.max_s
  )
  (func (;14;) (type 2) (result v128)
    i64.const 1000000000032
    call 1
    i64.const 4
    call 0
    v128.const i32x4 0x80008000 0x7fff7fff 0x40004000 0xffffffff
    v128.const i32x4 0xffffffff 0x40004000 0x7fff7fff 0x80008000
    i16x8.max_u
  )
  (func (;15;) (type 2) (result v128)
    i64.const 1000000000032
    call 1
    i64.const 4
    call 0
    v128.const i32x4 0x00000000 0x00010001 0x00020002 0x00030003
    v128.const i32x4 0x00030003 0x00020002 0x00010001 0x00000000
    i16x8.max_u
  )
  (func (;16;) (type 2) (result v128)
    i64.const 1000000000032
    call 1
    i64.const 4
    call 0
    v128.const i32x4 0x80008000 0x7fff7fff 0x40004000 0xffffffff
    v128.const i32x4 0xffffffff 0x40004000 0x7fff7fff 0x80008000
    i16x8.avgr_u
  )
  (func (;17;) (type 2) (result v128)
    i64.const 1000000000032
    call 1
    i64.const 4
    call 0
    v128.const i32x4 0x00000000 0x00010001 0x00020002 0x00030003
    v128.const i32x4 0x00030003 0x00020002 0x00010001 0x00000000
    i16x8.avgr_u
  )
  (func (;18;) (type 2) (result v128)
    i64.const 1000000000016
    call 1
    i64.const 3
    call 0
    v128.const i32x4 0x80008000 0x7fff7fff 0x40004000 0xffffffff
    i16x8.abs
  )
  (func (;19;) (type 1) (param v128) (result v128)
    i64.const 1000000000032
    call 1
    i64.const 4
    call 0
    local.get 0
    v128.const i32x4 0x80008000 0x7fff7fff 0x40004000 0xffffffff
    i16x8.min_s
  )
  (func (;20;) (type 1) (param v128) (result v128)
    i64.const 1000000000032
    call 1
    i64.const 4
    call 0
    local.get 0
    v128.const i32x4 0x00000000 0x00010001 0x00020002 0x00030003
    i16x8.min_s
  )
  (func (;21;) (type 1) (param v128) (result v128)
    i64.const 1000000000032
    call 1
    i64.const 4
    call 0
    local.get 0
    v128.const i32x4 0x80008000 0x7fff7fff 0x40004000 0xffffffff
    i16x8.min_u
  )
  (func (;22;) (type 1) (param v128) (result v128)
    i64.const 1000000000032
    call 1
    i64.const 4
    call 0
    local.get 0
    v128.const i32x4 0x00000000 0x00010001 0x00020002 0x00030003
    i16x8.min_u
  )
  (func (;23;) (type 1) (param v128) (result v128)
    i64.const 1000000000032
    call 1
    i64.const 4
    call 0
    local.get 0
    v128.const i32x4 0x80008000 0x7fff7fff 0x40004000 0xffffffff
    i16x8.max_s
  )
  (func (;24;) (type 1) (param v128) (result v128)
    i64.const 1000000000032
    call 1
    i64.const 4
    call 0
    local.get 0
    v128.const i32x4 0x00000000 0x00010001 0x00020002 0x00030003
    i16x8.max_s
  )
  (func (;25;) (type 1) (param v128) (result v128)
    i64.const 1000000000032
    call 1
    i64.const 4
    call 0
    local.get 0
    v128.const i32x4 0x80008000 0x7fff7fff 0x40004000 0xffffffff
    i16x8.max_u
  )
  (func (;26;) (type 1) (param v128) (result v128)
    i64.const 1000000000032
    call 1
    i64.const 4
    call 0
    local.get 0
    v128.const i32x4 0x00000000 0x00010001 0x00020002 0x00030003
    i16x8.max_u
  )
  (func (;27;) (type 1) (param v128) (result v128)
    i64.const 1000000000032
    call 1
    i64.const 4
    call 0
    local.get 0
    v128.const i32x4 0x80008000 0x7fff7fff 0x40004000 0xffffffff
    i16x8.avgr_u
  )
  (func (;28;) (type 1) (param v128) (result v128)
    i64.const 1000000000032
    call 1
    i64.const 4
    call 0
    local.get 0
    v128.const i32x4 0x00000000 0x00010001 0x00020002 0x00030003
    i16x8.avgr_u
  )
  (export "i16x8.min_s" (func 2))
  (export "i16x8.min_u" (func 3))
  (export "i16x8.max_s" (func 4))
  (export "i16x8.max_u" (func 5))
  (export "i16x8.avgr_u" (func 6))
  (export "i16x8.abs" (func 7))
  (export "i16x8.min_s_with_const_0" (func 8))
  (export "i16x8.min_s_with_const_1" (func 9))
  (export "i16x8.min_u_with_const_2" (func 10))
  (export "i16x8.min_u_with_const_3" (func 11))
  (export "i16x8.max_s_with_const_4" (func 12))
  (export "i16x8.max_s_with_const_5" (func 13))
  (export "i16x8.max_u_with_const_6" (func 14))
  (export "i16x8.max_u_with_const_7" (func 15))
  (export "i16x8.avgr_u_with_const_8" (func 16))
  (export "i16x8.avgr_u_with_const_9" (func 17))
  (export "i16x8.abs_with_const_10" (func 18))
  (export "i16x8.min_s_with_const_11" (func 19))
  (export "i16x8.min_s_with_const_12" (func 20))
  (export "i16x8.min_u_with_const_13" (func 21))
  (export "i16x8.min_u_with_const_14" (func 22))
  (export "i16x8.max_s_with_const_15" (func 23))
  (export "i16x8.max_s_with_const_16" (func 24))
  (export "i16x8.max_u_with_const_17" (func 25))
  (export "i16x8.max_u_with_const_18" (func 26))
  (export "i16x8.avgr_u_with_const_19" (func 27))
  (export "i16x8.avgr_u_with_const_20" (func 28))
)
(assert_return (invoke "i16x8.min_s" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                     (v128.const i16x8 0 0 0 0 0 0 0 0))
                                     (v128.const i16x8 0 0 0 0 0 0 0 0))
(assert_return (invoke "i16x8.min_s" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                     (v128.const i16x8 -1 -1 -1 -1 -1 -1 -1 -1))
                                     (v128.const i16x8 -1 -1 -1 -1 -1 -1 -1 -1))
(assert_return (invoke "i16x8.min_s" (v128.const i16x8 0 0 0 0 -1 -1 -1 -1)
                                     (v128.const i16x8 0 0 -1 -1 0 0 -1 -1))
                                     (v128.const i16x8 0 0 -1 -1 -1 -1 -1 -1))
(assert_return (invoke "i16x8.min_s" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                     (v128.const i16x8 0xffff 0xffff 0xffff 0xffff 0xffff 0xffff 0xffff 0xffff))
                                     (v128.const i16x8 0xffff 0xffff 0xffff 0xffff 0xffff 0xffff 0xffff 0xffff))
(assert_return (invoke "i16x8.min_s" (v128.const i16x8 1 1 1 1 1 1 1 1)
                                     (v128.const i16x8 1 1 1 1 1 1 1 1))
                                     (v128.const i16x8 1 1 1 1 1 1 1 1))
(assert_return (invoke "i16x8.min_s" (v128.const i16x8 65535 65535 65535 65535 65535 65535 65535 65535)
                                     (v128.const i16x8 1 1 1 1 1 1 1 1))
                                     (v128.const i16x8 65535 65535 65535 65535 65535 65535 65535 65535))
(assert_return (invoke "i16x8.min_s" (v128.const i16x8 65535 65535 65535 65535 65535 65535 65535 65535)
                                     (v128.const i16x8 128 128 128 128 128 128 128 128))
                                     (v128.const i16x8 65535 65535 65535 65535 65535 65535 65535 65535))
(assert_return (invoke "i16x8.min_s" (v128.const i16x8 32768 32768 32768 32768 32768 32768 32768 32768)
                                     (v128.const i16x8 -32768 -32768 -32768 -32768 -32768 -32768 -32768 -32768))
                                     (v128.const i16x8 32768 32768 32768 32768 32768 32768 32768 32768))
(assert_return (invoke "i16x8.min_s" (v128.const i16x8 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000)
                                     (v128.const i16x8 -32768 -32768 -32768 -32768 -32768 -32768 -32768 -32768))
                                     (v128.const i16x8 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000))
(assert_return (invoke "i16x8.min_s" (v128.const i16x8 123 123 123 123 123 123 123 123)
                                     (v128.const i16x8 01_2_3 01_2_3 01_2_3 01_2_3 01_2_3 01_2_3 01_2_3 01_2_3))
                                     (v128.const i16x8 123 123 123 123 123 123 123 123))
(assert_return (invoke "i16x8.min_s" (v128.const i16x8 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80)
                                     (v128.const i16x8 0x0_8_0 0x0_8_0 0x0_8_0 0x0_8_0 0x0_8_0 0x0_8_0 0x0_8_0 0x0_8_0))
                                     (v128.const i16x8 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80))
(assert_return (invoke "i16x8.min_u" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                     (v128.const i16x8 0 0 0 0 0 0 0 0))
                                     (v128.const i16x8 0 0 0 0 0 0 0 0))
(assert_return (invoke "i16x8.min_u" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                     (v128.const i16x8 -1 -1 -1 -1 -1 -1 -1 -1))
                                     (v128.const i16x8 0 0 0 0 0 0 0 0))
(assert_return (invoke "i16x8.min_u" (v128.const i16x8 0 0 0 0 -1 -1 -1 -1)
                                     (v128.const i16x8 0 0 -1 -1 0 0 -1 -1))
                                     (v128.const i16x8 0 0 0 0 0 0 -1 -1))
(assert_return (invoke "i16x8.min_u" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                     (v128.const i16x8 0xffff 0xffff 0xffff 0xffff 0xffff 0xffff 0xffff 0xffff))
                                     (v128.const i16x8 0 0 0 0 0 0 0 0))
(assert_return (invoke "i16x8.min_u" (v128.const i16x8 1 1 1 1 1 1 1 1)
                                     (v128.const i16x8 1 1 1 1 1 1 1 1))
                                     (v128.const i16x8 1 1 1 1 1 1 1 1))
(assert_return (invoke "i16x8.min_u" (v128.const i16x8 65535 65535 65535 65535 65535 65535 65535 65535)
                                     (v128.const i16x8 1 1 1 1 1 1 1 1))
                                     (v128.const i16x8 1 1 1 1 1 1 1 1))
(assert_return (invoke "i16x8.min_u" (v128.const i16x8 65535 65535 65535 65535 65535 65535 65535 65535)
                                     (v128.const i16x8 128 128 128 128 128 128 128 128))
                                     (v128.const i16x8 128 128 128 128 128 128 128 128))
(assert_return (invoke "i16x8.min_u" (v128.const i16x8 32768 32768 32768 32768 32768 32768 32768 32768)
                                     (v128.const i16x8 -32768 -32768 -32768 -32768 -32768 -32768 -32768 -32768))
                                     (v128.const i16x8 32768 32768 32768 32768 32768 32768 32768 32768))
(assert_return (invoke "i16x8.min_u" (v128.const i16x8 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000)
                                     (v128.const i16x8 -32768 -32768 -32768 -32768 -32768 -32768 -32768 -32768))
                                     (v128.const i16x8 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000))
(assert_return (invoke "i16x8.min_u" (v128.const i16x8 123 123 123 123 123 123 123 123)
                                     (v128.const i16x8 01_2_3 01_2_3 01_2_3 01_2_3 01_2_3 01_2_3 01_2_3 01_2_3))
                                     (v128.const i16x8 123 123 123 123 123 123 123 123))
(assert_return (invoke "i16x8.min_u" (v128.const i16x8 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80)
                                     (v128.const i16x8 0x0_8_0 0x0_8_0 0x0_8_0 0x0_8_0 0x0_8_0 0x0_8_0 0x0_8_0 0x0_8_0))
                                     (v128.const i16x8 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80))
(assert_return (invoke "i16x8.max_s" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                     (v128.const i16x8 0 0 0 0 0 0 0 0))
                                     (v128.const i16x8 0 0 0 0 0 0 0 0))
(assert_return (invoke "i16x8.max_s" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                     (v128.const i16x8 -1 -1 -1 -1 -1 -1 -1 -1))
                                     (v128.const i16x8 0 0 0 0 0 0 0 0))
(assert_return (invoke "i16x8.max_s" (v128.const i16x8 0 0 0 0 -1 -1 -1 -1)
                                     (v128.const i16x8 0 0 -1 -1 0 0 -1 -1))
                                     (v128.const i16x8 0 0 0 0 0 0 -1 -1))
(assert_return (invoke "i16x8.max_s" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                     (v128.const i16x8 0xffff 0xffff 0xffff 0xffff 0xffff 0xffff 0xffff 0xffff))
                                     (v128.const i16x8 0 0 0 0 0 0 0 0))
(assert_return (invoke "i16x8.max_s" (v128.const i16x8 1 1 1 1 1 1 1 1)
                                     (v128.const i16x8 1 1 1 1 1 1 1 1))
                                     (v128.const i16x8 1 1 1 1 1 1 1 1))
(assert_return (invoke "i16x8.max_s" (v128.const i16x8 65535 65535 65535 65535 65535 65535 65535 65535)
                                     (v128.const i16x8 1 1 1 1 1 1 1 1))
                                     (v128.const i16x8 1 1 1 1 1 1 1 1))
(assert_return (invoke "i16x8.max_s" (v128.const i16x8 65535 65535 65535 65535 65535 65535 65535 65535)
                                     (v128.const i16x8 128 128 128 128 128 128 128 128))
                                     (v128.const i16x8 128 128 128 128 128 128 128 128))
(assert_return (invoke "i16x8.max_s" (v128.const i16x8 32768 32768 32768 32768 32768 32768 32768 32768)
                                     (v128.const i16x8 -32768 -32768 -32768 -32768 -32768 -32768 -32768 -32768))
                                     (v128.const i16x8 32768 32768 32768 32768 32768 32768 32768 32768))
(assert_return (invoke "i16x8.max_s" (v128.const i16x8 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000)
                                     (v128.const i16x8 -32768 -32768 -32768 -32768 -32768 -32768 -32768 -32768))
                                     (v128.const i16x8 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000))
(assert_return (invoke "i16x8.max_s" (v128.const i16x8 123 123 123 123 123 123 123 123)
                                     (v128.const i16x8 01_2_3 01_2_3 01_2_3 01_2_3 01_2_3 01_2_3 01_2_3 01_2_3))
                                     (v128.const i16x8 123 123 123 123 123 123 123 123))
(assert_return (invoke "i16x8.max_s" (v128.const i16x8 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80)
                                     (v128.const i16x8 0x0_8_0 0x0_8_0 0x0_8_0 0x0_8_0 0x0_8_0 0x0_8_0 0x0_8_0 0x0_8_0))
                                     (v128.const i16x8 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80))
(assert_return (invoke "i16x8.max_u" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                     (v128.const i16x8 0 0 0 0 0 0 0 0))
                                     (v128.const i16x8 0 0 0 0 0 0 0 0))
(assert_return (invoke "i16x8.max_u" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                     (v128.const i16x8 -1 -1 -1 -1 -1 -1 -1 -1))
                                     (v128.const i16x8 -1 -1 -1 -1 -1 -1 -1 -1))
(assert_return (invoke "i16x8.max_u" (v128.const i16x8 0 0 0 0 -1 -1 -1 -1)
                                     (v128.const i16x8 0 0 -1 -1 0 0 -1 -1))
                                     (v128.const i16x8 0 0 -1 -1 -1 -1 -1 -1))
(assert_return (invoke "i16x8.max_u" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                     (v128.const i16x8 0xffff 0xffff 0xffff 0xffff 0xffff 0xffff 0xffff 0xffff))
                                     (v128.const i16x8 0xffff 0xffff 0xffff 0xffff 0xffff 0xffff 0xffff 0xffff))
(assert_return (invoke "i16x8.max_u" (v128.const i16x8 1 1 1 1 1 1 1 1)
                                     (v128.const i16x8 1 1 1 1 1 1 1 1))
                                     (v128.const i16x8 1 1 1 1 1 1 1 1))
(assert_return (invoke "i16x8.max_u" (v128.const i16x8 65535 65535 65535 65535 65535 65535 65535 65535)
                                     (v128.const i16x8 1 1 1 1 1 1 1 1))
                                     (v128.const i16x8 65535 65535 65535 65535 65535 65535 65535 65535))
(assert_return (invoke "i16x8.max_u" (v128.const i16x8 65535 65535 65535 65535 65535 65535 65535 65535)
                                     (v128.const i16x8 128 128 128 128 128 128 128 128))
                                     (v128.const i16x8 65535 65535 65535 65535 65535 65535 65535 65535))
(assert_return (invoke "i16x8.max_u" (v128.const i16x8 32768 32768 32768 32768 32768 32768 32768 32768)
                                     (v128.const i16x8 -32768 -32768 -32768 -32768 -32768 -32768 -32768 -32768))
                                     (v128.const i16x8 32768 32768 32768 32768 32768 32768 32768 32768))
(assert_return (invoke "i16x8.max_u" (v128.const i16x8 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000)
                                     (v128.const i16x8 -32768 -32768 -32768 -32768 -32768 -32768 -32768 -32768))
                                     (v128.const i16x8 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000))
(assert_return (invoke "i16x8.max_u" (v128.const i16x8 123 123 123 123 123 123 123 123)
                                     (v128.const i16x8 01_2_3 01_2_3 01_2_3 01_2_3 01_2_3 01_2_3 01_2_3 01_2_3))
                                     (v128.const i16x8 123 123 123 123 123 123 123 123))
(assert_return (invoke "i16x8.max_u" (v128.const i16x8 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80)
                                     (v128.const i16x8 0x0_8_0 0x0_8_0 0x0_8_0 0x0_8_0 0x0_8_0 0x0_8_0 0x0_8_0 0x0_8_0))
                                     (v128.const i16x8 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80))
(assert_return (invoke "i16x8.avgr_u" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                      (v128.const i16x8 0 0 0 0 0 0 0 0))
                                      (v128.const i16x8 0 0 0 0 0 0 0 0))
(assert_return (invoke "i16x8.avgr_u" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                      (v128.const i16x8 -1 -1 -1 -1 -1 -1 -1 -1))
                                      (v128.const i16x8 32768 32768 32768 32768 32768 32768 32768 32768))
(assert_return (invoke "i16x8.avgr_u" (v128.const i16x8 0 0 0 0 -1 -1 -1 -1)
                                      (v128.const i16x8 0 0 -1 -1 0 0 -1 -1))
                                      (v128.const i16x8 0 0 32768 32768 32768 32768 65535 65535))
(assert_return (invoke "i16x8.avgr_u" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                      (v128.const i16x8 0xffff 0xffff 0xffff 0xffff 0xffff 0xffff 0xffff 0xffff))
                                      (v128.const i16x8 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000))
(assert_return (invoke "i16x8.avgr_u" (v128.const i16x8 1 1 1 1 1 1 1 1)
                                      (v128.const i16x8 1 1 1 1 1 1 1 1))
                                      (v128.const i16x8 1 1 1 1 1 1 1 1))
(assert_return (invoke "i16x8.avgr_u" (v128.const i16x8 65535 65535 65535 65535 65535 65535 65535 65535)
                                      (v128.const i16x8 1 1 1 1 1 1 1 1))
                                      (v128.const i16x8 32768 32768 32768 32768 32768 32768 32768 32768))
(assert_return (invoke "i16x8.avgr_u" (v128.const i16x8 65535 65535 65535 65535 65535 65535 65535 65535)
                                      (v128.const i16x8 128 128 128 128 128 128 128 128))
                                      (v128.const i16x8 32832 32832 32832 32832 32832 32832 32832 32832))
(assert_return (invoke "i16x8.avgr_u" (v128.const i16x8 32768 32768 32768 32768 32768 32768 32768 32768)
                                      (v128.const i16x8 -32768 -32768 -32768 -32768 -32768 -32768 -32768 -32768))
                                      (v128.const i16x8 32768 32768 32768 32768 32768 32768 32768 32768))
(assert_return (invoke "i16x8.avgr_u" (v128.const i16x8 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000)
                                      (v128.const i16x8 -32768 -32768 -32768 -32768 -32768 -32768 -32768 -32768))
                                      (v128.const i16x8 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000))
(assert_return (invoke "i16x8.avgr_u" (v128.const i16x8 123 123 123 123 123 123 123 123)
                                      (v128.const i16x8 01_2_3 01_2_3 01_2_3 01_2_3 01_2_3 01_2_3 01_2_3 01_2_3))
                                      (v128.const i16x8 123 123 123 123 123 123 123 123))
(assert_return (invoke "i16x8.avgr_u" (v128.const i16x8 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80)
                                      (v128.const i16x8 0x0_8_0 0x0_8_0 0x0_8_0 0x0_8_0 0x0_8_0 0x0_8_0 0x0_8_0 0x0_8_0))
                                      (v128.const i16x8 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80))
(assert_return (invoke "i16x8.abs" (v128.const i16x8 1 1 1 1 1 1 1 1))
                                   (v128.const i16x8 1 1 1 1 1 1 1 1))
(assert_return (invoke "i16x8.abs" (v128.const i16x8 -1 -1 -1 -1 -1 -1 -1 -1))
                                   (v128.const i16x8 1 1 1 1 1 1 1 1))
(assert_return (invoke "i16x8.abs" (v128.const i16x8 65535 65535 65535 65535 65535 65535 65535 65535))
                                   (v128.const i16x8 1 1 1 1 1 1 1 1))
(assert_return (invoke "i16x8.abs" (v128.const i16x8 0xffff 0xffff 0xffff 0xffff 0xffff 0xffff 0xffff 0xffff))
                                   (v128.const i16x8 0x1 0x1 0x1 0x1 0x1 0x1 0x1 0x1))
(assert_return (invoke "i16x8.abs" (v128.const i16x8 32768 32768 32768 32768 32768 32768 32768 32768))
                                   (v128.const i16x8 32768 32768 32768 32768 32768 32768 32768 32768))
(assert_return (invoke "i16x8.abs" (v128.const i16x8 -32768 -32768 -32768 -32768 -32768 -32768 -32768 -32768))
                                   (v128.const i16x8 32768 32768 32768 32768 32768 32768 32768 32768))
(assert_return (invoke "i16x8.abs" (v128.const i16x8 -0x8000 -0x8000 -0x8000 -0x8000 -0x8000 -0x8000 -0x8000 -0x8000))
                                   (v128.const i16x8 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000))
(assert_return (invoke "i16x8.abs" (v128.const i16x8 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000))
                                   (v128.const i16x8 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000 0x8000))
(assert_return (invoke "i16x8.abs" (v128.const i16x8 01_2_3 01_2_3 01_2_3 01_2_3 01_2_3 01_2_3 01_2_3 01_2_3))
                                   (v128.const i16x8 01_2_3 01_2_3 01_2_3 01_2_3 01_2_3 01_2_3 01_2_3 01_2_3))
(assert_return (invoke "i16x8.abs" (v128.const i16x8 -01_2_3 -01_2_3 -01_2_3 -01_2_3 -01_2_3 -01_2_3 -01_2_3 -01_2_3))
                                   (v128.const i16x8 123 123 123 123 123 123 123 123))
(assert_return (invoke "i16x8.abs" (v128.const i16x8 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80))
                                   (v128.const i16x8 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80))
(assert_return (invoke "i16x8.abs" (v128.const i16x8 -0x80 -0x80 -0x80 -0x80 -0x80 -0x80 -0x80 -0x80))
                                   (v128.const i16x8 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80))
(assert_return (invoke "i16x8.abs" (v128.const i16x8 0x0_8_0 0x0_8_0 0x0_8_0 0x0_8_0 0x0_8_0 0x0_8_0 0x0_8_0 0x0_8_0))
                                   (v128.const i16x8 0x0_8_0 0x0_8_0 0x0_8_0 0x0_8_0 0x0_8_0 0x0_8_0 0x0_8_0 0x0_8_0))
(assert_return (invoke "i16x8.abs" (v128.const i16x8 -0x0_8_0 -0x0_8_0 -0x0_8_0 -0x0_8_0 -0x0_8_0 -0x0_8_0 -0x0_8_0 -0x0_8_0))
                                   (v128.const i16x8 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80))

;; Const vs const
(assert_return (invoke "i16x8.min_s_with_const_0") (v128.const i16x8 -32768 -32768 16384 16384 16384 16384 -32768 -32768))
(assert_return (invoke "i16x8.min_s_with_const_1") (v128.const i16x8 0 0 1 1 1 1 0 0))
(assert_return (invoke "i16x8.min_u_with_const_2") (v128.const i16x8 -32768 -32768 16384 16384 16384 16384 -32768 -32768))
(assert_return (invoke "i16x8.min_u_with_const_3") (v128.const i16x8 0 0 1 1 1 1 0 0))
(assert_return (invoke "i16x8.max_s_with_const_4") (v128.const i16x8 65535 65535 32767 32767 32767 32767 65535 65535))
(assert_return (invoke "i16x8.max_s_with_const_5") (v128.const i16x8 3 3 2 2 2 2 3 3))
(assert_return (invoke "i16x8.max_u_with_const_6") (v128.const i16x8 65535 65535 32767 32767 32767 32767 65535 65535))
(assert_return (invoke "i16x8.max_u_with_const_7") (v128.const i16x8 3 3 2 2 2 2 3 3))
(assert_return (invoke "i16x8.avgr_u_with_const_8") (v128.const i16x8 49152 49152 24576 24576 24576 24576 49152 49152))
(assert_return (invoke "i16x8.avgr_u_with_const_9") (v128.const i16x8 2 2 2 2 2 2 2 2))
(assert_return (invoke "i16x8.abs_with_const_10") (v128.const i16x8 32768 32768 32767 32767 16384 16384 1 1))

;; Param vs const
(assert_return (invoke "i16x8.min_s_with_const_11" (v128.const i16x8 65535 65535 16384 16384 32767 32767 -32768 -32768))
                                                   (v128.const i16x8 -32768 -32768 16384 16384 16384 16384 -32768 -32768))
(assert_return (invoke "i16x8.min_s_with_const_12" (v128.const i16x8 3 3 2 2 1 1 0 0))
                                                   (v128.const i16x8 0 0 1 1 1 1 0 0))
(assert_return (invoke "i16x8.min_u_with_const_13" (v128.const i16x8 65535 65535 16384 16384 32767 32767 -32768 -32768))
                                                   (v128.const i16x8 -32768 -32768 16384 16384 16384 16384 -32768 -32768))
(assert_return (invoke "i16x8.min_u_with_const_14" (v128.const i16x8 3 3 2 2 1 1 0 0))
                                                   (v128.const i16x8 0 0 1 1 1 1 0 0))
(assert_return (invoke "i16x8.max_s_with_const_15" (v128.const i16x8 65535 65535 16384 16384 32767 32767 -32768 -32768))
                                                   (v128.const i16x8 65535 65535 32767 32767 32767 32767 65535 65535))
(assert_return (invoke "i16x8.max_s_with_const_16" (v128.const i16x8 3 3 2 2 1 1 0 0))
                                                   (v128.const i16x8 3 3 2 2 2 2 3 3))
(assert_return (invoke "i16x8.max_u_with_const_17" (v128.const i16x8 65535 65535 16384 16384 32767 32767 -32768 -32768))
                                                   (v128.const i16x8 65535 65535 32767 32767 32767 32767 65535 65535))
(assert_return (invoke "i16x8.max_u_with_const_18" (v128.const i16x8 3 3 2 2 1 1 0 0))
                                                   (v128.const i16x8 3 3 2 2 2 2 3 3))
(assert_return (invoke "i16x8.avgr_u_with_const_19" (v128.const i16x8 65535 65535 16384 16384 32767 32767 -32768 -32768))
                                                    (v128.const i16x8 49152 49152 24576 24576 24576 24576 49152 49152))
(assert_return (invoke "i16x8.avgr_u_with_const_20" (v128.const i16x8 3 3 2 2 1 1 0 0))
                                                    (v128.const i16x8 2 2 2 2 2 2 2 2))

;; Test different lanes go through different if-then clauses
(assert_return (invoke "i16x8.min_s" (v128.const i16x8 -32768 -32768 32767 32767 16384 16384 65535 65535)
                                     (v128.const i16x8 65535 65535 16384 16384 32767 32767 -32768 -32768))
                                     (v128.const i16x8 -32768 -32768 16384 16384 16384 16384 -32768 -32768))
(assert_return (invoke "i16x8.min_s" (v128.const i16x8 0 0 1 1 2 2 128 128)
                                     (v128.const i16x8 0 0 2 2 1 1 128 128))
                                     (v128.const i16x8 0 0 1 1 1 1 128 128))
(assert_return (invoke "i16x8.min_u" (v128.const i16x8 -32768 -32768 32767 32767 16384 16384 65535 65535)
                                     (v128.const i16x8 65535 65535 16384 16384 32767 32767 -32768 -32768))
                                     (v128.const i16x8 -32768 -32768 16384 16384 16384 16384 -32768 -32768))
(assert_return (invoke "i16x8.min_u" (v128.const i16x8 0 0 1 1 2 2 128 128)
                                     (v128.const i16x8 0 0 2 2 1 1 128 128))
                                     (v128.const i16x8 0 0 1 1 1 1 128 128))
(assert_return (invoke "i16x8.max_s" (v128.const i16x8 -32768 -32768 32767 32767 16384 16384 65535 65535)
                                     (v128.const i16x8 65535 65535 16384 16384 32767 32767 -32768 -32768))
                                     (v128.const i16x8 65535 65535 32767 32767 32767 32767 65535 65535))
(assert_return (invoke "i16x8.max_s" (v128.const i16x8 0 0 1 1 2 2 128 128)
                                     (v128.const i16x8 0 0 2 2 1 1 128 128))
                                     (v128.const i16x8 0 0 2 2 2 2 128 128))
(assert_return (invoke "i16x8.max_u" (v128.const i16x8 -32768 -32768 32767 32767 16384 16384 65535 65535)
                                     (v128.const i16x8 65535 65535 16384 16384 32767 32767 -32768 -32768))
                                     (v128.const i16x8 65535 65535 32767 32767 32767 32767 65535 65535))
(assert_return (invoke "i16x8.max_u" (v128.const i16x8 0 0 1 1 2 2 128 128)
                                     (v128.const i16x8 0 0 2 2 1 1 128 128))
                                     (v128.const i16x8 0 0 2 2 2 2 128 128))
(assert_return (invoke "i16x8.avgr_u" (v128.const i16x8 -32768 -32768 32767 32767 16384 16384 65535 65535)
                                      (v128.const i16x8 65535 65535 16384 16384 32767 32767 -32768 -32768))
                                      (v128.const i16x8 49152 49152 24576 24576 24576 24576 49152 49152))
(assert_return (invoke "i16x8.avgr_u" (v128.const i16x8 0 0 1 1 2 2 128 128)
                                      (v128.const i16x8 0 0 2 2 1 1 128 128))
                                      (v128.const i16x8 0 0 2 2 2 2 128 128))
(assert_return (invoke "i16x8.abs" (v128.const i16x8 -32768 -32768 32767 32767 16384 16384 65535 65535))
                                   (v128.const i16x8 32768 32768 32767 32767 16384 16384 1 1))

;; Test opposite signs of zero
(assert_return (invoke "i16x8.min_s" (v128.const i16x8 -0 -0 -0 -0 +0 +0 +0 +0)
                                     (v128.const i16x8 +0 +0 0 0 -0 -0 0 0))
                                     (v128.const i16x8 -0 -0 -0 -0 +0 +0 +0 +0))
(assert_return (invoke "i16x8.min_s" (v128.const i16x8 -0 -0 -0 -0 -0 -0 -0 -0)
                                     (v128.const i16x8 +0 +0 +0 +0 +0 +0 +0 +0))
                                     (v128.const i16x8 -0 -0 -0 -0 -0 -0 -0 -0))
(assert_return (invoke "i16x8.min_u" (v128.const i16x8 -0 -0 -0 -0 +0 +0 +0 +0)
                                     (v128.const i16x8 +0 +0 0 0 -0 -0 0 0))
                                     (v128.const i16x8 -0 -0 -0 -0 +0 +0 +0 +0))
(assert_return (invoke "i16x8.min_u" (v128.const i16x8 -0 -0 -0 -0 -0 -0 -0 -0)
                                     (v128.const i16x8 +0 +0 +0 +0 +0 +0 +0 +0))
                                     (v128.const i16x8 -0 -0 -0 -0 -0 -0 -0 -0))
(assert_return (invoke "i16x8.max_s" (v128.const i16x8 -0 -0 -0 -0 +0 +0 +0 +0)
                                     (v128.const i16x8 +0 +0 0 0 -0 -0 0 0))
                                     (v128.const i16x8 -0 -0 -0 -0 +0 +0 +0 +0))
(assert_return (invoke "i16x8.max_s" (v128.const i16x8 -0 -0 -0 -0 -0 -0 -0 -0)
                                     (v128.const i16x8 +0 +0 +0 +0 +0 +0 +0 +0))
                                     (v128.const i16x8 -0 -0 -0 -0 -0 -0 -0 -0))
(assert_return (invoke "i16x8.max_u" (v128.const i16x8 -0 -0 -0 -0 +0 +0 +0 +0)
                                     (v128.const i16x8 +0 +0 0 0 -0 -0 0 0))
                                     (v128.const i16x8 -0 -0 -0 -0 +0 +0 +0 +0))
(assert_return (invoke "i16x8.max_u" (v128.const i16x8 -0 -0 -0 -0 -0 -0 -0 -0)
                                     (v128.const i16x8 +0 +0 +0 +0 +0 +0 +0 +0))
                                     (v128.const i16x8 -0 -0 -0 -0 -0 -0 -0 -0))
(assert_return (invoke "i16x8.avgr_u" (v128.const i16x8 -0 -0 -0 -0 +0 +0 +0 +0)
                                      (v128.const i16x8 +0 +0 0 0 -0 -0 0 0))
                                      (v128.const i16x8 0 0 0 0 0 0 0 0))
(assert_return (invoke "i16x8.avgr_u" (v128.const i16x8 -0 -0 -0 -0 -0 -0 -0 -0)
                                      (v128.const i16x8 +0 +0 +0 +0 +0 +0 +0 +0))
                                      (v128.const i16x8 0 0 0 0 0 0 0 0))
(assert_return (invoke "i16x8.abs" (v128.const i16x8 -0 -0 -0 -0 +0 +0 +0 +0))
                                   (v128.const i16x8 -0 -0 -0 -0 +0 +0 +0 +0))
(assert_return (invoke "i16x8.abs" (v128.const i16x8 +0 +0 0 0 -0 -0 0 0))
                                   (v128.const i16x8 +0 +0 0 0 -0 -0 0 0))
(assert_return (invoke "i16x8.abs" (v128.const i16x8 -0 -0 -0 -0 -0 -0 -0 -0))
                                   (v128.const i16x8 -0 -0 -0 -0 -0 -0 -0 -0))
(assert_return (invoke "i16x8.abs" (v128.const i16x8 +0 +0 +0 +0 +0 +0 +0 +0))
                                   (v128.const i16x8 +0 +0 +0 +0 +0 +0 +0 +0))

;; Unknown operators
(module
  (type (;0;) (func (param v128 v128 v128) (result v128)))
  (type (;1;) (func (param v128 v128) (result v128)))
  (type (;2;) (func (param v128) (result v128)))
  (type (;3;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 3)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 3)))
  (func (;2;) (type 0) (param v128 v128 v128) (result v128)
    i64.const 1000002000032
    call 1
    i64.const 6
    call 0
    local.get 0
    local.get 1
    i16x8.avgr_u
    local.get 2
    i16x8.min_s
  )
  (func (;3;) (type 0) (param v128 v128 v128) (result v128)
    i64.const 1000002000032
    call 1
    i64.const 6
    call 0
    local.get 0
    local.get 1
    i16x8.max_u
    local.get 2
    i16x8.min_s
  )
  (func (;4;) (type 0) (param v128 v128 v128) (result v128)
    i64.const 1000002000032
    call 1
    i64.const 6
    call 0
    local.get 0
    local.get 1
    i16x8.max_s
    local.get 2
    i16x8.min_s
  )
  (func (;5;) (type 0) (param v128 v128 v128) (result v128)
    i64.const 1000002000032
    call 1
    i64.const 6
    call 0
    local.get 0
    local.get 1
    i16x8.min_u
    local.get 2
    i16x8.min_s
  )
  (func (;6;) (type 0) (param v128 v128 v128) (result v128)
    i64.const 1000002000032
    call 1
    i64.const 6
    call 0
    local.get 0
    local.get 1
    i16x8.min_s
    local.get 2
    i16x8.min_s
  )
  (func (;7;) (type 1) (param v128 v128) (result v128)
    i64.const 1000001000032
    call 1
    i64.const 5
    call 0
    local.get 0
    i16x8.abs
    local.get 1
    i16x8.min_s
  )
  (func (;8;) (type 1) (param v128 v128) (result v128)
    i64.const 1000001000032
    call 1
    i64.const 5
    call 0
    local.get 0
    local.get 1
    i16x8.min_s
    i16x8.abs
  )
  (func (;9;) (type 0) (param v128 v128 v128) (result v128)
    i64.const 1000002000032
    call 1
    i64.const 6
    call 0
    local.get 0
    local.get 1
    i16x8.avgr_u
    local.get 2
    i16x8.min_u
  )
  (func (;10;) (type 0) (param v128 v128 v128) (result v128)
    i64.const 1000002000032
    call 1
    i64.const 6
    call 0
    local.get 0
    local.get 1
    i16x8.max_u
    local.get 2
    i16x8.min_u
  )
  (func (;11;) (type 0) (param v128 v128 v128) (result v128)
    i64.const 1000002000032
    call 1
    i64.const 6
    call 0
    local.get 0
    local.get 1
    i16x8.max_s
    local.get 2
    i16x8.min_u
  )
  (func (;12;) (type 0) (param v128 v128 v128) (result v128)
    i64.const 1000002000032
    call 1
    i64.const 6
    call 0
    local.get 0
    local.get 1
    i16x8.min_u
    local.get 2
    i16x8.min_u
  )
  (func (;13;) (type 0) (param v128 v128 v128) (result v128)
    i64.const 1000002000032
    call 1
    i64.const 6
    call 0
    local.get 0
    local.get 1
    i16x8.min_s
    local.get 2
    i16x8.min_u
  )
  (func (;14;) (type 1) (param v128 v128) (result v128)
    i64.const 1000001000032
    call 1
    i64.const 5
    call 0
    local.get 0
    i16x8.abs
    local.get 1
    i16x8.min_u
  )
  (func (;15;) (type 1) (param v128 v128) (result v128)
    i64.const 1000001000032
    call 1
    i64.const 5
    call 0
    local.get 0
    local.get 1
    i16x8.min_u
    i16x8.abs
  )
  (func (;16;) (type 0) (param v128 v128 v128) (result v128)
    i64.const 1000002000032
    call 1
    i64.const 6
    call 0
    local.get 0
    local.get 1
    i16x8.avgr_u
    local.get 2
    i16x8.max_s
  )
  (func (;17;) (type 0) (param v128 v128 v128) (result v128)
    i64.const 1000002000032
    call 1
    i64.const 6
    call 0
    local.get 0
    local.get 1
    i16x8.max_u
    local.get 2
    i16x8.max_s
  )
  (func (;18;) (type 0) (param v128 v128 v128) (result v128)
    i64.const 1000002000032
    call 1
    i64.const 6
    call 0
    local.get 0
    local.get 1
    i16x8.max_s
    local.get 2
    i16x8.max_s
  )
  (func (;19;) (type 0) (param v128 v128 v128) (result v128)
    i64.const 1000002000032
    call 1
    i64.const 6
    call 0
    local.get 0
    local.get 1
    i16x8.min_u
    local.get 2
    i16x8.max_s
  )
  (func (;20;) (type 0) (param v128 v128 v128) (result v128)
    i64.const 1000002000032
    call 1
    i64.const 6
    call 0
    local.get 0
    local.get 1
    i16x8.min_s
    local.get 2
    i16x8.max_s
  )
  (func (;21;) (type 1) (param v128 v128) (result v128)
    i64.const 1000001000032
    call 1
    i64.const 5
    call 0
    local.get 0
    i16x8.abs
    local.get 1
    i16x8.max_s
  )
  (func (;22;) (type 1) (param v128 v128) (result v128)
    i64.const 1000001000032
    call 1
    i64.const 5
    call 0
    local.get 0
    local.get 1
    i16x8.max_s
    i16x8.abs
  )
  (func (;23;) (type 0) (param v128 v128 v128) (result v128)
    i64.const 1000002000032
    call 1
    i64.const 6
    call 0
    local.get 0
    local.get 1
    i16x8.avgr_u
    local.get 2
    i16x8.max_u
  )
  (func (;24;) (type 0) (param v128 v128 v128) (result v128)
    i64.const 1000002000032
    call 1
    i64.const 6
    call 0
    local.get 0
    local.get 1
    i16x8.max_u
    local.get 2
    i16x8.max_u
  )
  (func (;25;) (type 0) (param v128 v128 v128) (result v128)
    i64.const 1000002000032
    call 1
    i64.const 6
    call 0
    local.get 0
    local.get 1
    i16x8.max_s
    local.get 2
    i16x8.max_u
  )
  (func (;26;) (type 0) (param v128 v128 v128) (result v128)
    i64.const 1000002000032
    call 1
    i64.const 6
    call 0
    local.get 0
    local.get 1
    i16x8.min_u
    local.get 2
    i16x8.max_u
  )
  (func (;27;) (type 0) (param v128 v128 v128) (result v128)
    i64.const 1000002000032
    call 1
    i64.const 6
    call 0
    local.get 0
    local.get 1
    i16x8.min_s
    local.get 2
    i16x8.max_u
  )
  (func (;28;) (type 1) (param v128 v128) (result v128)
    i64.const 1000001000032
    call 1
    i64.const 5
    call 0
    local.get 0
    i16x8.abs
    local.get 1
    i16x8.max_u
  )
  (func (;29;) (type 1) (param v128 v128) (result v128)
    i64.const 1000001000032
    call 1
    i64.const 5
    call 0
    local.get 0
    local.get 1
    i16x8.max_u
    i16x8.abs
  )
  (func (;30;) (type 0) (param v128 v128 v128) (result v128)
    i64.const 1000002000032
    call 1
    i64.const 6
    call 0
    local.get 0
    local.get 1
    i16x8.avgr_u
    local.get 2
    i16x8.avgr_u
  )
  (func (;31;) (type 0) (param v128 v128 v128) (result v128)
    i64.const 1000002000032
    call 1
    i64.const 6
    call 0
    local.get 0
    local.get 1
    i16x8.max_u
    local.get 2
    i16x8.avgr_u
  )
  (func (;32;) (type 0) (param v128 v128 v128) (result v128)
    i64.const 1000002000032
    call 1
    i64.const 6
    call 0
    local.get 0
    local.get 1
    i16x8.max_s
    local.get 2
    i16x8.avgr_u
  )
  (func (;33;) (type 0) (param v128 v128 v128) (result v128)
    i64.const 1000002000032
    call 1
    i64.const 6
    call 0
    local.get 0
    local.get 1
    i16x8.min_u
    local.get 2
    i16x8.avgr_u
  )
  (func (;34;) (type 0) (param v128 v128 v128) (result v128)
    i64.const 1000002000032
    call 1
    i64.const 6
    call 0
    local.get 0
    local.get 1
    i16x8.min_s
    local.get 2
    i16x8.avgr_u
  )
  (func (;35;) (type 1) (param v128 v128) (result v128)
    i64.const 1000001000032
    call 1
    i64.const 5
    call 0
    local.get 0
    i16x8.abs
    local.get 1
    i16x8.avgr_u
  )
  (func (;36;) (type 1) (param v128 v128) (result v128)
    i64.const 1000001000032
    call 1
    i64.const 5
    call 0
    local.get 0
    local.get 1
    i16x8.avgr_u
    i16x8.abs
  )
  (func (;37;) (type 2) (param v128) (result v128)
    i64.const 1000000000016
    call 1
    i64.const 4
    call 0
    local.get 0
    i16x8.abs
    i16x8.abs
  )
  (export "i16x8.min_s-i16x8.avgr_u" (func 2))
  (export "i16x8.min_s-i16x8.max_u" (func 3))
  (export "i16x8.min_s-i16x8.max_s" (func 4))
  (export "i16x8.min_s-i16x8.min_u" (func 5))
  (export "i16x8.min_s-i16x8.min_s" (func 6))
  (export "i16x8.min_s-i16x8.abs" (func 7))
  (export "i16x8.abs-i16x8.min_s" (func 8))
  (export "i16x8.min_u-i16x8.avgr_u" (func 9))
  (export "i16x8.min_u-i16x8.max_u" (func 10))
  (export "i16x8.min_u-i16x8.max_s" (func 11))
  (export "i16x8.min_u-i16x8.min_u" (func 12))
  (export "i16x8.min_u-i16x8.min_s" (func 13))
  (export "i16x8.min_u-i16x8.abs" (func 14))
  (export "i16x8.abs-i16x8.min_u" (func 15))
  (export "i16x8.max_s-i16x8.avgr_u" (func 16))
  (export "i16x8.max_s-i16x8.max_u" (func 17))
  (export "i16x8.max_s-i16x8.max_s" (func 18))
  (export "i16x8.max_s-i16x8.min_u" (func 19))
  (export "i16x8.max_s-i16x8.min_s" (func 20))
  (export "i16x8.max_s-i16x8.abs" (func 21))
  (export "i16x8.abs-i16x8.max_s" (func 22))
  (export "i16x8.max_u-i16x8.avgr_u" (func 23))
  (export "i16x8.max_u-i16x8.max_u" (func 24))
  (export "i16x8.max_u-i16x8.max_s" (func 25))
  (export "i16x8.max_u-i16x8.min_u" (func 26))
  (export "i16x8.max_u-i16x8.min_s" (func 27))
  (export "i16x8.max_u-i16x8.abs" (func 28))
  (export "i16x8.abs-i16x8.max_u" (func 29))
  (export "i16x8.avgr_u-i16x8.avgr_u" (func 30))
  (export "i16x8.avgr_u-i16x8.max_u" (func 31))
  (export "i16x8.avgr_u-i16x8.max_s" (func 32))
  (export "i16x8.avgr_u-i16x8.min_u" (func 33))
  (export "i16x8.avgr_u-i16x8.min_s" (func 34))
  (export "i16x8.avgr_u-i16x8.abs" (func 35))
  (export "i16x8.abs-i16x8.avgr_u" (func 36))
  (export "i16x8.abs-i16x8.abs" (func 37))
)
(assert_return (invoke "i16x8.min_s-i16x8.avgr_u" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                                  (v128.const i16x8 1 1 1 1 1 1 1 1)
                                                  (v128.const i16x8 2 2 2 2 2 2 2 2))
                                                  (v128.const i16x8 1 1 1 1 1 1 1 1))
(assert_return (invoke "i16x8.min_s-i16x8.max_u" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                                 (v128.const i16x8 1 1 1 1 1 1 1 1)
                                                 (v128.const i16x8 2 2 2 2 2 2 2 2))
                                                 (v128.const i16x8 1 1 1 1 1 1 1 1))
(assert_return (invoke "i16x8.min_s-i16x8.max_s" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                                 (v128.const i16x8 1 1 1 1 1 1 1 1)
                                                 (v128.const i16x8 2 2 2 2 2 2 2 2))
                                                 (v128.const i16x8 1 1 1 1 1 1 1 1))
(assert_return (invoke "i16x8.min_s-i16x8.min_u" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                                 (v128.const i16x8 1 1 1 1 1 1 1 1)
                                                 (v128.const i16x8 2 2 2 2 2 2 2 2))
                                                 (v128.const i16x8 0 0 0 0 0 0 0 0))
(assert_return (invoke "i16x8.min_s-i16x8.min_s" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                                 (v128.const i16x8 1 1 1 1 1 1 1 1)
                                                 (v128.const i16x8 2 2 2 2 2 2 2 2))
                                                 (v128.const i16x8 0 0 0 0 0 0 0 0))
(assert_return (invoke "i16x8.min_s-i16x8.abs" (v128.const i16x8 -1 -1 -1 -1 -1 -1 -1 -1)
                                               (v128.const i16x8 0 0 0 0 0 0 0 0))
                                               (v128.const i16x8 0 0 0 0 0 0 0 0))
(assert_return (invoke "i16x8.abs-i16x8.min_s" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                               (v128.const i16x8 -1 -1 -1 -1 -1 -1 -1 -1))
                                               (v128.const i16x8 1 1 1 1 1 1 1 1))
(assert_return (invoke "i16x8.min_u-i16x8.avgr_u" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                                  (v128.const i16x8 1 1 1 1 1 1 1 1)
                                                  (v128.const i16x8 2 2 2 2 2 2 2 2))
                                                  (v128.const i16x8 1 1 1 1 1 1 1 1))
(assert_return (invoke "i16x8.min_u-i16x8.max_u" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                                 (v128.const i16x8 1 1 1 1 1 1 1 1)
                                                 (v128.const i16x8 2 2 2 2 2 2 2 2))
                                                 (v128.const i16x8 1 1 1 1 1 1 1 1))
(assert_return (invoke "i16x8.min_u-i16x8.max_s" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                                 (v128.const i16x8 1 1 1 1 1 1 1 1)
                                                 (v128.const i16x8 2 2 2 2 2 2 2 2))
                                                 (v128.const i16x8 1 1 1 1 1 1 1 1))
(assert_return (invoke "i16x8.min_u-i16x8.min_u" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                                 (v128.const i16x8 1 1 1 1 1 1 1 1)
                                                 (v128.const i16x8 2 2 2 2 2 2 2 2))
                                                 (v128.const i16x8 0 0 0 0 0 0 0 0))
(assert_return (invoke "i16x8.min_u-i16x8.min_s" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                                 (v128.const i16x8 1 1 1 1 1 1 1 1)
                                                 (v128.const i16x8 2 2 2 2 2 2 2 2))
                                                 (v128.const i16x8 0 0 0 0 0 0 0 0))
(assert_return (invoke "i16x8.min_u-i16x8.abs" (v128.const i16x8 -1 -1 -1 -1 -1 -1 -1 -1)
                                               (v128.const i16x8 0 0 0 0 0 0 0 0))
                                               (v128.const i16x8 0 0 0 0 0 0 0 0))
(assert_return (invoke "i16x8.abs-i16x8.min_u" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                               (v128.const i16x8 -1 -1 -1 -1 -1 -1 -1 -1))
                                               (v128.const i16x8 0 0 0 0 0 0 0 0))
(assert_return (invoke "i16x8.max_s-i16x8.avgr_u" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                                  (v128.const i16x8 1 1 1 1 1 1 1 1)
                                                  (v128.const i16x8 2 2 2 2 2 2 2 2))
                                                  (v128.const i16x8 2 2 2 2 2 2 2 2))
(assert_return (invoke "i16x8.max_s-i16x8.max_u" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                                 (v128.const i16x8 1 1 1 1 1 1 1 1)
                                                 (v128.const i16x8 2 2 2 2 2 2 2 2))
                                                 (v128.const i16x8 2 2 2 2 2 2 2 2))
(assert_return (invoke "i16x8.max_s-i16x8.max_s" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                                 (v128.const i16x8 1 1 1 1 1 1 1 1)
                                                 (v128.const i16x8 2 2 2 2 2 2 2 2))
                                                 (v128.const i16x8 2 2 2 2 2 2 2 2))
(assert_return (invoke "i16x8.max_s-i16x8.min_u" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                                 (v128.const i16x8 1 1 1 1 1 1 1 1)
                                                 (v128.const i16x8 2 2 2 2 2 2 2 2))
                                                 (v128.const i16x8 2 2 2 2 2 2 2 2))
(assert_return (invoke "i16x8.max_s-i16x8.min_s" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                                 (v128.const i16x8 1 1 1 1 1 1 1 1)
                                                 (v128.const i16x8 2 2 2 2 2 2 2 2))
                                                 (v128.const i16x8 2 2 2 2 2 2 2 2))
(assert_return (invoke "i16x8.max_s-i16x8.abs" (v128.const i16x8 -1 -1 -1 -1 -1 -1 -1 -1)
                                               (v128.const i16x8 0 0 0 0 0 0 0 0))
                                               (v128.const i16x8 1 1 1 1 1 1 1 1))
(assert_return (invoke "i16x8.abs-i16x8.max_s" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                               (v128.const i16x8 -1 -1 -1 -1 -1 -1 -1 -1))
                                               (v128.const i16x8 0 0 0 0 0 0 0 0))
(assert_return (invoke "i16x8.max_u-i16x8.avgr_u" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                                  (v128.const i16x8 1 1 1 1 1 1 1 1)
                                                  (v128.const i16x8 2 2 2 2 2 2 2 2))
                                                  (v128.const i16x8 2 2 2 2 2 2 2 2))
(assert_return (invoke "i16x8.max_u-i16x8.max_u" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                                 (v128.const i16x8 1 1 1 1 1 1 1 1)
                                                 (v128.const i16x8 2 2 2 2 2 2 2 2))
                                                 (v128.const i16x8 2 2 2 2 2 2 2 2))
(assert_return (invoke "i16x8.max_u-i16x8.max_s" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                                 (v128.const i16x8 1 1 1 1 1 1 1 1)
                                                 (v128.const i16x8 2 2 2 2 2 2 2 2))
                                                 (v128.const i16x8 2 2 2 2 2 2 2 2))
(assert_return (invoke "i16x8.max_u-i16x8.min_u" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                                 (v128.const i16x8 1 1 1 1 1 1 1 1)
                                                 (v128.const i16x8 2 2 2 2 2 2 2 2))
                                                 (v128.const i16x8 2 2 2 2 2 2 2 2))
(assert_return (invoke "i16x8.max_u-i16x8.min_s" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                                 (v128.const i16x8 1 1 1 1 1 1 1 1)
                                                 (v128.const i16x8 2 2 2 2 2 2 2 2))
                                                 (v128.const i16x8 2 2 2 2 2 2 2 2))
(assert_return (invoke "i16x8.max_u-i16x8.abs" (v128.const i16x8 -1 -1 -1 -1 -1 -1 -1 -1)
                                               (v128.const i16x8 0 0 0 0 0 0 0 0))
                                               (v128.const i16x8 1 1 1 1 1 1 1 1))
(assert_return (invoke "i16x8.abs-i16x8.max_u" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                               (v128.const i16x8 -1 -1 -1 -1 -1 -1 -1 -1))
                                               (v128.const i16x8 1 1 1 1 1 1 1 1))
(assert_return (invoke "i16x8.avgr_u-i16x8.avgr_u" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                                   (v128.const i16x8 1 1 1 1 1 1 1 1)
                                                   (v128.const i16x8 2 2 2 2 2 2 2 2))
                                                   (v128.const i16x8 2 2 2 2 2 2 2 2))
(assert_return (invoke "i16x8.avgr_u-i16x8.max_u" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                                  (v128.const i16x8 1 1 1 1 1 1 1 1)
                                                  (v128.const i16x8 2 2 2 2 2 2 2 2))
                                                  (v128.const i16x8 2 2 2 2 2 2 2 2))
(assert_return (invoke "i16x8.avgr_u-i16x8.max_s" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                                  (v128.const i16x8 1 1 1 1 1 1 1 1)
                                                  (v128.const i16x8 2 2 2 2 2 2 2 2))
                                                  (v128.const i16x8 2 2 2 2 2 2 2 2))
(assert_return (invoke "i16x8.avgr_u-i16x8.min_u" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                                  (v128.const i16x8 1 1 1 1 1 1 1 1)
                                                  (v128.const i16x8 2 2 2 2 2 2 2 2))
                                                  (v128.const i16x8 1 1 1 1 1 1 1 1))
(assert_return (invoke "i16x8.avgr_u-i16x8.min_s" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                                  (v128.const i16x8 1 1 1 1 1 1 1 1)
                                                  (v128.const i16x8 2 2 2 2 2 2 2 2))
                                                  (v128.const i16x8 1 1 1 1 1 1 1 1))
(assert_return (invoke "i16x8.avgr_u-i16x8.abs" (v128.const i16x8 -1 -1 -1 -1 -1 -1 -1 -1)
                                                (v128.const i16x8 0 0 0 0 0 0 0 0))
                                                (v128.const i16x8 1 1 1 1 1 1 1 1))
(assert_return (invoke "i16x8.abs-i16x8.avgr_u" (v128.const i16x8 0 0 0 0 0 0 0 0)
                                                (v128.const i16x8 -1 -1 -1 -1 -1 -1 -1 -1))
                                                (v128.const i16x8 32768 32768 32768 32768 32768 32768 32768 32768))
(assert_return (invoke "i16x8.abs-i16x8.abs" (v128.const i16x8 -1 -1 -1 -1 -1 -1 -1 -1))
                                             (v128.const i16x8 1 1 1 1 1 1 1 1))
