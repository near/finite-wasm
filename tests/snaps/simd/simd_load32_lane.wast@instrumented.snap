(module
  (type (;0;) (func (param i32 v128) (result v128)))
  (type (;1;) (func (param v128) (result v128)))
  (type (;2;) (func (param i64)))
  (type (;3;) (func (param i64 i64)))
  (type (;4;) (func (param i32 i64 i64) (result i32)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 2)))
  (import "spectest" "finite_wasm_memory_copy" (func (;1;) (type 4)))
  (import "spectest" "finite_wasm_memory_fill" (func (;2;) (type 4)))
  (import "spectest" "finite_wasm_memory_init" (func (;3;) (type 4)))
  (import "spectest" "finite_wasm_table_copy" (func (;4;) (type 4)))
  (import "spectest" "finite_wasm_table_fill" (func (;5;) (type 4)))
  (import "spectest" "finite_wasm_table_init" (func (;6;) (type 4)))
  (import "spectest" "finite_wasm_stack" (func (;7;) (type 3)))
  (import "spectest" "finite_wasm_unstack" (func (;8;) (type 3)))
  (memory (;0;) 1)
  (export "v128.load32_lane_0" (func 9))
  (export "v128.load32_lane_1" (func 10))
  (export "v128.load32_lane_2" (func 11))
  (export "v128.load32_lane_3" (func 12))
  (export "v128.load32_lane_0_offset_0" (func 13))
  (export "v128.load32_lane_1_offset_1" (func 14))
  (export "v128.load32_lane_2_offset_2" (func 15))
  (export "v128.load32_lane_3_offset_3" (func 16))
  (export "v128.load32_lane_0_align_1" (func 17))
  (export "v128.load32_lane_0_align_2" (func 18))
  (export "v128.load32_lane_0_align_4" (func 19))
  (export "v128.load32_lane_1_align_1" (func 20))
  (export "v128.load32_lane_1_align_2" (func 21))
  (export "v128.load32_lane_1_align_4" (func 22))
  (export "v128.load32_lane_2_align_1" (func 23))
  (export "v128.load32_lane_2_align_2" (func 24))
  (export "v128.load32_lane_2_align_4" (func 25))
  (export "v128.load32_lane_3_align_1" (func 26))
  (export "v128.load32_lane_3_align_2" (func 27))
  (export "v128.load32_lane_3_align_4" (func 28))
  (func (;9;) (type 0) (param $address i32) (param $x v128) (result v128)
    block (result v128) ;; label = @1
      i64.const 20
      i64.const 2
      call 7
      i64.const 3
      call 0
      local.get $address
      local.get $x
      v128.load32_lane 0
    end
    i64.const 20
    i64.const 2
    call 8
  )
  (func (;10;) (type 0) (param $address i32) (param $x v128) (result v128)
    block (result v128) ;; label = @1
      i64.const 20
      i64.const 2
      call 7
      i64.const 3
      call 0
      local.get $address
      local.get $x
      v128.load32_lane 1
    end
    i64.const 20
    i64.const 2
    call 8
  )
  (func (;11;) (type 0) (param $address i32) (param $x v128) (result v128)
    block (result v128) ;; label = @1
      i64.const 20
      i64.const 2
      call 7
      i64.const 3
      call 0
      local.get $address
      local.get $x
      v128.load32_lane 2
    end
    i64.const 20
    i64.const 2
    call 8
  )
  (func (;12;) (type 0) (param $address i32) (param $x v128) (result v128)
    block (result v128) ;; label = @1
      i64.const 20
      i64.const 2
      call 7
      i64.const 3
      call 0
      local.get $address
      local.get $x
      v128.load32_lane 3
    end
    i64.const 20
    i64.const 2
    call 8
  )
  (func (;13;) (type 1) (param $x v128) (result v128)
    block (result v128) ;; label = @1
      i64.const 20
      i64.const 1
      call 7
      i64.const 3
      call 0
      i32.const 0
      local.get $x
      v128.load32_lane 0
    end
    i64.const 20
    i64.const 1
    call 8
  )
  (func (;14;) (type 1) (param $x v128) (result v128)
    block (result v128) ;; label = @1
      i64.const 20
      i64.const 1
      call 7
      i64.const 3
      call 0
      i32.const 0
      local.get $x
      v128.load32_lane offset=1 1
    end
    i64.const 20
    i64.const 1
    call 8
  )
  (func (;15;) (type 1) (param $x v128) (result v128)
    block (result v128) ;; label = @1
      i64.const 20
      i64.const 1
      call 7
      i64.const 3
      call 0
      i32.const 0
      local.get $x
      v128.load32_lane offset=2 2
    end
    i64.const 20
    i64.const 1
    call 8
  )
  (func (;16;) (type 1) (param $x v128) (result v128)
    block (result v128) ;; label = @1
      i64.const 20
      i64.const 1
      call 7
      i64.const 3
      call 0
      i32.const 0
      local.get $x
      v128.load32_lane offset=3 3
    end
    i64.const 20
    i64.const 1
    call 8
  )
  (func (;17;) (type 0) (param $address i32) (param $x v128) (result v128)
    block (result v128) ;; label = @1
      i64.const 20
      i64.const 2
      call 7
      i64.const 3
      call 0
      local.get $address
      local.get $x
      v128.load32_lane align=1 0
    end
    i64.const 20
    i64.const 2
    call 8
  )
  (func (;18;) (type 0) (param $address i32) (param $x v128) (result v128)
    block (result v128) ;; label = @1
      i64.const 20
      i64.const 2
      call 7
      i64.const 3
      call 0
      local.get $address
      local.get $x
      v128.load32_lane align=2 0
    end
    i64.const 20
    i64.const 2
    call 8
  )
  (func (;19;) (type 0) (param $address i32) (param $x v128) (result v128)
    block (result v128) ;; label = @1
      i64.const 20
      i64.const 2
      call 7
      i64.const 3
      call 0
      local.get $address
      local.get $x
      v128.load32_lane 0
    end
    i64.const 20
    i64.const 2
    call 8
  )
  (func (;20;) (type 0) (param $address i32) (param $x v128) (result v128)
    block (result v128) ;; label = @1
      i64.const 20
      i64.const 2
      call 7
      i64.const 3
      call 0
      local.get $address
      local.get $x
      v128.load32_lane align=1 1
    end
    i64.const 20
    i64.const 2
    call 8
  )
  (func (;21;) (type 0) (param $address i32) (param $x v128) (result v128)
    block (result v128) ;; label = @1
      i64.const 20
      i64.const 2
      call 7
      i64.const 3
      call 0
      local.get $address
      local.get $x
      v128.load32_lane align=2 1
    end
    i64.const 20
    i64.const 2
    call 8
  )
  (func (;22;) (type 0) (param $address i32) (param $x v128) (result v128)
    block (result v128) ;; label = @1
      i64.const 20
      i64.const 2
      call 7
      i64.const 3
      call 0
      local.get $address
      local.get $x
      v128.load32_lane 1
    end
    i64.const 20
    i64.const 2
    call 8
  )
  (func (;23;) (type 0) (param $address i32) (param $x v128) (result v128)
    block (result v128) ;; label = @1
      i64.const 20
      i64.const 2
      call 7
      i64.const 3
      call 0
      local.get $address
      local.get $x
      v128.load32_lane align=1 2
    end
    i64.const 20
    i64.const 2
    call 8
  )
  (func (;24;) (type 0) (param $address i32) (param $x v128) (result v128)
    block (result v128) ;; label = @1
      i64.const 20
      i64.const 2
      call 7
      i64.const 3
      call 0
      local.get $address
      local.get $x
      v128.load32_lane align=2 2
    end
    i64.const 20
    i64.const 2
    call 8
  )
  (func (;25;) (type 0) (param $address i32) (param $x v128) (result v128)
    block (result v128) ;; label = @1
      i64.const 20
      i64.const 2
      call 7
      i64.const 3
      call 0
      local.get $address
      local.get $x
      v128.load32_lane 2
    end
    i64.const 20
    i64.const 2
    call 8
  )
  (func (;26;) (type 0) (param $address i32) (param $x v128) (result v128)
    block (result v128) ;; label = @1
      i64.const 20
      i64.const 2
      call 7
      i64.const 3
      call 0
      local.get $address
      local.get $x
      v128.load32_lane align=1 3
    end
    i64.const 20
    i64.const 2
    call 8
  )
  (func (;27;) (type 0) (param $address i32) (param $x v128) (result v128)
    block (result v128) ;; label = @1
      i64.const 20
      i64.const 2
      call 7
      i64.const 3
      call 0
      local.get $address
      local.get $x
      v128.load32_lane align=2 3
    end
    i64.const 20
    i64.const 2
    call 8
  )
  (func (;28;) (type 0) (param $address i32) (param $x v128) (result v128)
    block (result v128) ;; label = @1
      i64.const 20
      i64.const 2
      call 7
      i64.const 3
      call 0
      local.get $address
      local.get $x
      v128.load32_lane 3
    end
    i64.const 20
    i64.const 2
    call 8
  )
  (data (;0;) (i32.const 0) "\00\01\02\03\04\05\06\07\08\09\0a\0b\0c\0d\0e\0f")
)

(assert_return (invoke "v128.load32_lane_0" (i32.const 0)
                                            (v128.const i32x4 0 0 0 0))
                                            (v128.const i32x4 50462976 0 0 0))
(assert_return (invoke "v128.load32_lane_1" (i32.const 1)
                                            (v128.const i32x4 0 0 0 0))
                                            (v128.const i32x4 0 67305985 0 0))
(assert_return (invoke "v128.load32_lane_2" (i32.const 2)
                                            (v128.const i32x4 0 0 0 0))
                                            (v128.const i32x4 0 0 84148994 0))
(assert_return (invoke "v128.load32_lane_3" (i32.const 3)
                                            (v128.const i32x4 0 0 0 0))
                                            (v128.const i32x4 0 0 0 100992003))
(assert_return (invoke "v128.load32_lane_0_offset_0" (v128.const i32x4 0 0 0 0))
                                                     (v128.const i32x4 50462976 0 0 0))
(assert_return (invoke "v128.load32_lane_1_offset_1" (v128.const i32x4 0 0 0 0))
                                                     (v128.const i32x4 0 67305985 0 0))
(assert_return (invoke "v128.load32_lane_2_offset_2" (v128.const i32x4 0 0 0 0))
                                                     (v128.const i32x4 0 0 84148994 0))
(assert_return (invoke "v128.load32_lane_3_offset_3" (v128.const i32x4 0 0 0 0))
                                                     (v128.const i32x4 0 0 0 100992003))
(assert_return (invoke "v128.load32_lane_0_align_1" (i32.const 0)
                                                    (v128.const i32x4 0 0 0 0))
                                                    (v128.const i32x4 50462976 0 0 0))
(assert_return (invoke "v128.load32_lane_0_align_2" (i32.const 0)
                                                    (v128.const i32x4 0 0 0 0))
                                                    (v128.const i32x4 50462976 0 0 0))
(assert_return (invoke "v128.load32_lane_0_align_4" (i32.const 0)
                                                    (v128.const i32x4 0 0 0 0))
                                                    (v128.const i32x4 50462976 0 0 0))
(assert_return (invoke "v128.load32_lane_1_align_1" (i32.const 1)
                                                    (v128.const i32x4 0 0 0 0))
                                                    (v128.const i32x4 0 67305985 0 0))
(assert_return (invoke "v128.load32_lane_1_align_2" (i32.const 1)
                                                    (v128.const i32x4 0 0 0 0))
                                                    (v128.const i32x4 0 67305985 0 0))
(assert_return (invoke "v128.load32_lane_1_align_4" (i32.const 1)
                                                    (v128.const i32x4 0 0 0 0))
                                                    (v128.const i32x4 0 67305985 0 0))
(assert_return (invoke "v128.load32_lane_2_align_1" (i32.const 2)
                                                    (v128.const i32x4 0 0 0 0))
                                                    (v128.const i32x4 0 0 84148994 0))
(assert_return (invoke "v128.load32_lane_2_align_2" (i32.const 2)
                                                    (v128.const i32x4 0 0 0 0))
                                                    (v128.const i32x4 0 0 84148994 0))
(assert_return (invoke "v128.load32_lane_2_align_4" (i32.const 2)
                                                    (v128.const i32x4 0 0 0 0))
                                                    (v128.const i32x4 0 0 84148994 0))
(assert_return (invoke "v128.load32_lane_3_align_1" (i32.const 3)
                                                    (v128.const i32x4 0 0 0 0))
                                                    (v128.const i32x4 0 0 0 100992003))
(assert_return (invoke "v128.load32_lane_3_align_2" (i32.const 3)
                                                    (v128.const i32x4 0 0 0 0))
                                                    (v128.const i32x4 0 0 0 100992003))
(assert_return (invoke "v128.load32_lane_3_align_4" (i32.const 3)
                                                    (v128.const i32x4 0 0 0 0))
                                                    (v128.const i32x4 0 0 0 100992003))

;; type check
