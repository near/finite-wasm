(module
  (type (;0;) (func (param i32) (result v128)))
  (type (;1;) (func (result v128)))
  (type (;2;) (func (param i64)))
  (type (;3;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 2)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 3)))
  (func (;2;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load8x8_s
    i64.const 1
    call 0
  )
  (func (;3;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load8x8_u
    i64.const 1
    call 0
  )
  (func (;4;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load16x4_s
    i64.const 1
    call 0
  )
  (func (;5;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load16x4_u
    i64.const 1
    call 0
  )
  (func (;6;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load32x2_s
    i64.const 1
    call 0
  )
  (func (;7;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load32x2_u
    i64.const 1
    call 0
  )
  (func (;8;) (type 1) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 0
    v128.load8x8_s
    i64.const 1
    call 0
  )
  (func (;9;) (type 1) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 8
    v128.load8x8_u
    i64.const 1
    call 0
  )
  (func (;10;) (type 1) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 10
    v128.load16x4_s
    i64.const 1
    call 0
  )
  (func (;11;) (type 1) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 20
    v128.load16x4_u
    i64.const 1
    call 0
  )
  (func (;12;) (type 1) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 65520
    v128.load32x2_s
    i64.const 1
    call 0
  )
  (func (;13;) (type 1) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 65526
    v128.load32x2_u
    i64.const 1
    call 0
  )
  (func (;14;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load8x8_s
    i64.const 1
    call 0
  )
  (func (;15;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load8x8_s align=1
    i64.const 1
    call 0
  )
  (func (;16;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load8x8_s align=1
    i64.const 1
    call 0
  )
  (func (;17;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load8x8_s offset=1 align=1
    i64.const 1
    call 0
  )
  (func (;18;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load8x8_s offset=10 align=4
    i64.const 1
    call 0
  )
  (func (;19;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load8x8_s offset=20
    i64.const 1
    call 0
  )
  (func (;20;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load8x8_u
    i64.const 1
    call 0
  )
  (func (;21;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load8x8_u align=1
    i64.const 1
    call 0
  )
  (func (;22;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load8x8_u align=1
    i64.const 1
    call 0
  )
  (func (;23;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load8x8_u offset=1 align=1
    i64.const 1
    call 0
  )
  (func (;24;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load8x8_u offset=10 align=4
    i64.const 1
    call 0
  )
  (func (;25;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load8x8_u offset=20
    i64.const 1
    call 0
  )
  (func (;26;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load16x4_s
    i64.const 1
    call 0
  )
  (func (;27;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load16x4_s align=1
    i64.const 1
    call 0
  )
  (func (;28;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load16x4_s align=1
    i64.const 1
    call 0
  )
  (func (;29;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load16x4_s offset=1 align=1
    i64.const 1
    call 0
  )
  (func (;30;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load16x4_s offset=10 align=4
    i64.const 1
    call 0
  )
  (func (;31;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load16x4_s offset=20
    i64.const 1
    call 0
  )
  (func (;32;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load16x4_u
    i64.const 1
    call 0
  )
  (func (;33;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load16x4_u align=1
    i64.const 1
    call 0
  )
  (func (;34;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load16x4_u align=1
    i64.const 1
    call 0
  )
  (func (;35;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load16x4_u offset=1 align=1
    i64.const 1
    call 0
  )
  (func (;36;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load16x4_u offset=10 align=4
    i64.const 1
    call 0
  )
  (func (;37;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load16x4_u offset=20
    i64.const 1
    call 0
  )
  (func (;38;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load32x2_s
    i64.const 1
    call 0
  )
  (func (;39;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load32x2_s align=1
    i64.const 1
    call 0
  )
  (func (;40;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load32x2_s align=1
    i64.const 1
    call 0
  )
  (func (;41;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load32x2_s offset=1 align=1
    i64.const 1
    call 0
  )
  (func (;42;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load32x2_s offset=10 align=4
    i64.const 1
    call 0
  )
  (func (;43;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load32x2_s offset=20
    i64.const 1
    call 0
  )
  (func (;44;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load32x2_u
    i64.const 1
    call 0
  )
  (func (;45;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load32x2_u align=1
    i64.const 1
    call 0
  )
  (func (;46;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load32x2_u align=1
    i64.const 1
    call 0
  )
  (func (;47;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load32x2_u offset=1 align=1
    i64.const 1
    call 0
  )
  (func (;48;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load32x2_u offset=10 align=4
    i64.const 1
    call 0
  )
  (func (;49;) (type 0) (param $0 i32) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get $0
    v128.load32x2_u offset=20
    i64.const 1
    call 0
  )
  (memory (;0;) 1)
  (export "v128.load8x8_s" (func 2))
  (export "v128.load8x8_u" (func 3))
  (export "v128.load16x4_s" (func 4))
  (export "v128.load16x4_u" (func 5))
  (export "v128.load32x2_s" (func 6))
  (export "v128.load32x2_u" (func 7))
  (export "v128.load8x8_s_const0" (func 8))
  (export "v128.load8x8_u_const8" (func 9))
  (export "v128.load16x4_s_const10" (func 10))
  (export "v128.load16x4_u_const20" (func 11))
  (export "v128.load32x2_s_const65520" (func 12))
  (export "v128.load32x2_u_const65526" (func 13))
  (export "v128.load8x8_s_offset0" (func 14))
  (export "v128.load8x8_s_align1" (func 15))
  (export "v128.load8x8_s_offset0_align1" (func 16))
  (export "v128.load8x8_s_offset1_align1" (func 17))
  (export "v128.load8x8_s_offset10_align4" (func 18))
  (export "v128.load8x8_s_offset20_align8" (func 19))
  (export "v128.load8x8_u_offset0" (func 20))
  (export "v128.load8x8_u_align1" (func 21))
  (export "v128.load8x8_u_offset0_align1" (func 22))
  (export "v128.load8x8_u_offset1_align1" (func 23))
  (export "v128.load8x8_u_offset10_align4" (func 24))
  (export "v128.load8x8_u_offset20_align8" (func 25))
  (export "v128.load16x4_s_offset0" (func 26))
  (export "v128.load16x4_s_align1" (func 27))
  (export "v128.load16x4_s_offset0_align1" (func 28))
  (export "v128.load16x4_s_offset1_align1" (func 29))
  (export "v128.load16x4_s_offset10_align4" (func 30))
  (export "v128.load16x4_s_offset20_align8" (func 31))
  (export "v128.load16x4_u_offset0" (func 32))
  (export "v128.load16x4_u_align1" (func 33))
  (export "v128.load16x4_u_offset0_align1" (func 34))
  (export "v128.load16x4_u_offset1_align1" (func 35))
  (export "v128.load16x4_u_offset10_align4" (func 36))
  (export "v128.load16x4_u_offset20_align8" (func 37))
  (export "v128.load32x2_s_offset0" (func 38))
  (export "v128.load32x2_s_align1" (func 39))
  (export "v128.load32x2_s_offset0_align1" (func 40))
  (export "v128.load32x2_s_offset1_align1" (func 41))
  (export "v128.load32x2_s_offset10_align4" (func 42))
  (export "v128.load32x2_s_offset20_align8" (func 43))
  (export "v128.load32x2_u_offset0" (func 44))
  (export "v128.load32x2_u_align1" (func 45))
  (export "v128.load32x2_u_offset0_align1" (func 46))
  (export "v128.load32x2_u_offset1_align1" (func 47))
  (export "v128.load32x2_u_offset10_align4" (func 48))
  (export "v128.load32x2_u_offset20_align8" (func 49))
  (data (;0;) (i32.const 0) "\00\01\02\03\04\05\06\07\08\09\0a\0b\0c\0d\0e\0f\80\81\82\83\84\85\86\87\88\89")
  (data (;1;) (i32.const 65520) "\0a\0b\0c\0d\0e\0f\80\81\82\83\84\85\86\87\88\89")
)
(assert_return (invoke "v128.load8x8_s" (i32.const 0)) (v128.const i16x8 0x0000 0x0001 0x0002 0x0003 0x0004 0x0005 0x0006 0x0007))
(assert_return (invoke "v128.load8x8_u" (i32.const 0)) (v128.const i16x8 0x0000 0x0001 0x0002 0x0003 0x0004 0x0005 0x0006 0x0007))
(assert_return (invoke "v128.load16x4_s" (i32.const 0)) (v128.const i32x4 0x00000100 0x00000302 0x00000504 0x00000706))
(assert_return (invoke "v128.load16x4_u" (i32.const 0)) (v128.const i32x4 0x00000100 0x00000302 0x00000504 0x00000706))
(assert_return (invoke "v128.load32x2_s" (i32.const 0)) (v128.const i64x2 0x0000000003020100 0x0000000007060504))
(assert_return (invoke "v128.load32x2_u" (i32.const 0)) (v128.const i64x2 0x0000000003020100 0x0000000007060504))
(assert_return (invoke "v128.load8x8_s" (i32.const 10)) (v128.const i16x8 0x000A 0x000B 0x000C 0x000D 0x000E 0x000F 0xFF80 0xFF81))
(assert_return (invoke "v128.load8x8_u" (i32.const 10)) (v128.const i16x8 0x000A 0x000B 0x000C 0x000D 0x000E 0x000F 0x0080 0x0081))
(assert_return (invoke "v128.load16x4_s" (i32.const 10)) (v128.const i32x4 0x00000B0A 0x00000D0C 0x00000F0E 0xFFFF8180))
(assert_return (invoke "v128.load16x4_u" (i32.const 10)) (v128.const i32x4 0x00000B0A 0x00000D0C 0x00000F0E 0x00008180))
(assert_return (invoke "v128.load32x2_s" (i32.const 10)) (v128.const i64x2 0x000000000D0C0B0A 0xFFFFFFFF81800F0E))
(assert_return (invoke "v128.load32x2_u" (i32.const 10)) (v128.const i64x2 0x000000000D0C0B0A 0x0000000081800F0E))
(assert_return (invoke "v128.load8x8_s" (i32.const 20)) (v128.const i16x8 0xff84 0xff85 0xff86 0xff87 0xff88 0xff89 0x0000 0x0000))
(assert_return (invoke "v128.load8x8_u" (i32.const 20)) (v128.const i16x8 0x0084 0x0085 0x0086 0x0087 0x0088 0x0089 0x0000 0x0000))
(assert_return (invoke "v128.load16x4_s" (i32.const 20)) (v128.const i32x4 0xffff8584 0xffff8786 0xffff8988 0x00000000))
(assert_return (invoke "v128.load16x4_u" (i32.const 20)) (v128.const i32x4 0x00008584 0x00008786 0x00008988 0x00000000))
(assert_return (invoke "v128.load32x2_s" (i32.const 20)) (v128.const i64x2 0xFFFFFFFF87868584 0x0000000000008988))
(assert_return (invoke "v128.load32x2_u" (i32.const 20)) (v128.const i64x2 0x0000000087868584 0x0000000000008988))

;; load by a constant amount
(assert_return (invoke "v128.load8x8_s_const0") (v128.const i16x8 0x0000 0x0001 0x0002 0x0003 0x0004 0x0005 0x0006 0x0007))
(assert_return (invoke "v128.load8x8_u_const8") (v128.const i16x8 0x0008 0x0009 0x000A 0x000B 0x000C 0x000D 0x000E 0x000F))
(assert_return (invoke "v128.load16x4_s_const10") (v128.const i32x4 0x00000B0A 0x00000D0C 0x00000F0E 0xFFFF8180))
(assert_return (invoke "v128.load16x4_u_const20") (v128.const i32x4 0x00008584 0x00008786 0x00008988 0x00000000))
(assert_return (invoke "v128.load32x2_s_const65520") (v128.const i64x2 0x000000000D0C0B0A 0xFFFFFFFF81800F0E))
(assert_return (invoke "v128.load32x2_u_const65526") (v128.const i64x2 0x0000000083828180 0x0000000087868584))

;; load data with different offset/align arguments
;; i16x8
(assert_return (invoke "v128.load8x8_s_offset0" (i32.const 0)) (v128.const i16x8 0x0000 0x0001 0x0002 0x0003 0x0004 0x0005 0x0006 0x0007))
(assert_return (invoke "v128.load8x8_s_align1" (i32.const 1)) (v128.const i16x8 0x0001 0x0002 0x0003 0x0004 0x0005 0x0006 0x0007 0x0008))
(assert_return (invoke "v128.load8x8_s_offset0_align1" (i32.const 2)) (v128.const i16x8 0x0002 0x0003 0x0004 0x0005 0x0006 0x0007 0x0008 0x0009))
(assert_return (invoke "v128.load8x8_s_offset10_align4" (i32.const 3)) (v128.const i16x8 0x000D 0x000E 0x000F 0xFF80 0xFF81 0xFF82 0xFF83 0xFF84))
(assert_return (invoke "v128.load8x8_s_offset20_align8" (i32.const 4)) (v128.const i16x8 0xFF88 0xFF89 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000))
(assert_return (invoke "v128.load8x8_u_offset0" (i32.const 0)) (v128.const i16x8 0x0000 0x0001 0x0002 0x0003 0x0004 0x0005 0x0006 0x0007))
(assert_return (invoke "v128.load8x8_u_align1" (i32.const 1)) (v128.const i16x8 0x0001 0x0002 0x0003 0x0004 0x0005 0x0006 0x0007 0x0008))
(assert_return (invoke "v128.load8x8_u_offset0_align1" (i32.const 2)) (v128.const i16x8 0x0002 0x0003 0x0004 0x0005 0x0006 0x0007 0x0008 0x0009))
(assert_return (invoke "v128.load8x8_u_offset10_align4" (i32.const 3)) (v128.const i16x8 0x000D 0x000E 0x000F 0x0080 0x0081 0x0082 0x0083 0x0084))
(assert_return (invoke "v128.load8x8_u_offset20_align8" (i32.const 4)) (v128.const i16x8 0x0088 0x0089 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000))
;; i32x4
(assert_return (invoke "v128.load16x4_s_offset0" (i32.const 0)) (v128.const i32x4 0x00000100 0x00000302 0x00000504 0x00000706))
(assert_return (invoke "v128.load16x4_s_align1" (i32.const 1)) (v128.const i32x4 0x00000201 0x00000403 0x00000605 0x00000807))
(assert_return (invoke "v128.load16x4_s_offset0_align1" (i32.const 2)) (v128.const i32x4 0x00000302 0x00000504 0x00000706 0x00000908))
(assert_return (invoke "v128.load16x4_s_offset10_align4" (i32.const 3)) (v128.const i32x4 0x00000E0D 0xFFFF800F 0xFFFF8281 0xFFFF8483))
(assert_return (invoke "v128.load16x4_s_offset20_align8" (i32.const 4)) (v128.const i32x4 0xFFFF8988 0x00000000 0x00000000 0x00000000))
(assert_return (invoke "v128.load16x4_u_offset0" (i32.const 0)) (v128.const i32x4 0x00000100 0x00000302 0x00000504 0x00000706))
(assert_return (invoke "v128.load16x4_u_align1" (i32.const 1)) (v128.const i32x4 0x00000201 0x00000403 0x00000605 0x00000807))
(assert_return (invoke "v128.load16x4_u_offset0_align1" (i32.const 2)) (v128.const i32x4 0x00000302 0x00000504 0x00000706 0x00000908))
(assert_return (invoke "v128.load16x4_u_offset10_align4" (i32.const 3)) (v128.const i32x4 0x00000E0D 0x0000800F 0x00008281 0x00008483))
(assert_return (invoke "v128.load16x4_u_offset20_align8" (i32.const 4)) (v128.const i32x4 0x00008988 0x00000000 0x00000000 0x00000000))
;; i64x2
(assert_return (invoke "v128.load32x2_s_offset0" (i32.const 0)) (v128.const i64x2 0x0000000003020100 0x0000000007060504))
(assert_return (invoke "v128.load32x2_s_align1" (i32.const 1)) (v128.const i64x2 0x0000000004030201 0x0000000008070605))
(assert_return (invoke "v128.load32x2_s_offset0_align1" (i32.const 2)) (v128.const i64x2 0x0000000005040302 0x0000000009080706))
(assert_return (invoke "v128.load32x2_s_offset10_align4" (i32.const 3)) (v128.const i64x2 0xFFFFFFFF800F0E0D 0xFFFFFFFF84838281))
(assert_return (invoke "v128.load32x2_s_offset20_align8" (i32.const 4)) (v128.const i64x2 0x0000000000008988 0x0000000000000000))
(assert_return (invoke "v128.load32x2_u_offset0" (i32.const 0)) (v128.const i64x2 0x0000000003020100 0x0000000007060504))
(assert_return (invoke "v128.load32x2_u_align1" (i32.const 1)) (v128.const i64x2 0x0000000004030201 0x0000000008070605))
(assert_return (invoke "v128.load32x2_u_offset0_align1" (i32.const 2)) (v128.const i64x2 0x0000000005040302 0x0000000009080706))
(assert_return (invoke "v128.load32x2_u_offset10_align4" (i32.const 3)) (v128.const i64x2 0x00000000800F0E0D 0x0000000084838281))
(assert_return (invoke "v128.load32x2_u_offset20_align8" (i32.const 4)) (v128.const i64x2 0x0000000000008988 0x0000000000000000))

;; out of bounds memory access
(assert_trap (invoke "v128.load8x8_s" (i32.const -1))  "out of bounds memory access")
(assert_trap (invoke "v128.load8x8_u" (i32.const -1))  "out of bounds memory access")
(assert_trap (invoke "v128.load16x4_s" (i32.const 65536))  "out of bounds memory access")
(assert_trap (invoke "v128.load16x4_u" (i32.const 65536))  "out of bounds memory access")
(assert_trap (invoke "v128.load32x2_s" (i32.const 65529))  "out of bounds memory access")
(assert_trap (invoke "v128.load32x2_u" (i32.const 65529))  "out of bounds memory access")

(assert_trap (invoke "v128.load8x8_s_offset1_align1" (i32.const -1)) "out of bounds memory access")
(assert_trap (invoke "v128.load8x8_u_offset1_align1" (i32.const -1)) "out of bounds memory access")
(assert_trap (invoke "v128.load16x4_s_offset1_align1" (i32.const -1)) "out of bounds memory access")
(assert_trap (invoke "v128.load16x4_u_offset1_align1" (i32.const -1)) "out of bounds memory access")
(assert_trap (invoke "v128.load32x2_s_offset1_align1" (i32.const -1)) "out of bounds memory access")
(assert_trap (invoke "v128.load32x2_u_offset1_align1" (i32.const -1)) "out of bounds memory access")

;; type check
(module
  (type (;0;) (func (result v128)))
  (type (;1;) (func (result i32)))
  (type (;2;) (func (param i64)))
  (type (;3;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 2)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 3)))
  (func (;2;) (type 0) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 4
    call 0
    block (result v128) ;; label = @1
      block (result v128) ;; label = @2
        i32.const 0
        v128.load8x8_s
        i64.const 3
        call 0
      end
    end
  )
  (func (;3;) (type 0) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 4
    call 0
    block (result v128) ;; label = @1
      block (result v128) ;; label = @2
        i32.const 1
        v128.load8x8_u
        i64.const 3
        call 0
      end
    end
  )
  (func (;4;) (type 0) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 4
    call 0
    block (result v128) ;; label = @1
      block (result v128) ;; label = @2
        i32.const 2
        v128.load16x4_s
        i64.const 3
        call 0
      end
    end
  )
  (func (;5;) (type 0) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 4
    call 0
    block (result v128) ;; label = @1
      block (result v128) ;; label = @2
        i32.const 3
        v128.load16x4_u
        i64.const 3
        call 0
      end
    end
  )
  (func (;6;) (type 0) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 4
    call 0
    block (result v128) ;; label = @1
      block (result v128) ;; label = @2
        i32.const 4
        v128.load32x2_s
        i64.const 3
        call 0
      end
    end
  )
  (func (;7;) (type 0) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 4
    call 0
    block (result v128) ;; label = @1
      block (result v128) ;; label = @2
        i32.const 5
        v128.load32x2_u
        i64.const 3
        call 0
      end
    end
  )
  (func (;8;) (type 0) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 3
    call 0
    block (result v128) ;; label = @1
      i32.const 6
      v128.load8x8_s
      i64.const 1
      call 0
      br 0 (;@1;)
      i64.const 1
      call 0
    end
    i64.const 1
    call 0
  )
  (func (;9;) (type 0) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 3
    call 0
    block (result v128) ;; label = @1
      i32.const 7
      v128.load8x8_u
      i64.const 1
      call 0
      br 0 (;@1;)
      i64.const 1
      call 0
    end
    i64.const 1
    call 0
  )
  (func (;10;) (type 0) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 3
    call 0
    block (result v128) ;; label = @1
      i32.const 8
      v128.load16x4_s
      i64.const 1
      call 0
      br 0 (;@1;)
      i64.const 1
      call 0
    end
    i64.const 1
    call 0
  )
  (func (;11;) (type 0) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 3
    call 0
    block (result v128) ;; label = @1
      i32.const 9
      v128.load16x4_u
      i64.const 1
      call 0
      br 0 (;@1;)
      i64.const 1
      call 0
    end
    i64.const 1
    call 0
  )
  (func (;12;) (type 0) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 3
    call 0
    block (result v128) ;; label = @1
      i32.const 10
      v128.load32x2_s
      i64.const 1
      call 0
      br 0 (;@1;)
      i64.const 1
      call 0
    end
    i64.const 1
    call 0
  )
  (func (;13;) (type 0) (result v128)
    i64.const 16
    i64.const 0
    call 1
    i64.const 3
    call 0
    block (result v128) ;; label = @1
      i32.const 11
      v128.load32x2_u
      i64.const 1
      call 0
      br 0 (;@1;)
      i64.const 1
      call 0
    end
    i64.const 1
    call 0
  )
  (func (;14;) (type 1) (result i32)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 12
    v128.load8x8_s
    i64.const 2
    call 0
    i8x16.extract_lane_s 0
  )
  (func (;15;) (type 1) (result i32)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 13
    v128.load8x8_u
    i64.const 2
    call 0
    i8x16.extract_lane_s 0
  )
  (func (;16;) (type 1) (result i32)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 14
    v128.load16x4_s
    i64.const 2
    call 0
    i8x16.extract_lane_s 0
  )
  (func (;17;) (type 1) (result i32)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 15
    v128.load16x4_u
    i64.const 2
    call 0
    i8x16.extract_lane_s 0
  )
  (func (;18;) (type 1) (result i32)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 16
    v128.load32x2_s
    i64.const 2
    call 0
    i8x16.extract_lane_s 0
  )
  (func (;19;) (type 1) (result i32)
    i64.const 16
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 17
    v128.load32x2_u
    i64.const 2
    call 0
    i8x16.extract_lane_s 0
  )
  (memory (;0;) 1)
  (export "v128.load8x8_s-in-block" (func 2))
  (export "v128.load8x8_u-in-block" (func 3))
  (export "v128.load16x4_s-in-block" (func 4))
  (export "v128.load16x4_u-in-block" (func 5))
  (export "v128.load32x2_s-in-block" (func 6))
  (export "v128.load32x2_u-in-block" (func 7))
  (export "v128.load8x8_s-as-br-value" (func 8))
  (export "v128.load8x8_u-as-br-value" (func 9))
  (export "v128.load16x4_s-as-br-value" (func 10))
  (export "v128.load16x4_u-as-br-value" (func 11))
  (export "v128.load32x2_s-as-br-value" (func 12))
  (export "v128.load32x2_u-as-br-value" (func 13))
  (export "v128.load8x8_s-extract_lane_s-operand" (func 14))
  (export "v128.load8x8_u-extract_lane_s-operand" (func 15))
  (export "v128.load16x4_s-extract_lane_s-operand" (func 16))
  (export "v128.load16x4_u-extract_lane_s-operand" (func 17))
  (export "v128.load32x2_s-extract_lane_s-operand" (func 18))
  (export "v128.load32x2_u-extract_lane_s-operand" (func 19))
  (data (;0;) (i32.const 0) "\00\01\02\03\04\05\06\07\08\09\0a\0b\0c\0d\0e\0f\80\81\82\83\84\85\86\87\88\89")
)
(assert_return (invoke "v128.load8x8_s-in-block") (v128.const i16x8 0x0000 0x0001 0x0002 0x0003 0x0004 0x0005 0x0006 0x0007))
(assert_return (invoke "v128.load8x8_u-in-block") (v128.const i16x8 0x0001 0x0002 0x0003 0x0004 0x0005 0x0006 0x0007 0x0008))
(assert_return (invoke "v128.load16x4_s-in-block") (v128.const i32x4 0x00000302 0x00000504 0x00000706 0x00000908))
(assert_return (invoke "v128.load16x4_u-in-block") (v128.const i32x4 0x00000403 0x00000605 0x00000807 0x00000A09))
(assert_return (invoke "v128.load32x2_s-in-block") (v128.const i64x2 0x0000000007060504 0x000000000B0A0908))
(assert_return (invoke "v128.load32x2_u-in-block") (v128.const i64x2 0x0000000008070605 0x000000000C0B0A09))
(assert_return (invoke "v128.load8x8_s-as-br-value") (v128.const i16x8 0x0006 0x0007 0x0008 0x0009 0x000A 0x000B 0x000C 0x000D))
(assert_return (invoke "v128.load8x8_u-as-br-value") (v128.const i16x8 0x0007 0x0008 0x0009 0x000A 0x000B 0x000C 0x000D 0x000E))
(assert_return (invoke "v128.load16x4_s-as-br-value") (v128.const i32x4 0x00000908 0x00000B0A 0x00000D0C 0x00000F0E))
(assert_return (invoke "v128.load16x4_u-as-br-value") (v128.const i32x4 0x00000A09 0x00000C0B 0x00000E0D 0x0000800F))
(assert_return (invoke "v128.load32x2_s-as-br-value") (v128.const i64x2 0x000000000D0C0B0A 0xFFFFFFFF81800F0E))
(assert_return (invoke "v128.load32x2_u-as-br-value") (v128.const i64x2 0x000000000E0D0C0B 0x000000008281800F))
(assert_return (invoke "v128.load8x8_s-extract_lane_s-operand") (i32.const 12))
(assert_return (invoke "v128.load8x8_u-extract_lane_s-operand") (i32.const 13))
(assert_return (invoke "v128.load16x4_s-extract_lane_s-operand") (i32.const 14))
(assert_return (invoke "v128.load16x4_u-extract_lane_s-operand") (i32.const 15))
(assert_return (invoke "v128.load32x2_s-extract_lane_s-operand") (i32.const -128))
(assert_return (invoke "v128.load32x2_u-extract_lane_s-operand") (i32.const -127))
