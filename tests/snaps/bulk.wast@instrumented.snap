(module
  (memory (;0;) 1)
  (data (;0;) "foo")
)
(module
  (type (;0;) (func))
  (type (;1;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 1)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 1)))
  (func (;2;) (type 0)
    i64.const 1000000000000
    call 1
    i64.const 1
    call 0
  )
  (func (;3;) (type 0)
    i64.const 1000000000000
    call 1
    i64.const 1
    call 0
  )
  (table (;0;) 3 funcref)
  (elem (;0;) funcref (ref.func 2) (ref.null func) (ref.func 3))
)
(module
  (type (;0;) (func (param i32 i32 i32)))
  (type (;1;) (func (param i32) (result i32)))
  (type (;2;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 2)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 2)))
  (func (;2;) (type 0) (param i32 i32 i32)
    i64.const 1000002000012
    call 1
    i64.const 3
    call 0
    local.get 0
    local.get 1
    local.get 2
    i64.const 1
    call 0
    memory.fill
    i64.const 1
    call 0
  )
  (func (;3;) (type 1) (param i32) (result i32)
    i64.const 1000000000004
    call 1
    i64.const 2
    call 0
    local.get 0
    i32.load8_u
    i64.const 1
    call 0
  )
  (memory (;0;) 1)
  (export "fill" (func 2))
  (export "load8_u" (func 3))
)
(invoke "fill" (i32.const 1) (i32.const 0xff) (i32.const 3))
(assert_return (invoke "load8_u" (i32.const 0)) (i32.const 0))
(assert_return (invoke "load8_u" (i32.const 1)) (i32.const 0xff))
(assert_return (invoke "load8_u" (i32.const 2)) (i32.const 0xff))
(assert_return (invoke "load8_u" (i32.const 3)) (i32.const 0xff))
(assert_return (invoke "load8_u" (i32.const 4)) (i32.const 0))

;; Fill value is stored as a byte.
(invoke "fill" (i32.const 0) (i32.const 0xbbaa) (i32.const 2))
(assert_return (invoke "load8_u" (i32.const 0)) (i32.const 0xaa))
(assert_return (invoke "load8_u" (i32.const 1)) (i32.const 0xaa))

;; Fill all of memory
(invoke "fill" (i32.const 0) (i32.const 0) (i32.const 0x10000))

;; Out-of-bounds writes trap, and nothing is written
(assert_trap (invoke "fill" (i32.const 0xff00) (i32.const 1) (i32.const 0x101))
    "out of bounds memory access")
(assert_return (invoke "load8_u" (i32.const 0xff00)) (i32.const 0))
(assert_return (invoke "load8_u" (i32.const 0xffff)) (i32.const 0))

;; Succeed when writing 0 bytes at the end of the region.
(invoke "fill" (i32.const 0x10000) (i32.const 0) (i32.const 0))

;; Writing 0 bytes outside the memory traps.
(assert_trap (invoke "fill" (i32.const 0x10001) (i32.const 0) (i32.const 0))
    "out of bounds memory access")


;; memory.copy
(module
  (type (;0;) (func (param i32 i32 i32)))
  (type (;1;) (func (param i32) (result i32)))
  (type (;2;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 2)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 2)))
  (func (;2;) (type 0) (param i32 i32 i32)
    i64.const 1000002000012
    call 1
    i64.const 3
    call 0
    local.get 0
    local.get 1
    local.get 2
    i64.const 1
    call 0
    memory.copy
    i64.const 1
    call 0
  )
  (func (;3;) (type 1) (param i32) (result i32)
    i64.const 1000000000004
    call 1
    i64.const 2
    call 0
    local.get 0
    i32.load8_u
    i64.const 1
    call 0
  )
  (memory (;0;) 1 1)
  (export "copy" (func 2))
  (export "load8_u" (func 3))
  (data (;0;) (i32.const 0) "\aa\bb\cc\dd")
)
(invoke "copy" (i32.const 10) (i32.const 0) (i32.const 4))

(assert_return (invoke "load8_u" (i32.const 9)) (i32.const 0))
(assert_return (invoke "load8_u" (i32.const 10)) (i32.const 0xaa))
(assert_return (invoke "load8_u" (i32.const 11)) (i32.const 0xbb))
(assert_return (invoke "load8_u" (i32.const 12)) (i32.const 0xcc))
(assert_return (invoke "load8_u" (i32.const 13)) (i32.const 0xdd))
(assert_return (invoke "load8_u" (i32.const 14)) (i32.const 0))

;; Overlap, source > dest
(invoke "copy" (i32.const 8) (i32.const 10) (i32.const 4))
(assert_return (invoke "load8_u" (i32.const 8)) (i32.const 0xaa))
(assert_return (invoke "load8_u" (i32.const 9)) (i32.const 0xbb))
(assert_return (invoke "load8_u" (i32.const 10)) (i32.const 0xcc))
(assert_return (invoke "load8_u" (i32.const 11)) (i32.const 0xdd))
(assert_return (invoke "load8_u" (i32.const 12)) (i32.const 0xcc))
(assert_return (invoke "load8_u" (i32.const 13)) (i32.const 0xdd))

;; Overlap, source < dest
(invoke "copy" (i32.const 10) (i32.const 7) (i32.const 6))
(assert_return (invoke "load8_u" (i32.const 10)) (i32.const 0))
(assert_return (invoke "load8_u" (i32.const 11)) (i32.const 0xaa))
(assert_return (invoke "load8_u" (i32.const 12)) (i32.const 0xbb))
(assert_return (invoke "load8_u" (i32.const 13)) (i32.const 0xcc))
(assert_return (invoke "load8_u" (i32.const 14)) (i32.const 0xdd))
(assert_return (invoke "load8_u" (i32.const 15)) (i32.const 0xcc))
(assert_return (invoke "load8_u" (i32.const 16)) (i32.const 0))

;; Copy ending at memory limit is ok.
(invoke "copy" (i32.const 0xff00) (i32.const 0) (i32.const 0x100))
(invoke "copy" (i32.const 0xfe00) (i32.const 0xff00) (i32.const 0x100))

;; Succeed when copying 0 bytes at the end of the region.
(invoke "copy" (i32.const 0x10000) (i32.const 0) (i32.const 0))
(invoke "copy" (i32.const 0) (i32.const 0x10000) (i32.const 0))

;; Copying 0 bytes outside the memory traps.
(assert_trap (invoke "copy" (i32.const 0x10001) (i32.const 0) (i32.const 0))
    "out of bounds memory access")
(assert_trap (invoke "copy" (i32.const 0) (i32.const 0x10001) (i32.const 0))
    "out of bounds memory access")


;; memory.init
(module
  (type (;0;) (func (param i32 i32 i32)))
  (type (;1;) (func (param i32) (result i32)))
  (type (;2;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 2)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 2)))
  (func (;2;) (type 0) (param i32 i32 i32)
    i64.const 1000002000012
    call 1
    i64.const 3
    call 0
    local.get 0
    local.get 1
    local.get 2
    i64.const 1
    call 0
    memory.init 0
    i64.const 1
    call 0
  )
  (func (;3;) (type 1) (param i32) (result i32)
    i64.const 1000000000004
    call 1
    i64.const 2
    call 0
    local.get 0
    i32.load8_u
    i64.const 1
    call 0
  )
  (memory (;0;) 1)
  (export "init" (func 2))
  (export "load8_u" (func 3))
  (data (;0;) "\aa\bb\cc\dd")
)
(invoke "init" (i32.const 0) (i32.const 1) (i32.const 2))
(assert_return (invoke "load8_u" (i32.const 0)) (i32.const 0xbb))
(assert_return (invoke "load8_u" (i32.const 1)) (i32.const 0xcc))
(assert_return (invoke "load8_u" (i32.const 2)) (i32.const 0))

;; Init ending at memory limit and segment limit is ok.
(invoke "init" (i32.const 0xfffc) (i32.const 0) (i32.const 4))

;; Out-of-bounds writes trap, and nothing is written.
(assert_trap (invoke "init" (i32.const 0xfffe) (i32.const 0) (i32.const 3))
    "out of bounds memory access")
(assert_return (invoke "load8_u" (i32.const 0xfffe)) (i32.const 0xcc))
(assert_return (invoke "load8_u" (i32.const 0xffff)) (i32.const 0xdd))

;; Succeed when writing 0 bytes at the end of either region.
(invoke "init" (i32.const 0x10000) (i32.const 0) (i32.const 0))
(invoke "init" (i32.const 0) (i32.const 4) (i32.const 0))

;; Writing 0 bytes outside the memory traps.
(assert_trap (invoke "init" (i32.const 0x10001) (i32.const 0) (i32.const 0))
    "out of bounds memory access")
(assert_trap (invoke "init" (i32.const 0) (i32.const 5) (i32.const 0))
    "out of bounds memory access")

;; data.drop
(module
  (type (;0;) (func))
  (type (;1;) (func (param i32)))
  (type (;2;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 2)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 2)))
  (func (;2;) (type 0)
    i64.const 1000000000000
    call 1
    i64.const 2
    call 0
    data.drop $p
  )
  (func (;3;) (type 1) (param $len i32)
    i64.const 1000000000012
    call 1
    i64.const 3
    call 0
    i32.const 0
    i32.const 0
    local.get $len
    i64.const 1
    call 0
    memory.init $p
    i64.const 1
    call 0
  )
  (func (;4;) (type 0)
    i64.const 1000000000000
    call 1
    i64.const 2
    call 0
    data.drop $a
  )
  (func (;5;) (type 1) (param $len i32)
    i64.const 1000000000012
    call 1
    i64.const 3
    call 0
    i32.const 0
    i32.const 0
    local.get $len
    i64.const 1
    call 0
    memory.init $a
    i64.const 1
    call 0
  )
  (memory (;0;) 1)
  (export "drop_passive" (func 2))
  (export "init_passive" (func 3))
  (export "drop_active" (func 4))
  (export "init_active" (func 5))
  (data $p (;0;) "x")
  (data $a (;1;) (i32.const 0) "x")
)
(invoke "init_passive" (i32.const 1))
(invoke "drop_passive")
(invoke "drop_passive")
(assert_return (invoke "init_passive" (i32.const 0)))
(assert_trap (invoke "init_passive" (i32.const 1)) "out of bounds memory access")
(invoke "init_passive" (i32.const 0))
(invoke "drop_active")
(assert_return (invoke "init_active" (i32.const 0)))
(assert_trap (invoke "init_active" (i32.const 1)) "out of bounds memory access")
(invoke "init_active" (i32.const 0))

;; Test that the data segment index is properly encoded as an unsigned (not
;; signed) LEB.
(module
  (type (;0;) (func))
  (type (;1;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 1)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 1)))
  (func (;2;) (type 0)
    i64.const 1000000000000
    call 1
    i64.const 2
    call 0
    data.drop 64
  )
  (data (;0;) "")
  (data (;1;) "")
  (data (;2;) "")
  (data (;3;) "")
  (data (;4;) "")
  (data (;5;) "")
  (data (;6;) "")
  (data (;7;) "")
  (data (;8;) "")
  (data (;9;) "")
  (data (;10;) "")
  (data (;11;) "")
  (data (;12;) "")
  (data (;13;) "")
  (data (;14;) "")
  (data (;15;) "")
  (data (;16;) "")
  (data (;17;) "")
  (data (;18;) "")
  (data (;19;) "")
  (data (;20;) "")
  (data (;21;) "")
  (data (;22;) "")
  (data (;23;) "")
  (data (;24;) "")
  (data (;25;) "")
  (data (;26;) "")
  (data (;27;) "")
  (data (;28;) "")
  (data (;29;) "")
  (data (;30;) "")
  (data (;31;) "")
  (data (;32;) "")
  (data (;33;) "")
  (data (;34;) "")
  (data (;35;) "")
  (data (;36;) "")
  (data (;37;) "")
  (data (;38;) "")
  (data (;39;) "")
  (data (;40;) "")
  (data (;41;) "")
  (data (;42;) "")
  (data (;43;) "")
  (data (;44;) "")
  (data (;45;) "")
  (data (;46;) "")
  (data (;47;) "")
  (data (;48;) "")
  (data (;49;) "")
  (data (;50;) "")
  (data (;51;) "")
  (data (;52;) "")
  (data (;53;) "")
  (data (;54;) "")
  (data (;55;) "")
  (data (;56;) "")
  (data (;57;) "")
  (data (;58;) "")
  (data (;59;) "")
  (data (;60;) "")
  (data (;61;) "")
  (data (;62;) "")
  (data (;63;) "")
  (data (;64;) "")
)
(module
  (type (;0;) (func))
  (type (;1;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 1)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 1)))
  (func (;2;) (type 0)
    i64.const 1000000000000
    call 1
    i64.const 2
    call 0
    data.drop 0
  )
  (data (;0;) "goodbye")
)
(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func (param i32 i32 i32)))
  (type (;2;) (func (param i32) (result i32)))
  (type (;3;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func $finite_wasm_gas (;0;) (type 3)))
  (import "spectest" "finite_wasm_stack" (func $finite_wasm_stack (;1;) (type 3)))
  (func $zero (;2;) (type 0) (result i32)
    i64.const 1000000000004
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 0
  )
  (func $one (;3;) (type 0) (result i32)
    i64.const 1000000000004
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 1
  )
  (func (;4;) (type 1) (param i32 i32 i32)
    i64.const 1000002000012
    call $finite_wasm_stack
    i64.const 3
    call $finite_wasm_gas
    local.get 0
    local.get 1
    local.get 2
    i64.const 1
    call $finite_wasm_gas
    table.init 0
    i64.const 1
    call $finite_wasm_gas
  )
  (func (;5;) (type 2) (param i32) (result i32)
    i64.const 1000000000008
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    local.get 0
    call_indirect (type 0)
    i64.const 1
    call $finite_wasm_gas
  )
  (table (;0;) 3 funcref)
  (export "init" (func 4))
  (export "call" (func 5))
  (elem (;0;) funcref (ref.func $zero) (ref.func $one) (ref.func $zero) (ref.func $one))
)
(assert_trap (invoke "init" (i32.const 2) (i32.const 0) (i32.const 2))
    "out of bounds table access")
(assert_trap (invoke "call" (i32.const 2))
    "uninitialized element 2")

(invoke "init" (i32.const 0) (i32.const 1) (i32.const 2))
(assert_return (invoke "call" (i32.const 0)) (i32.const 1))
(assert_return (invoke "call" (i32.const 1)) (i32.const 0))
(assert_trap (invoke "call" (i32.const 2)) "uninitialized element")

;; Init ending at table limit and segment limit is ok.
(invoke "init" (i32.const 1) (i32.const 2) (i32.const 2))

;; Succeed when storing 0 elements at the end of either region.
(invoke "init" (i32.const 3) (i32.const 0) (i32.const 0))
(invoke "init" (i32.const 0) (i32.const 4) (i32.const 0))

;; Writing 0 elements outside the table traps.
(assert_trap (invoke "init" (i32.const 4) (i32.const 0) (i32.const 0))
    "out of bounds table access")
(assert_trap (invoke "init" (i32.const 0) (i32.const 5) (i32.const 0))
    "out of bounds table access")


;; elem.drop
(module
  (type (;0;) (func))
  (type (;1;) (func (param i32)))
  (type (;2;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func $finite_wasm_gas (;0;) (type 2)))
  (import "spectest" "finite_wasm_stack" (func $finite_wasm_stack (;1;) (type 2)))
  (func $f (;2;) (type 0)
    i64.const 1000000000000
    call $finite_wasm_stack
    i64.const 1
    call $finite_wasm_gas
  )
  (func (;3;) (type 0)
    i64.const 1000000000000
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    elem.drop $p
  )
  (func (;4;) (type 1) (param $len i32)
    i64.const 1000000000012
    call $finite_wasm_stack
    i64.const 3
    call $finite_wasm_gas
    i32.const 0
    i32.const 0
    local.get $len
    i64.const 1
    call $finite_wasm_gas
    table.init $p
    i64.const 1
    call $finite_wasm_gas
  )
  (func (;5;) (type 0)
    i64.const 1000000000000
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    elem.drop $a
  )
  (func (;6;) (type 1) (param $len i32)
    i64.const 1000000000012
    call $finite_wasm_stack
    i64.const 3
    call $finite_wasm_gas
    i32.const 0
    i32.const 0
    local.get $len
    i64.const 1
    call $finite_wasm_gas
    table.init $a
    i64.const 1
    call $finite_wasm_gas
  )
  (table (;0;) 1 funcref)
  (export "drop_passive" (func 3))
  (export "init_passive" (func 4))
  (export "drop_active" (func 5))
  (export "init_active" (func 6))
  (elem $p (;0;) funcref (ref.func $f))
  (elem $a (;1;) (i32.const 0) func $f)
)
(invoke "init_passive" (i32.const 1))
(invoke "drop_passive")
(invoke "drop_passive")
(assert_return (invoke "init_passive" (i32.const 0)))
(assert_trap (invoke "init_passive" (i32.const 1)) "out of bounds table access")
(invoke "init_passive" (i32.const 0))
(invoke "drop_active")
(assert_return (invoke "init_active" (i32.const 0)))
(assert_trap (invoke "init_active" (i32.const 1)) "out of bounds table access")
(invoke "init_active" (i32.const 0))

;; Test that the elem segment index is properly encoded as an unsigned (not
;; signed) LEB.
(module
  (type (;0;) (func))
  (type (;1;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 1)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 1)))
  (func (;2;) (type 0)
    i64.const 1000000000000
    call 1
    i64.const 2
    call 0
    elem.drop 64
  )
  (elem (;0;) funcref)
  (elem (;1;) funcref)
  (elem (;2;) funcref)
  (elem (;3;) funcref)
  (elem (;4;) funcref)
  (elem (;5;) funcref)
  (elem (;6;) funcref)
  (elem (;7;) funcref)
  (elem (;8;) funcref)
  (elem (;9;) funcref)
  (elem (;10;) funcref)
  (elem (;11;) funcref)
  (elem (;12;) funcref)
  (elem (;13;) funcref)
  (elem (;14;) funcref)
  (elem (;15;) funcref)
  (elem (;16;) funcref)
  (elem (;17;) funcref)
  (elem (;18;) funcref)
  (elem (;19;) funcref)
  (elem (;20;) funcref)
  (elem (;21;) funcref)
  (elem (;22;) funcref)
  (elem (;23;) funcref)
  (elem (;24;) funcref)
  (elem (;25;) funcref)
  (elem (;26;) funcref)
  (elem (;27;) funcref)
  (elem (;28;) funcref)
  (elem (;29;) funcref)
  (elem (;30;) funcref)
  (elem (;31;) funcref)
  (elem (;32;) funcref)
  (elem (;33;) funcref)
  (elem (;34;) funcref)
  (elem (;35;) funcref)
  (elem (;36;) funcref)
  (elem (;37;) funcref)
  (elem (;38;) funcref)
  (elem (;39;) funcref)
  (elem (;40;) funcref)
  (elem (;41;) funcref)
  (elem (;42;) funcref)
  (elem (;43;) funcref)
  (elem (;44;) funcref)
  (elem (;45;) funcref)
  (elem (;46;) funcref)
  (elem (;47;) funcref)
  (elem (;48;) funcref)
  (elem (;49;) funcref)
  (elem (;50;) funcref)
  (elem (;51;) funcref)
  (elem (;52;) funcref)
  (elem (;53;) funcref)
  (elem (;54;) funcref)
  (elem (;55;) funcref)
  (elem (;56;) funcref)
  (elem (;57;) funcref)
  (elem (;58;) funcref)
  (elem (;59;) funcref)
  (elem (;60;) funcref)
  (elem (;61;) funcref)
  (elem (;62;) funcref)
  (elem (;63;) funcref)
  (elem (;64;) funcref)
)
(module
  (type (;0;) (func))
  (type (;1;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 1)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 1)))
  (func (;2;) (type 0)
    i64.const 1000000000000
    call 1
    i64.const 2
    call 0
    elem.drop 0
  )
  (elem (;0;) funcref (ref.func 2))
)
(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func (param i32 i32 i32)))
  (type (;2;) (func (param i32) (result i32)))
  (type (;3;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func $finite_wasm_gas (;0;) (type 3)))
  (import "spectest" "finite_wasm_stack" (func $finite_wasm_stack (;1;) (type 3)))
  (func $zero (;2;) (type 0) (result i32)
    i64.const 1000000000004
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 0
  )
  (func $one (;3;) (type 0) (result i32)
    i64.const 1000000000004
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 1
  )
  (func $two (;4;) (type 0) (result i32)
    i64.const 1000000000004
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 2
  )
  (func (;5;) (type 1) (param i32 i32 i32)
    i64.const 1000002000012
    call $finite_wasm_stack
    i64.const 3
    call $finite_wasm_gas
    local.get 0
    local.get 1
    local.get 2
    i64.const 1
    call $finite_wasm_gas
    table.copy
    i64.const 1
    call $finite_wasm_gas
  )
  (func (;6;) (type 2) (param i32) (result i32)
    i64.const 1000000000008
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    local.get 0
    call_indirect (type 0)
    i64.const 1
    call $finite_wasm_gas
  )
  (table (;0;) 10 funcref)
  (export "copy" (func 5))
  (export "call" (func 6))
  (elem (;0;) (i32.const 0) func $zero $one $two)
)
(invoke "copy" (i32.const 3) (i32.const 0) (i32.const 3))
;; Now [$zero, $one, $two, $zero, $one, $two, ...]
(assert_return (invoke "call" (i32.const 3)) (i32.const 0))
(assert_return (invoke "call" (i32.const 4)) (i32.const 1))
(assert_return (invoke "call" (i32.const 5)) (i32.const 2))

;; Overlap, source > dest
(invoke "copy" (i32.const 0) (i32.const 1) (i32.const 3))
;; Now [$one, $two, $zero, $zero, $one, $two, ...]
(assert_return (invoke "call" (i32.const 0)) (i32.const 1))
(assert_return (invoke "call" (i32.const 1)) (i32.const 2))
(assert_return (invoke "call" (i32.const 2)) (i32.const 0))

;; Overlap, source < dest
(invoke "copy" (i32.const 2) (i32.const 0) (i32.const 3))
;; Now [$one, $two, $one, $two, $zero, $two, ...]
(assert_return (invoke "call" (i32.const 2)) (i32.const 1))
(assert_return (invoke "call" (i32.const 3)) (i32.const 2))
(assert_return (invoke "call" (i32.const 4)) (i32.const 0))

;; Copy ending at table limit is ok.
(invoke "copy" (i32.const 6) (i32.const 8) (i32.const 2))
(invoke "copy" (i32.const 8) (i32.const 6) (i32.const 2))

;; Succeed when copying 0 elements at the end of the region.
(invoke "copy" (i32.const 10) (i32.const 0) (i32.const 0))
(invoke "copy" (i32.const 0) (i32.const 10) (i32.const 0))

;; Fail on out-of-bounds when copying 0 elements outside of table.
(assert_trap (invoke "copy" (i32.const 11) (i32.const 0) (i32.const 0))
  "out of bounds table access")
(assert_trap (invoke "copy" (i32.const 0) (i32.const 11) (i32.const 0))
  "out of bounds table access")
