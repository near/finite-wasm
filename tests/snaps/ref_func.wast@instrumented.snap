(module
  (type (;0;) (func (param i32) (result i32)))
  (type (;1;) (func (param i64)))
  (type (;2;) (func (param i64 i64)))
  (type (;3;) (func (param i32 i64 i64) (result i32)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 1)))
  (import "spectest" "finite_wasm_memory_copy" (func (;1;) (type 3)))
  (import "spectest" "finite_wasm_memory_fill" (func (;2;) (type 3)))
  (import "spectest" "finite_wasm_memory_init" (func (;3;) (type 3)))
  (import "spectest" "finite_wasm_table_copy" (func (;4;) (type 3)))
  (import "spectest" "finite_wasm_table_fill" (func (;5;) (type 3)))
  (import "spectest" "finite_wasm_table_init" (func (;6;) (type 3)))
  (import "spectest" "finite_wasm_stack" (func (;7;) (type 2)))
  (import "spectest" "finite_wasm_unstack" (func (;8;) (type 2)))
  (export "f" (func 9))
  (func (;9;) (type 0) (param $x i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 4
      i64.const 1
      call 7
      i64.const 1
      call 0
      local.get $x
    end
    i64.const 4
    i64.const 1
    call 8
  )
)

(register "M")

(module
  (type (;0;) (func (param i32) (result i32)))
  (type (;1;) (func))
  (type (;2;) (func (result i32)))
  (type (;3;) (func (param i64)))
  (type (;4;) (func (param i64 i64)))
  (type (;5;) (func (param i32 i64 i64) (result i32)))
  (import "spectest" "finite_wasm_gas" (func $finite_wasm_gas (;0;) (type 3)))
  (import "spectest" "finite_wasm_memory_copy" (func (;1;) (type 5)))
  (import "spectest" "finite_wasm_memory_fill" (func (;2;) (type 5)))
  (import "spectest" "finite_wasm_memory_init" (func (;3;) (type 5)))
  (import "spectest" "finite_wasm_table_copy" (func (;4;) (type 5)))
  (import "spectest" "finite_wasm_table_fill" (func (;5;) (type 5)))
  (import "spectest" "finite_wasm_table_init" (func (;6;) (type 5)))
  (import "spectest" "finite_wasm_stack" (func $finite_wasm_stack (;7;) (type 4)))
  (import "spectest" "finite_wasm_unstack" (func $finite_wasm_unstack (;8;) (type 4)))
  (import "M" "f" (func $f (;9;) (type 0)))
  (table $t (;0;) 1 funcref)
  (global (;0;) funcref ref.func $f)
  (global (;1;) funcref ref.func $g)
  (global $v (;2;) (mut funcref) ref.func $f)
  (global (;3;) funcref ref.func $gf1)
  (global (;4;) funcref ref.func $gf2)
  (export "is_null-f" (func 16))
  (export "is_null-g" (func 17))
  (export "is_null-v" (func 18))
  (export "set-f" (func 19))
  (export "set-g" (func 20))
  (export "call-f" (func 21))
  (export "call-g" (func 22))
  (export "call-v" (func 23))
  (elem (;0;) declare func $gf1 $ff1)
  (elem (;1;) declare funcref (ref.func $gf2) (ref.func $ff2))
  (elem (;2;) declare func $f $g)
  (func $g (;10;) (type 0) (param $x i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 8
      i64.const 1
      call $finite_wasm_stack
      i64.const 3
      call $finite_wasm_gas
      local.get $x
      i32.const 1
      i32.add
    end
    i64.const 8
    i64.const 1
    call $finite_wasm_unstack
  )
  (func (;11;) (type 1)
    block ;; label = @1
      i64.const 32
      i64.const 0
      call $finite_wasm_stack
      i64.const 4
      call $finite_wasm_gas
      ref.func $ff1
      drop
      ref.func $ff2
      drop
    end
    i64.const 32
    i64.const 0
    call $finite_wasm_unstack
  )
  (func $gf1 (;12;) (type 1))
  (func $gf2 (;13;) (type 1))
  (func $ff1 (;14;) (type 1))
  (func $ff2 (;15;) (type 1))
  (func (;16;) (type 2) (result i32)
    block (result i32) ;; label = @1
      i64.const 32
      i64.const 0
      call $finite_wasm_stack
      i64.const 2
      call $finite_wasm_gas
      ref.func $f
      ref.is_null
    end
    i64.const 32
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;17;) (type 2) (result i32)
    block (result i32) ;; label = @1
      i64.const 32
      i64.const 0
      call $finite_wasm_stack
      i64.const 2
      call $finite_wasm_gas
      ref.func $g
      ref.is_null
    end
    i64.const 32
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;18;) (type 2) (result i32)
    block (result i32) ;; label = @1
      i64.const 32
      i64.const 0
      call $finite_wasm_stack
      i64.const 2
      call $finite_wasm_gas
      global.get $v
      ref.is_null
    end
    i64.const 32
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;19;) (type 1)
    block ;; label = @1
      i64.const 32
      i64.const 0
      call $finite_wasm_stack
      i64.const 2
      call $finite_wasm_gas
      ref.func $f
      global.set $v
    end
    i64.const 32
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;20;) (type 1)
    block ;; label = @1
      i64.const 32
      i64.const 0
      call $finite_wasm_stack
      i64.const 2
      call $finite_wasm_gas
      ref.func $g
      global.set $v
    end
    i64.const 32
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;21;) (type 0) (param $x i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 36
      i64.const 1
      call $finite_wasm_stack
      i64.const 3
      call $finite_wasm_gas
      i32.const 0
      ref.func $f
      table.set $t
      i64.const 3
      call $finite_wasm_gas
      local.get $x
      i32.const 0
      call_indirect (type 0)
    end
    i64.const 36
    i64.const 1
    call $finite_wasm_unstack
  )
  (func (;22;) (type 0) (param $x i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 36
      i64.const 1
      call $finite_wasm_stack
      i64.const 3
      call $finite_wasm_gas
      i32.const 0
      ref.func $g
      table.set $t
      i64.const 3
      call $finite_wasm_gas
      local.get $x
      i32.const 0
      call_indirect (type 0)
    end
    i64.const 36
    i64.const 1
    call $finite_wasm_unstack
  )
  (func (;23;) (type 0) (param $x i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 36
      i64.const 1
      call $finite_wasm_stack
      i64.const 3
      call $finite_wasm_gas
      i32.const 0
      global.get $v
      table.set $t
      i64.const 3
      call $finite_wasm_gas
      local.get $x
      i32.const 0
      call_indirect (type 0)
    end
    i64.const 36
    i64.const 1
    call $finite_wasm_unstack
  )
)

(assert_return (invoke "is_null-f") (i32.const 0))
(assert_return (invoke "is_null-g") (i32.const 0))
(assert_return (invoke "is_null-v") (i32.const 0))

(assert_return (invoke "call-f" (i32.const 4)) (i32.const 4))
(assert_return (invoke "call-g" (i32.const 4)) (i32.const 5))
(assert_return (invoke "call-v" (i32.const 4)) (i32.const 4))
(invoke "set-g")
(assert_return (invoke "call-v" (i32.const 4)) (i32.const 5))
(invoke "set-f")
(assert_return (invoke "call-v" (i32.const 4)) (i32.const 4))

(module
  (type (;0;) (func))
  (type (;1;) (func (param i64)))
  (type (;2;) (func (param i64 i64)))
  (type (;3;) (func (param i32 i64 i64) (result i32)))
  (import "spectest" "finite_wasm_gas" (func $finite_wasm_gas (;0;) (type 1)))
  (import "spectest" "finite_wasm_memory_copy" (func (;1;) (type 3)))
  (import "spectest" "finite_wasm_memory_fill" (func (;2;) (type 3)))
  (import "spectest" "finite_wasm_memory_init" (func (;3;) (type 3)))
  (import "spectest" "finite_wasm_table_copy" (func (;4;) (type 3)))
  (import "spectest" "finite_wasm_table_fill" (func (;5;) (type 3)))
  (import "spectest" "finite_wasm_table_init" (func (;6;) (type 3)))
  (import "spectest" "finite_wasm_stack" (func $finite_wasm_stack (;7;) (type 2)))
  (import "spectest" "finite_wasm_unstack" (func $finite_wasm_unstack (;8;) (type 2)))
  (table $t (;0;) 1 funcref)
  (global (;0;) funcref ref.func $f1)
  (export "f" (func $f2))
  (elem (;0;) (table $t) (i32.const 0) func $f3)
  (elem (;1;) (table $t) (i32.const 0) funcref (ref.func $f4))
  (elem (;2;) func $f5)
  (elem (;3;) funcref (ref.func $f6))
  (func $f1 (;9;) (type 0))
  (func $f2 (;10;) (type 0))
  (func $f3 (;11;) (type 0))
  (func $f4 (;12;) (type 0))
  (func $f5 (;13;) (type 0))
  (func $f6 (;14;) (type 0))
  (func (;15;) (type 0)
    block ;; label = @1
      i64.const 192
      i64.const 0
      call $finite_wasm_stack
      i64.const 7
      call $finite_wasm_gas
      ref.func $f1
      ref.func $f2
      ref.func $f3
      ref.func $f4
      ref.func $f5
      ref.func $f6
      i64.const 192
      i64.const 0
      call $finite_wasm_unstack
      return
    end
    i64.const 192
    i64.const 0
    call $finite_wasm_unstack
  )
)

