(module
  (type (;0;) (func (param i32) (result i32)))
  (type (;1;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 1)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 1)))
  (func (;2;) (type 0) (param $x i32) (result i32)
    i64.const 1000000000004
    call 1
    i64.const 2
    call 0
    local.get $x
  )
  (export "f" (func 2))
)
(register "M")

(module
  (type (;0;) (func (param i32) (result i32)))
  (type (;1;) (func))
  (type (;2;) (func (result i32)))
  (type (;3;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func $finite_wasm_gas (;0;) (type 3)))
  (import "spectest" "finite_wasm_stack" (func $finite_wasm_stack (;1;) (type 3)))
  (import "M" "f" (func $f (;2;) (type 0)))
  (func $g (;3;) (type 0) (param $x i32) (result i32)
    i64.const 0
    call $finite_wasm_stack
    i64.const 4
    call $finite_wasm_gas
    local.get $x
    i32.const 1
    i32.add
  )
  (func (;4;) (type 1)
    i64.const 1000000000008
    call $finite_wasm_stack
    i64.const 5
    call $finite_wasm_gas
    ref.func $ff1
    drop
    ref.func $ff2
    drop
  )
  (func $gf1 (;5;) (type 1)
    i64.const 1000000000032
    call $finite_wasm_stack
    i64.const 1
    call $finite_wasm_gas
  )
  (func $gf2 (;6;) (type 1)
    i64.const 1000000000000
    call $finite_wasm_stack
    i64.const 1
    call $finite_wasm_gas
  )
  (func $ff1 (;7;) (type 1)
    i64.const 1000000000000
    call $finite_wasm_stack
    i64.const 1
    call $finite_wasm_gas
  )
  (func $ff2 (;8;) (type 1)
    i64.const 1000000000000
    call $finite_wasm_stack
    i64.const 1
    call $finite_wasm_gas
  )
  (func (;9;) (type 2) (result i32)
    i64.const 1000000000000
    call $finite_wasm_stack
    i64.const 3
    call $finite_wasm_gas
    ref.func $f
    ref.is_null
  )
  (func (;10;) (type 2) (result i32)
    i64.const 1000000000032
    call $finite_wasm_stack
    i64.const 3
    call $finite_wasm_gas
    ref.func $g
    ref.is_null
  )
  (func (;11;) (type 2) (result i32)
    i64.const 1000000000032
    call $finite_wasm_stack
    i64.const 3
    call $finite_wasm_gas
    global.get $v
    ref.is_null
  )
  (func (;12;) (type 1)
    i64.const 1000000000032
    call $finite_wasm_stack
    i64.const 3
    call $finite_wasm_gas
    ref.func $f
    global.set $v
  )
  (func (;13;) (type 1)
    i64.const 1000000000032
    call $finite_wasm_stack
    i64.const 3
    call $finite_wasm_gas
    ref.func $g
    global.set $v
  )
  (func (;14;) (type 0) (param $x i32) (result i32)
    i64.const 1000000000032
    call $finite_wasm_stack
    i64.const 6
    call $finite_wasm_gas
    i32.const 0
    ref.func $f
    table.set $t
    local.get $x
    i32.const 0
    call_indirect (type 0)
    i64.const 1
    call $finite_wasm_gas
  )
  (func (;15;) (type 0) (param $x i32) (result i32)
    i64.const 1000000000036
    call $finite_wasm_stack
    i64.const 6
    call $finite_wasm_gas
    i32.const 0
    ref.func $g
    table.set $t
    local.get $x
    i32.const 0
    call_indirect (type 0)
    i64.const 1
    call $finite_wasm_gas
  )
  (func (;16;) (type 0) (param $x i32) (result i32)
    i64.const 1000000000036
    call $finite_wasm_stack
    i64.const 6
    call $finite_wasm_gas
    i32.const 0
    global.get $v
    table.set $t
    local.get $x
    i32.const 0
    call_indirect (type 0)
    i64.const 1
    call $finite_wasm_gas
  )
  (table $t (;0;) 1 funcref)
  (global (;0;) funcref ref.func $f)
  (global (;1;) funcref ref.func $g)
  (global $v (;2;) (mut funcref) ref.func $f)
  (global (;3;) funcref ref.func $gf1)
  (global (;4;) funcref ref.func $gf2)
  (export "is_null-f" (func 9))
  (export "is_null-g" (func 10))
  (export "is_null-v" (func 11))
  (export "set-f" (func 12))
  (export "set-g" (func 13))
  (export "call-f" (func 14))
  (export "call-g" (func 15))
  (export "call-v" (func 16))
  (elem (;0;) declare func $gf1 $ff1)
  (elem (;1;) declare funcref (ref.func $gf2) (ref.func $ff2))
  (elem (;2;) declare func $f $g)
)
(assert_return (invoke "is_null-f") (i32.const 0))
(assert_return (invoke "is_null-g") (i32.const 0))
(assert_return (invoke "is_null-v") (i32.const 0))

(assert_return (invoke "call-f" (i32.const 4)) (i32.const 4))
(assert_return (invoke "call-g" (i32.const 4)) (i32.const 5))
(assert_return (invoke "call-v" (i32.const 4)) (i32.const 4))
(invoke "set-g")
(assert_return (invoke "call-v" (i32.const 4)) (i32.const 5))
(invoke "set-f")
(assert_return (invoke "call-v" (i32.const 4)) (i32.const 4))

(module
  (type (;0;) (func))
  (type (;1;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func $finite_wasm_gas (;0;) (type 1)))
  (import "spectest" "finite_wasm_stack" (func $finite_wasm_stack (;1;) (type 1)))
  (func $f1 (;2;) (type 0)
    i64.const 1000000000000
    call $finite_wasm_stack
    i64.const 1
    call $finite_wasm_gas
  )
  (func $f2 (;3;) (type 0)
    i64.const 1000000000000
    call $finite_wasm_stack
    i64.const 1
    call $finite_wasm_gas
  )
  (func $f3 (;4;) (type 0)
    i64.const 1000000000000
    call $finite_wasm_stack
    i64.const 1
    call $finite_wasm_gas
  )
  (func $f4 (;5;) (type 0)
    i64.const 1000000000000
    call $finite_wasm_stack
    i64.const 1
    call $finite_wasm_gas
  )
  (func $f5 (;6;) (type 0)
    i64.const 1000000000000
    call $finite_wasm_stack
    i64.const 1
    call $finite_wasm_gas
  )
  (func $f6 (;7;) (type 0)
    i64.const 1000000000000
    call $finite_wasm_stack
    i64.const 1
    call $finite_wasm_gas
  )
  (func (;8;) (type 0)
    i64.const 1000000000192
    call $finite_wasm_stack
    i64.const 7
    call $finite_wasm_gas
    ref.func $f1
    ref.func $f2
    ref.func $f3
    ref.func $f4
    ref.func $f5
    ref.func $f6
    return
  )
  (table $t (;0;) 1 funcref)
  (global (;0;) funcref ref.func $f1)
  (export "f" (func $f2))
  (elem (;0;) (i32.const 0) func $f3)
  (elem (;1;) (i32.const 0) funcref (ref.func $f4))
  (elem (;2;) func $f5)
  (elem (;3;) funcref (ref.func $f6))
)
