(module
  (type (;0;) (func))
  (type (;1;) (func (param i64)))
  (type (;2;) (func (param i64 i64)))
  (type (;3;) (func (param i32 i64 i64) (result i32)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 1)))
  (import "spectest" "finite_wasm_memory_copy" (func (;1;) (type 3)))
  (import "spectest" "finite_wasm_memory_fill" (func (;2;) (type 3)))
  (import "spectest" "finite_wasm_memory_init" (func (;3;) (type 3)))
  (import "spectest" "finite_wasm_table_copy" (func (;4;) (type 3)))
  (import "spectest" "finite_wasm_table_fill" (func (;5;) (type 3)))
  (import "spectest" "finite_wasm_table_init" (func (;6;) (type 3)))
  (import "spectest" "finite_wasm_stack" (func (;7;) (type 2)))
  (import "spectest" "finite_wasm_unstack" (func (;8;) (type 2)))
  (memory (;0;) 1)
  (export "as-block-value" (func 9))
  (export "as-loop-value" (func 10))
  (export "as-br-value" (func 11))
  (export "as-br_if-value" (func 12))
  (export "as-br_if-value-cond" (func 13))
  (export "as-br_table-value" (func 14))
  (export "as-return-value" (func 15))
  (export "as-if-then" (func 16))
  (export "as-if-else" (func 17))
  (func (;9;) (type 0)
    block ;; label = @1
      i64.const 8
      i64.const 0
      call 7
      i64.const 4
      call 0
      block ;; label = @2
        i32.const 0
        i32.const 1
        i32.store
      end
    end
    i64.const 8
    i64.const 0
    call 8
  )
  (func (;10;) (type 0)
    block ;; label = @1
      i64.const 8
      i64.const 0
      call 7
      i64.const 4
      call 0
      loop ;; label = @2
        i32.const 0
        i32.const 1
        i32.store
      end
    end
    i64.const 8
    i64.const 0
    call 8
  )
  (func (;11;) (type 0)
    block ;; label = @1
      i64.const 8
      i64.const 0
      call 7
      i64.const 4
      call 0
      block ;; label = @2
        i32.const 0
        i32.const 1
        i32.store
        i64.const 1
        call 0
        br 0 (;@2;)
      end
    end
    i64.const 8
    i64.const 0
    call 8
  )
  (func (;12;) (type 0)
    block ;; label = @1
      i64.const 8
      i64.const 0
      call 7
      i64.const 4
      call 0
      block ;; label = @2
        i32.const 0
        i32.const 1
        i32.store
        i64.const 2
        call 0
        i32.const 1
        br_if 0 (;@2;)
      end
    end
    i64.const 8
    i64.const 0
    call 8
  )
  (func (;13;) (type 0)
    block ;; label = @1
      i64.const 12
      i64.const 0
      call 7
      i64.const 5
      call 0
      block ;; label = @2
        i32.const 6
        i32.const 0
        i32.const 1
        i32.store
        i64.const 1
        call 0
        br_if 0 (;@2;)
      end
    end
    i64.const 12
    i64.const 0
    call 8
  )
  (func (;14;) (type 0)
    block ;; label = @1
      i64.const 8
      i64.const 0
      call 7
      i64.const 4
      call 0
      block ;; label = @2
        i32.const 0
        i32.const 1
        i32.store
        i64.const 2
        call 0
        i32.const 1
        br_table 0 (;@2;)
      end
    end
    i64.const 8
    i64.const 0
    call 8
  )
  (func (;15;) (type 0)
    block ;; label = @1
      i64.const 8
      i64.const 0
      call 7
      i64.const 3
      call 0
      i32.const 0
      i32.const 1
      i32.store
      i64.const 1
      call 0
      i64.const 8
      i64.const 0
      call 8
      return
    end
    i64.const 8
    i64.const 0
    call 8
  )
  (func (;16;) (type 0)
    block ;; label = @1
      i64.const 8
      i64.const 0
      call 7
      i64.const 2
      call 0
      i32.const 1
      if ;; label = @2
        i64.const 3
        call 0
        i32.const 0
        i32.const 1
        i32.store
      end
    end
    i64.const 8
    i64.const 0
    call 8
  )
  (func (;17;) (type 0)
    block ;; label = @1
      i64.const 8
      i64.const 0
      call 7
      i64.const 2
      call 0
      i32.const 0
      if ;; label = @2
      else
        i64.const 3
        call 0
        i32.const 0
        i32.const 1
        i32.store
      end
    end
    i64.const 8
    i64.const 0
    call 8
  )
)

(assert_return (invoke "as-block-value"))
(assert_return (invoke "as-loop-value"))

(assert_return (invoke "as-br-value"))
(assert_return (invoke "as-br_if-value"))
(assert_return (invoke "as-br_if-value-cond"))
(assert_return (invoke "as-br_table-value"))

(assert_return (invoke "as-return-value"))

(assert_return (invoke "as-if-then"))
(assert_return (invoke "as-if-else"))

