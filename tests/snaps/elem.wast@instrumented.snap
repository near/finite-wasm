(module
  (type (;0;) (func))
  (type (;1;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func $finite_wasm_gas (;0;) (type 1)))
  (import "spectest" "finite_wasm_stack" (func $finite_wasm_stack (;1;) (type 1)))
  (func $f (;2;) (type 0)
    i64.const 1000000000000
    call $finite_wasm_stack
    i64.const 1
    call $finite_wasm_gas
  )
  (func $g (;3;) (type 0)
    i64.const 1000000000000
    call $finite_wasm_stack
    i64.const 1
    call $finite_wasm_gas
  )
  (table $t (;0;) 10 funcref)
  (elem (;0;) funcref)
  (elem (;1;) funcref (ref.func $f) (ref.func $f) (ref.null func) (ref.func $g))
  (elem (;2;) func)
  (elem (;3;) func $f $f $g $g)
  (elem $p1 (;4;) funcref)
  (elem $p2 (;5;) funcref (ref.func $f) (ref.func $f) (ref.null func) (ref.func $g))
  (elem $p3 (;6;) func)
  (elem $p4 (;7;) func $f $f $g $g)
  (elem (;8;) (i32.const 0) funcref)
  (elem (;9;) (i32.const 0) funcref (ref.func $f) (ref.null func))
  (elem (;10;) (i32.const 0) func)
  (elem (;11;) (i32.const 0) func $f $g)
  (elem (;12;) (i32.const 0) funcref)
  (elem (;13;) (i32.const 0) func $f $g)
  (elem (;14;) (i32.const 0) func)
  (elem (;15;) (i32.const 0) func $f $f)
  (elem (;16;) (i32.const 0) func)
  (elem (;17;) (i32.const 0) func $f $f)
  (elem (;18;) (i32.const 0) func)
  (elem (;19;) (i32.const 0) func $f $f)
  (elem (;20;) (i32.const 0) func)
  (elem (;21;) (i32.const 0) func $f $f)
  (elem (;22;) (i32.const 0) func)
  (elem (;23;) (i32.const 0) funcref (ref.func $f) (ref.null func))
  (elem (;24;) (i32.const 0) func $f $f)
  (elem (;25;) (i32.const 0) func $f $f)
  (elem (;26;) (i32.const 0) func)
  (elem (;27;) (i32.const 0) funcref (ref.func $f) (ref.null func))
  (elem (;28;) (i32.const 0) func $f $f)
  (elem (;29;) (i32.const 0) func $f $f)
  (elem (;30;) (i32.const 0) funcref (ref.func $f) (ref.null func))
  (elem $a1 (;31;) (i32.const 0) funcref)
  (elem $a2 (;32;) (i32.const 0) funcref (ref.func $f) (ref.null func))
  (elem $a3 (;33;) (i32.const 0) func)
  (elem $a4 (;34;) (i32.const 0) func $f $g)
  (elem $a9 (;35;) (i32.const 0) funcref)
  (elem $a10 (;36;) (i32.const 0) func $f $g)
  (elem $a11 (;37;) (i32.const 0) func)
  (elem $a12 (;38;) (i32.const 0) func $f $f)
  (elem $a13 (;39;) (i32.const 0) func)
  (elem $a14 (;40;) (i32.const 0) func $f $f)
  (elem $a15 (;41;) (i32.const 0) func)
  (elem $a16 (;42;) (i32.const 0) func $f $f)
  (elem $a17 (;43;) (i32.const 0) func)
  (elem $a18 (;44;) (i32.const 0) func $f $f)
  (elem $a19 (;45;) (i32.const 0) func)
  (elem $a20 (;46;) (i32.const 0) funcref (ref.func $f) (ref.null func))
  (elem $a21 (;47;) (i32.const 0) func $f $f)
  (elem $a22 (;48;) (i32.const 0) func $f $f)
  (elem $a23 (;49;) (i32.const 0) func)
  (elem $a24 (;50;) (i32.const 0) funcref (ref.func $f) (ref.null func))
  (elem $a25 (;51;) (i32.const 0) func $f $f)
  (elem $a26 (;52;) (i32.const 0) func $f $f)
  (elem (;53;) declare funcref)
  (elem (;54;) declare funcref (ref.func $f) (ref.func $f) (ref.null func) (ref.func $g))
  (elem (;55;) declare func)
  (elem (;56;) declare func $f $f $g $g)
  (elem $d1 (;57;) declare funcref)
  (elem $d2 (;58;) declare funcref (ref.func $f) (ref.func $f) (ref.null func) (ref.func $g))
  (elem $d3 (;59;) declare func)
  (elem $d4 (;60;) declare func $f $f $g $g)
)
(module
  (type (;0;) (func))
  (type (;1;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func $finite_wasm_gas (;0;) (type 1)))
  (import "spectest" "finite_wasm_stack" (func $finite_wasm_stack (;1;) (type 1)))
  (func $f (;2;) (type 0)
    i64.const 1000000000000
    call $finite_wasm_stack
    i64.const 1
    call $finite_wasm_gas
  )
  (func $g (;3;) (type 0)
    i64.const 1000000000000
    call $finite_wasm_stack
    i64.const 1
    call $finite_wasm_gas
  )
  (table $t (;0;) 3 3 funcref)
  (elem (;0;) (i32.const 0) funcref (ref.func $f) (ref.null func) (ref.func $g))
)
(module
  (type (;0;) (func))
  (type (;1;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func $finite_wasm_gas (;0;) (type 1)))
  (import "spectest" "finite_wasm_stack" (func $finite_wasm_stack (;1;) (type 1)))
  (func $f (;2;) (type 0)
    i64.const 1000000000000
    call $finite_wasm_stack
    i64.const 1
    call $finite_wasm_gas
  )
  (table (;0;) 10 funcref)
  (elem (;0;) (i32.const 0) func $f)
)
(module
  (type (;0;) (func))
  (type (;1;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func $finite_wasm_gas (;0;) (type 1)))
  (import "spectest" "finite_wasm_stack" (func $finite_wasm_stack (;1;) (type 1)))
  (import "spectest" "table" (table (;0;) 10 funcref))
  (func $f (;2;) (type 0)
    i64.const 1000000000000
    call $finite_wasm_stack
    i64.const 1
    call $finite_wasm_gas
  )
  (elem (;0;) (i32.const 0) func $f)
)
(module
  (type (;0;) (func))
  (type (;1;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func $finite_wasm_gas (;0;) (type 1)))
  (import "spectest" "finite_wasm_stack" (func $finite_wasm_stack (;1;) (type 1)))
  (func $f (;2;) (type 0)
    i64.const 1000000000000
    call $finite_wasm_stack
    i64.const 1
    call $finite_wasm_gas
  )
  (table (;0;) 10 funcref)
  (elem (;0;) (i32.const 0) func $f)
  (elem (;1;) (i32.const 3) func $f)
  (elem (;2;) (i32.const 7) func $f)
  (elem (;3;) (i32.const 5) func $f)
  (elem (;4;) (i32.const 3) func $f)
)
(module
  (type (;0;) (func))
  (type (;1;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func $finite_wasm_gas (;0;) (type 1)))
  (import "spectest" "finite_wasm_stack" (func $finite_wasm_stack (;1;) (type 1)))
  (import "spectest" "table" (table (;0;) 10 funcref))
  (func $f (;2;) (type 0)
    i64.const 1000000000000
    call $finite_wasm_stack
    i64.const 1
    call $finite_wasm_gas
  )
  (elem (;0;) (i32.const 9) func $f)
  (elem (;1;) (i32.const 3) func $f)
  (elem (;2;) (i32.const 7) func $f)
  (elem (;3;) (i32.const 3) func $f)
  (elem (;4;) (i32.const 5) func $f)
)
(module
  (type (;0;) (func))
  (type (;1;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func $finite_wasm_gas (;0;) (type 1)))
  (import "spectest" "finite_wasm_stack" (func $finite_wasm_stack (;1;) (type 1)))
  (import "spectest" "global_i32" (global (;0;) i32))
  (func $f (;2;) (type 0)
    i64.const 1000000000000
    call $finite_wasm_stack
    i64.const 1
    call $finite_wasm_gas
  )
  (table (;0;) 1000 funcref)
  (elem (;0;) (global.get 0) func $f)
)
(module
  (type (;0;) (func))
  (type (;1;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func $finite_wasm_gas (;0;) (type 1)))
  (import "spectest" "finite_wasm_stack" (func $finite_wasm_stack (;1;) (type 1)))
  (import "spectest" "global_i32" (global $g (;0;) i32))
  (func $f (;2;) (type 0)
    i64.const 1000000000000
    call $finite_wasm_stack
    i64.const 1
    call $finite_wasm_gas
  )
  (table (;0;) 1000 funcref)
  (elem (;0;) (global.get $g) func $f)
)
(module
  (type $out-i32 (;0;) (func (result i32)))
  (type (;1;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func $finite_wasm_gas (;0;) (type 1)))
  (import "spectest" "finite_wasm_stack" (func $finite_wasm_stack (;1;) (type 1)))
  (func $const-i32-a (;2;) (type $out-i32) (result i32)
    i64.const 1000000000004
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 65
  )
  (func $const-i32-b (;3;) (type $out-i32) (result i32)
    i64.const 1000000000004
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 66
  )
  (func (;4;) (type $out-i32) (result i32)
    i64.const 1000000000008
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 7
    call_indirect (type $out-i32)
    i64.const 1
    call $finite_wasm_gas
  )
  (func (;5;) (type $out-i32) (result i32)
    i64.const 1000000000008
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 9
    call_indirect (type $out-i32)
    i64.const 1
    call $finite_wasm_gas
  )
  (table (;0;) 10 funcref)
  (export "call-7" (func 4))
  (export "call-9" (func 5))
  (elem (;0;) (i32.const 7) func $const-i32-a)
  (elem (;1;) (i32.const 9) func $const-i32-b)
)
(assert_return (invoke "call-7") (i32.const 65))
(assert_return (invoke "call-9") (i32.const 66))

;; Corner cases

(module
  (type (;0;) (func))
  (type (;1;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func $finite_wasm_gas (;0;) (type 1)))
  (import "spectest" "finite_wasm_stack" (func $finite_wasm_stack (;1;) (type 1)))
  (func $f (;2;) (type 0)
    i64.const 1000000000000
    call $finite_wasm_stack
    i64.const 1
    call $finite_wasm_gas
  )
  (table (;0;) 10 funcref)
  (elem (;0;) (i32.const 9) func $f)
)
(module
  (type (;0;) (func))
  (type (;1;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func $finite_wasm_gas (;0;) (type 1)))
  (import "spectest" "finite_wasm_stack" (func $finite_wasm_stack (;1;) (type 1)))
  (import "spectest" "table" (table (;0;) 10 funcref))
  (func $f (;2;) (type 0)
    i64.const 1000000000000
    call $finite_wasm_stack
    i64.const 1
    call $finite_wasm_gas
  )
  (elem (;0;) (i32.const 9) func $f)
)
(module
  (table (;0;) 0 funcref)
  (elem (;0;) (i32.const 0) func)
)
(module
  (type (;0;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 0)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 0)))
  (import "spectest" "table" (table (;0;) 0 funcref))
  (elem (;0;) (i32.const 0) func)
)
(module
  (table (;0;) 0 0 funcref)
  (elem (;0;) (i32.const 0) func)
)
(module
  (table (;0;) 20 funcref)
  (elem (;0;) (i32.const 20) func)
)
(module
  (type (;0;) (func))
  (type (;1;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func $finite_wasm_gas (;0;) (type 1)))
  (import "spectest" "finite_wasm_stack" (func $finite_wasm_stack (;1;) (type 1)))
  (import "spectest" "table" (table (;0;) 0 funcref))
  (func $f (;2;) (type 0)
    i64.const 1000000000000
    call $finite_wasm_stack
    i64.const 1
    call $finite_wasm_gas
  )
  (elem (;0;) (i32.const 0) func $f)
)
(module
  (type (;0;) (func))
  (type (;1;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func $finite_wasm_gas (;0;) (type 1)))
  (import "spectest" "finite_wasm_stack" (func $finite_wasm_stack (;1;) (type 1)))
  (import "spectest" "table" (table (;0;) 0 100 funcref))
  (func $f (;2;) (type 0)
    i64.const 1000000000000
    call $finite_wasm_stack
    i64.const 1
    call $finite_wasm_gas
  )
  (elem (;0;) (i32.const 0) func $f)
)
(module
  (type (;0;) (func))
  (type (;1;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func $finite_wasm_gas (;0;) (type 1)))
  (import "spectest" "finite_wasm_stack" (func $finite_wasm_stack (;1;) (type 1)))
  (import "spectest" "table" (table (;0;) 0 funcref))
  (func $f (;2;) (type 0)
    i64.const 1000000000000
    call $finite_wasm_stack
    i64.const 1
    call $finite_wasm_gas
  )
  (elem (;0;) (i32.const 1) func $f)
)
(module
  (type (;0;) (func))
  (type (;1;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func $finite_wasm_gas (;0;) (type 1)))
  (import "spectest" "finite_wasm_stack" (func $finite_wasm_stack (;1;) (type 1)))
  (import "spectest" "table" (table (;0;) 0 30 funcref))
  (func $f (;2;) (type 0)
    i64.const 1000000000000
    call $finite_wasm_stack
    i64.const 1
    call $finite_wasm_gas
  )
  (elem (;0;) (i32.const 1) func $f)
)
(assert_trap
  (module
    (table 0 funcref)
    (func $f)
    (elem (i32.const 0) $f)
  )
  "out of bounds table access"
)

(assert_trap
  (module
    (table 0 0 funcref)
    (func $f)
    (elem (i32.const 0) $f)
  )
  "out of bounds table access"
)

(assert_trap
  (module
    (table 0 1 funcref)
    (func $f)
    (elem (i32.const 0) $f)
  )
  "out of bounds table access"
)

(assert_trap
  (module
    (table 0 funcref)
    (elem (i32.const 1))
  )
  "out of bounds table access"
)
(assert_trap
  (module
    (table 10 funcref)
    (func $f)
    (elem (i32.const 10) $f)
  )
  "out of bounds table access"
)
(assert_trap
  (module
    (import "spectest" "table" (table 10 funcref))
    (func $f)
    (elem (i32.const 10) $f)
  )
  "out of bounds table access"
)

(assert_trap
  (module
    (table 10 20 funcref)
    (func $f)
    (elem (i32.const 10) $f)
  )
  "out of bounds table access"
)
(assert_trap
  (module
    (import "spectest" "table" (table 10 funcref))
    (func $f)
    (elem (i32.const 10) $f)
  )
  "out of bounds table access"
)

(assert_trap
  (module
    (table 10 funcref)
    (func $f)
    (elem (i32.const -1) $f)
  )
  "out of bounds table access"
)
(assert_trap
  (module
    (import "spectest" "table" (table 10 funcref))
    (func $f)
    (elem (i32.const -1) $f)
  )
  "out of bounds table access"
)

(assert_trap
  (module
    (table 10 funcref)
    (func $f)
    (elem (i32.const -10) $f)
  )
  "out of bounds table access"
)
(assert_trap
  (module
    (import "spectest" "table" (table 10 funcref))
    (func $f)
    (elem (i32.const -10) $f)
  )
  "out of bounds table access"
)

;; Implicitly dropped elements

(module
  (type (;0;) (func))
  (type (;1;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func $finite_wasm_gas (;0;) (type 1)))
  (import "spectest" "finite_wasm_stack" (func $finite_wasm_stack (;1;) (type 1)))
  (func $f (;2;) (type 0)
    i64.const 1000000000000
    call $finite_wasm_stack
    i64.const 1
    call $finite_wasm_gas
  )
  (func (;3;) (type 0)
    i64.const 1000000000012
    call $finite_wasm_stack
    i64.const 3
    call $finite_wasm_gas
    i32.const 0
    i32.const 0
    i32.const 1
    i64.const 1
    call $finite_wasm_gas
    table.init $e
    i64.const 1
    call $finite_wasm_gas
  )
  (table (;0;) 10 funcref)
  (export "init" (func 3))
  (elem $e (;0;) (i32.const 0) func $f)
)
(assert_trap (invoke "init") "out of bounds table access")

(module
  (type (;0;) (func))
  (type (;1;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func $finite_wasm_gas (;0;) (type 1)))
  (import "spectest" "finite_wasm_stack" (func $finite_wasm_stack (;1;) (type 1)))
  (func $f (;2;) (type 0)
    i64.const 1000000000000
    call $finite_wasm_stack
    i64.const 1
    call $finite_wasm_gas
  )
  (func (;3;) (type 0)
    i64.const 1000000000012
    call $finite_wasm_stack
    i64.const 3
    call $finite_wasm_gas
    i32.const 0
    i32.const 0
    i32.const 1
    i64.const 1
    call $finite_wasm_gas
    table.init $e
    i64.const 1
    call $finite_wasm_gas
  )
  (table (;0;) 10 funcref)
  (export "init" (func 3))
  (elem $e (;0;) declare func $f)
)
(assert_trap (invoke "init") "out of bounds table access")

;; Element without table

(module
  (type $out-i32 (;0;) (func (result i32)))
  (type (;1;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func $finite_wasm_gas (;0;) (type 1)))
  (import "spectest" "finite_wasm_stack" (func $finite_wasm_stack (;1;) (type 1)))
  (func $const-i32-a (;2;) (type $out-i32) (result i32)
    i64.const 1000000000004
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 65
  )
  (func $const-i32-b (;3;) (type $out-i32) (result i32)
    i64.const 1000000000004
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 66
  )
  (func (;4;) (type $out-i32) (result i32)
    i64.const 1000000000008
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 9
    call_indirect (type $out-i32)
    i64.const 1
    call $finite_wasm_gas
  )
  (table (;0;) 10 funcref)
  (export "call-overwritten" (func 4))
  (elem (;0;) (i32.const 9) func $const-i32-a)
  (elem (;1;) (i32.const 9) func $const-i32-b)
)
(assert_return (invoke "call-overwritten") (i32.const 66))

(module
  (type $out-i32 (;0;) (func (result i32)))
  (type (;1;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func $finite_wasm_gas (;0;) (type 1)))
  (import "spectest" "finite_wasm_stack" (func $finite_wasm_stack (;1;) (type 1)))
  (import "spectest" "table" (table (;0;) 10 funcref))
  (func $const-i32-a (;2;) (type $out-i32) (result i32)
    i64.const 1000000000004
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 65
  )
  (func $const-i32-b (;3;) (type $out-i32) (result i32)
    i64.const 1000000000004
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 66
  )
  (func (;4;) (type $out-i32) (result i32)
    i64.const 1000000000008
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 9
    call_indirect (type $out-i32)
    i64.const 1
    call $finite_wasm_gas
  )
  (export "call-overwritten-element" (func 4))
  (elem (;0;) (i32.const 9) func $const-i32-a)
  (elem (;1;) (i32.const 9) func $const-i32-b)
)
(assert_return (invoke "call-overwritten-element") (i32.const 66))

;; Element sections across multiple modules change the same table

(module $module1
  (type $out-i32 (;0;) (func (result i32)))
  (type (;1;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func $finite_wasm_gas (;0;) (type 1)))
  (import "spectest" "finite_wasm_stack" (func $finite_wasm_stack (;1;) (type 1)))
  (func $const-i32-a (;2;) (type $out-i32) (result i32)
    i64.const 1000000000004
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 65
  )
  (func $const-i32-b (;3;) (type $out-i32) (result i32)
    i64.const 1000000000004
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 66
  )
  (func (;4;) (type $out-i32) (result i32)
    i64.const 1000000000008
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 7
    call_indirect (type $out-i32)
    i64.const 1
    call $finite_wasm_gas
  )
  (func (;5;) (type $out-i32) (result i32)
    i64.const 1000000000008
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 8
    call_indirect (type $out-i32)
    i64.const 1
    call $finite_wasm_gas
  )
  (func (;6;) (type $out-i32) (result i32)
    i64.const 1000000000008
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 9
    call_indirect (type $out-i32)
    i64.const 1
    call $finite_wasm_gas
  )
  (table (;0;) 10 funcref)
  (export "shared-table" (table 0))
  (export "call-7" (func 4))
  (export "call-8" (func 5))
  (export "call-9" (func 6))
  (elem (;0;) (i32.const 8) func $const-i32-a)
  (elem (;1;) (i32.const 9) func $const-i32-b)
)
(register "module1" $module1)

(assert_trap (invoke $module1 "call-7") "uninitialized element")
(assert_return (invoke $module1 "call-8") (i32.const 65))
(assert_return (invoke $module1 "call-9") (i32.const 66))

(module $module2
  (type $out-i32 (;0;) (func (result i32)))
  (type (;1;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func $finite_wasm_gas (;0;) (type 1)))
  (import "spectest" "finite_wasm_stack" (func $finite_wasm_stack (;1;) (type 1)))
  (import "module1" "shared-table" (table (;0;) 10 funcref))
  (func $const-i32-c (;2;) (type $out-i32) (result i32)
    i64.const 1000000000004
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 67
  )
  (func $const-i32-d (;3;) (type $out-i32) (result i32)
    i64.const 1000000000004
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 68
  )
  (elem (;0;) (i32.const 7) func $const-i32-c)
  (elem (;1;) (i32.const 8) func $const-i32-d)
)
(assert_return (invoke $module1 "call-7") (i32.const 67))
(assert_return (invoke $module1 "call-8") (i32.const 68))
(assert_return (invoke $module1 "call-9") (i32.const 66))

(module $module3
  (type $out-i32 (;0;) (func (result i32)))
  (type (;1;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func $finite_wasm_gas (;0;) (type 1)))
  (import "spectest" "finite_wasm_stack" (func $finite_wasm_stack (;1;) (type 1)))
  (import "module1" "shared-table" (table (;0;) 10 funcref))
  (func $const-i32-e (;2;) (type $out-i32) (result i32)
    i64.const 1000000000004
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 69
  )
  (func $const-i32-f (;3;) (type $out-i32) (result i32)
    i64.const 1000000000004
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 70
  )
  (elem (;0;) (i32.const 8) func $const-i32-e)
  (elem (;1;) (i32.const 9) func $const-i32-f)
)
(assert_return (invoke $module1 "call-7") (i32.const 67))
(assert_return (invoke $module1 "call-8") (i32.const 69))
(assert_return (invoke $module1 "call-9") (i32.const 70))
