(module
  (type (;0;) (func (param i64) (result i64)))
  (type (;1;) (func (result i32)))
  (type (;2;) (func))
  (type (;3;) (func (param i64)))
  (type (;4;) (func (param i64 i64)))
  (type (;5;) (func (param i32 i64 i64) (result i32)))
  (import "spectest" "finite_wasm_gas" (func $finite_wasm_gas (;0;) (type 3)))
  (import "spectest" "finite_wasm_memory_copy" (func (;1;) (type 5)))
  (import "spectest" "finite_wasm_memory_fill" (func (;2;) (type 5)))
  (import "spectest" "finite_wasm_memory_init" (func (;3;) (type 5)))
  (import "spectest" "finite_wasm_table_copy" (func (;4;) (type 5)))
  (import "spectest" "finite_wasm_table_fill" (func (;5;) (type 5)))
  (import "spectest" "finite_wasm_table_init" (func (;6;) (type 5)))
  (import "spectest" "finite_wasm_stack" (func $finite_wasm_stack (;7;) (type 4)))
  (import "spectest" "finite_wasm_unstack" (func $finite_wasm_unstack (;8;) (type 4)))
  (global $temp (;0;) (mut i32) i32.const 0)
  (export "fac-expr" (func 9))
  (export "fac-stack" (func 10))
  (export "fac-stack-raw" (func 11))
  (export "fac-mixed" (func 12))
  (export "fac-mixed-raw" (func 13))
  (export "not-quite-a-tree" (func 16))
  (func (;9;) (type 0) (param $n i64) (result i64)
    (local $i i64) (local $res i64)
    block $done (result i64)
      i64.const 16
      i64.const 3
      call $finite_wasm_stack
      i64.const 5
      call $finite_wasm_gas
      local.get $n
      local.set $i
      i64.const 1
      local.set $res
      block $loop
        loop ;; label = @3
          i64.const 5
          call $finite_wasm_gas
          local.get $i
          i64.const 0
          i64.eq
          if ;; label = @4
            i64.const 1
            call $finite_wasm_gas
            br $loop
          else
            i64.const 8
            call $finite_wasm_gas
            local.get $i
            local.get $res
            i64.mul
            local.set $res
            local.get $i
            i64.const 1
            i64.sub
            local.set $i
          end
          i64.const 1
          call $finite_wasm_gas
          br 0 (;@3;)
        end
      end
      i64.const 1
      call $finite_wasm_gas
      local.get $res
    end
    i64.const 16
    i64.const 3
    call $finite_wasm_unstack
  )
  (func (;10;) (type 0) (param $n i64) (result i64)
    (local $i i64) (local $res i64)
    block $done (result i64)
      i64.const 16
      i64.const 3
      call $finite_wasm_stack
      i64.const 5
      call $finite_wasm_gas
      local.get $n
      local.set $i
      i64.const 1
      local.set $res
      block $loop
        loop ;; label = @3
          i64.const 5
          call $finite_wasm_gas
          local.get $i
          i64.const 0
          i64.eq
          if ;; label = @4
            i64.const 1
            call $finite_wasm_gas
            br $loop
          else
            i64.const 8
            call $finite_wasm_gas
            local.get $i
            local.get $res
            i64.mul
            local.set $res
            local.get $i
            i64.const 1
            i64.sub
            local.set $i
          end
          i64.const 1
          call $finite_wasm_gas
          br 0 (;@3;)
        end
      end
      i64.const 1
      call $finite_wasm_gas
      local.get $res
    end
    i64.const 16
    i64.const 3
    call $finite_wasm_unstack
  )
  (func (;11;) (type 0) (param $n i64) (result i64)
    (local $i i64) (local $res i64)
    block $done (result i64)
      i64.const 16
      i64.const 3
      call $finite_wasm_stack
      i64.const 5
      call $finite_wasm_gas
      local.get $n
      local.set $i
      i64.const 1
      local.set $res
      block $loop
        loop $body
          i64.const 5
          call $finite_wasm_gas
          local.get $i
          i64.const 0
          i64.eq
          if ;; label = @4
            i64.const 1
            call $finite_wasm_gas
            br $loop
          else
            i64.const 8
            call $finite_wasm_gas
            local.get $i
            local.get $res
            i64.mul
            local.set $res
            local.get $i
            i64.const 1
            i64.sub
            local.set $i
          end
          i64.const 1
          call $finite_wasm_gas
          br $body
        end
      end
      i64.const 1
      call $finite_wasm_gas
      local.get $res
    end
    i64.const 16
    i64.const 3
    call $finite_wasm_unstack
  )
  (func (;12;) (type 0) (param $n i64) (result i64)
    (local $i i64) (local $res i64)
    block $done (result i64)
      i64.const 16
      i64.const 3
      call $finite_wasm_stack
      i64.const 5
      call $finite_wasm_gas
      local.get $n
      local.set $i
      i64.const 1
      local.set $res
      block $loop
        loop ;; label = @3
          i64.const 5
          call $finite_wasm_gas
          local.get $i
          i64.const 0
          i64.eq
          if ;; label = @4
            i64.const 1
            call $finite_wasm_gas
            br $loop
          else
            i64.const 8
            call $finite_wasm_gas
            local.get $i
            local.get $res
            i64.mul
            local.set $res
            local.get $i
            i64.const 1
            i64.sub
            local.set $i
          end
          i64.const 1
          call $finite_wasm_gas
          br 0 (;@3;)
        end
      end
      i64.const 1
      call $finite_wasm_gas
      local.get $res
    end
    i64.const 16
    i64.const 3
    call $finite_wasm_unstack
  )
  (func (;13;) (type 0) (param $n i64) (result i64)
    (local $i i64) (local $res i64)
    block $done (result i64)
      i64.const 16
      i64.const 3
      call $finite_wasm_stack
      i64.const 5
      call $finite_wasm_gas
      local.get $n
      local.set $i
      i64.const 1
      local.set $res
      block $loop
        loop ;; label = @3
          i64.const 5
          call $finite_wasm_gas
          local.get $i
          i64.const 0
          i64.eq
          if ;; label = @4
            i64.const 1
            call $finite_wasm_gas
            br $loop
          else
            i64.const 8
            call $finite_wasm_gas
            local.get $i
            local.get $res
            i64.mul
            local.set $res
            local.get $i
            i64.const 1
            i64.sub
            local.set $i
          end
          i64.const 1
          call $finite_wasm_gas
          br 0 (;@3;)
        end
      end
      i64.const 1
      call $finite_wasm_gas
      local.get $res
    end
    i64.const 16
    i64.const 3
    call $finite_wasm_unstack
  )
  (func $add_one_to_global (;14;) (type 1) (result i32)
    (local i32)
    block (result i32) ;; label = @1
      i64.const 8
      i64.const 1
      call $finite_wasm_stack
      i64.const 5
      call $finite_wasm_gas
      i32.const 1
      global.get $temp
      i32.add
      global.set $temp
      global.get $temp
    end
    i64.const 8
    i64.const 1
    call $finite_wasm_unstack
  )
  (func $add_one_to_global_and_drop (;15;) (type 2)
    block ;; label = @1
      i64.const 4
      i64.const 0
      call $finite_wasm_stack
      i64.const 1
      call $finite_wasm_gas
      call $add_one_to_global
      i64.const 1
      call $finite_wasm_gas
      drop
    end
    i64.const 4
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;16;) (type 1) (result i32)
    block (result i32) ;; label = @1
      i64.const 8
      i64.const 0
      call $finite_wasm_stack
      i64.const 1
      call $finite_wasm_gas
      call $add_one_to_global
      i64.const 1
      call $finite_wasm_gas
      call $add_one_to_global
      i64.const 1
      call $finite_wasm_gas
      call $add_one_to_global_and_drop
      i64.const 1
      call $finite_wasm_gas
      i32.add
    end
    i64.const 8
    i64.const 0
    call $finite_wasm_unstack
  )
)

(assert_return (invoke "fac-expr" (i64.const 25)) (i64.const 7034535277573963776))
(assert_return (invoke "fac-stack" (i64.const 25)) (i64.const 7034535277573963776))
(assert_return (invoke "fac-mixed" (i64.const 25)) (i64.const 7034535277573963776))

(assert_return (invoke "not-quite-a-tree") (i32.const 3))
(assert_return (invoke "not-quite-a-tree") (i32.const 9))


;; Syntax of flat call_indirect

(module
  (type $proc (;0;) (func))
  (type (;1;) (func (param i32)))
  (type (;2;) (func (result i32)))
  (type (;3;) (func (param i64)))
  (type (;4;) (func (param i64 i64)))
  (type (;5;) (func (param i32 i64 i64) (result i32)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 3)))
  (import "spectest" "finite_wasm_memory_copy" (func (;1;) (type 5)))
  (import "spectest" "finite_wasm_memory_fill" (func (;2;) (type 5)))
  (import "spectest" "finite_wasm_memory_init" (func (;3;) (type 5)))
  (import "spectest" "finite_wasm_table_copy" (func (;4;) (type 5)))
  (import "spectest" "finite_wasm_table_fill" (func (;5;) (type 5)))
  (import "spectest" "finite_wasm_table_init" (func (;6;) (type 5)))
  (import "spectest" "finite_wasm_stack" (func (;7;) (type 4)))
  (import "spectest" "finite_wasm_unstack" (func (;8;) (type 4)))
  (table (;0;) 1 funcref)
  (func (;9;) (type $proc)
    block ;; label = @1
      i64.const 8
      i64.const 0
      call 7
      i64.const 3
      call 0
      block ;; label = @2
        i32.const 0
        call_indirect (type $proc)
        i64.const 3
        call 0
      end
      loop ;; label = @2
        i32.const 0
        call_indirect (type $proc)
        i64.const 2
        call 0
      end
      i32.const 0
      if ;; label = @2
        i64.const 2
        call 0
        i32.const 0
        call_indirect (type $proc)
      end
      i64.const 2
      call 0
      i32.const 0
      if ;; label = @2
        i64.const 2
        call 0
        i32.const 0
        call_indirect (type $proc)
      else
        i64.const 2
        call 0
        i32.const 0
        call_indirect (type $proc)
      end
      i64.const 3
      call 0
      block ;; label = @2
        i32.const 0
        call_indirect (type $proc)
        i64.const 3
        call 0
      end
      loop ;; label = @2
        i32.const 0
        call_indirect (type $proc)
        i64.const 2
        call 0
      end
      i32.const 0
      if ;; label = @2
        i64.const 2
        call 0
        i32.const 0
        call_indirect (type $proc)
      end
      i64.const 2
      call 0
      i32.const 0
      if ;; label = @2
        i64.const 2
        call 0
        i32.const 0
        call_indirect (type $proc)
      else
        i64.const 2
        call 0
        i32.const 0
        call_indirect (type $proc)
      end
      i64.const 4
      call 0
      block ;; label = @2
        i32.const 0
        i32.const 0
        call_indirect (type 1)
        i64.const 4
        call 0
      end
      loop ;; label = @2
        i32.const 0
        i32.const 0
        call_indirect (type 1)
        i64.const 2
        call 0
      end
      i32.const 0
      if ;; label = @2
        i64.const 3
        call 0
        i32.const 0
        i32.const 0
        call_indirect (type 1)
      end
      i64.const 2
      call 0
      i32.const 0
      if ;; label = @2
        i64.const 3
        call 0
        i32.const 0
        i32.const 0
        call_indirect (type 1)
      else
        i64.const 3
        call 0
        i32.const 0
        i32.const 0
        call_indirect (type 1)
      end
      i64.const 3
      call 0
      block (result i32) ;; label = @2
        i32.const 0
        call_indirect (type 2)
        i64.const 4
        call 0
      end
      drop
      loop (result i32) ;; label = @2
        i32.const 0
        call_indirect (type 2)
        i64.const 3
        call 0
      end
      drop
      i32.const 0
      if (result i32) ;; label = @2
        i64.const 2
        call 0
        i32.const 0
        call_indirect (type 2)
      else
        i64.const 2
        call 0
        i32.const 0
        call_indirect (type 2)
      end
      i64.const 4
      call 0
      drop
      block ;; label = @2
        i32.const 0
        call_indirect (type $proc)
        i64.const 3
        call 0
      end
      loop ;; label = @2
        i32.const 0
        call_indirect (type $proc)
        i64.const 2
        call 0
      end
      i32.const 0
      if ;; label = @2
        i64.const 2
        call 0
        i32.const 0
        call_indirect (type $proc)
      end
      i64.const 2
      call 0
      i32.const 0
      if ;; label = @2
        i64.const 2
        call 0
        i32.const 0
        call_indirect (type $proc)
      else
        i64.const 2
        call 0
        i32.const 0
        call_indirect (type $proc)
      end
      i64.const 3
      call 0
      block ;; label = @2
        i32.const 0
        call_indirect (type $proc)
        i64.const 3
        call 0
      end
      loop ;; label = @2
        i32.const 0
        call_indirect (type $proc)
        i64.const 2
        call 0
      end
      i32.const 0
      if ;; label = @2
        i64.const 2
        call 0
        i32.const 0
        call_indirect (type $proc)
      end
      i64.const 2
      call 0
      i32.const 0
      if ;; label = @2
        i64.const 2
        call 0
        i32.const 0
        call_indirect (type $proc)
      else
        i64.const 2
        call 0
        i32.const 0
        call_indirect (type $proc)
      end
      i64.const 3
      call 0
      block ;; label = @2
        i32.const 0
        call_indirect (type $proc)
        i64.const 3
        call 0
      end
      loop ;; label = @2
        i32.const 0
        call_indirect (type $proc)
        i64.const 2
        call 0
      end
      i32.const 0
      if ;; label = @2
        i64.const 2
        call 0
        i32.const 0
        call_indirect (type $proc)
      end
      i64.const 2
      call 0
      i32.const 0
      if ;; label = @2
        i64.const 2
        call 0
        i32.const 0
        call_indirect (type $proc)
      else
        i64.const 2
        call 0
        i32.const 0
        call_indirect (type $proc)
      end
      i64.const 4
      call 0
      block ;; label = @2
        i32.const 0
        i32.const 0
        call_indirect (type 1)
        i64.const 4
        call 0
      end
      loop ;; label = @2
        i32.const 0
        i32.const 0
        call_indirect (type 1)
        i64.const 2
        call 0
      end
      i32.const 0
      if ;; label = @2
        i64.const 3
        call 0
        i32.const 0
        i32.const 0
        call_indirect (type 1)
      end
      i64.const 2
      call 0
      i32.const 0
      if ;; label = @2
        i64.const 3
        call 0
        i32.const 0
        i32.const 0
        call_indirect (type 1)
      else
        i64.const 3
        call 0
        i32.const 0
        i32.const 0
        call_indirect (type 1)
      end
      i64.const 3
      call 0
      block (result i32) ;; label = @2
        i32.const 0
        call_indirect (type 2)
        i64.const 4
        call 0
      end
      drop
      loop (result i32) ;; label = @2
        i32.const 0
        call_indirect (type 2)
        i64.const 3
        call 0
      end
      drop
      i32.const 0
      if (result i32) ;; label = @2
        i64.const 2
        call 0
        i32.const 0
        call_indirect (type 2)
      else
        i64.const 2
        call 0
        i32.const 0
        call_indirect (type 2)
      end
      i64.const 4
      call 0
      drop
      block ;; label = @2
        i32.const 0
        call_indirect (type $proc)
        i64.const 3
        call 0
      end
      loop ;; label = @2
        i32.const 0
        call_indirect (type $proc)
        i64.const 2
        call 0
      end
      i32.const 0
      if ;; label = @2
        i64.const 2
        call 0
        i32.const 0
        call_indirect (type $proc)
      end
      i64.const 2
      call 0
      i32.const 0
      if ;; label = @2
        i64.const 2
        call 0
        i32.const 0
        call_indirect (type $proc)
      else
        i64.const 2
        call 0
        i32.const 0
        call_indirect (type $proc)
      end
      i64.const 2
      call 0
      i32.const 0
      call_indirect (type $proc)
    end
    i64.const 8
    i64.const 0
    call 8
  )
)

