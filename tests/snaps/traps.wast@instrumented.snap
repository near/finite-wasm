(module
  (type (;0;) (func (param i32 i32)))
  (type (;1;) (func (param i64 i64)))
  (type (;2;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 2)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 2)))
  (func (;2;) (type 0) (param $x i32) (param $y i32)
    i64.const 1000001000008
    call 1
    i64.const 3
    call 0
    local.get $x
    local.get $y
    i32.div_s
    i64.const 2
    call 0
    drop
  )
  (func (;3;) (type 0) (param $x i32) (param $y i32)
    i64.const 1000001000008
    call 1
    i64.const 3
    call 0
    local.get $x
    local.get $y
    i32.div_u
    i64.const 2
    call 0
    drop
  )
  (func (;4;) (type 1) (param $x i64) (param $y i64)
    i64.const 1000001000016
    call 1
    i64.const 3
    call 0
    local.get $x
    local.get $y
    i64.div_s
    i64.const 2
    call 0
    drop
  )
  (func (;5;) (type 1) (param $x i64) (param $y i64)
    i64.const 1000001000016
    call 1
    i64.const 3
    call 0
    local.get $x
    local.get $y
    i64.div_u
    i64.const 2
    call 0
    drop
  )
  (export "no_dce.i32.div_s" (func 2))
  (export "no_dce.i32.div_u" (func 3))
  (export "no_dce.i64.div_s" (func 4))
  (export "no_dce.i64.div_u" (func 5))
)
(assert_trap (invoke "no_dce.i32.div_s" (i32.const 1) (i32.const 0)) "integer divide by zero")
(assert_trap (invoke "no_dce.i32.div_u" (i32.const 1) (i32.const 0)) "integer divide by zero")
(assert_trap (invoke "no_dce.i64.div_s" (i64.const 1) (i64.const 0)) "integer divide by zero")
(assert_trap (invoke "no_dce.i64.div_u" (i64.const 1) (i64.const 0)) "integer divide by zero")
(assert_trap (invoke "no_dce.i32.div_s" (i32.const 0x80000000) (i32.const -1)) "integer overflow")
(assert_trap (invoke "no_dce.i64.div_s" (i64.const 0x8000000000000000) (i64.const -1)) "integer overflow")

(module
  (type (;0;) (func (param i32 i32)))
  (type (;1;) (func (param i64 i64)))
  (type (;2;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 2)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 2)))
  (func (;2;) (type 0) (param $x i32) (param $y i32)
    i64.const 1000001000008
    call 1
    i64.const 3
    call 0
    local.get $x
    local.get $y
    i32.rem_s
    i64.const 2
    call 0
    drop
  )
  (func (;3;) (type 0) (param $x i32) (param $y i32)
    i64.const 1000001000008
    call 1
    i64.const 3
    call 0
    local.get $x
    local.get $y
    i32.rem_u
    i64.const 2
    call 0
    drop
  )
  (func (;4;) (type 1) (param $x i64) (param $y i64)
    i64.const 1000001000016
    call 1
    i64.const 3
    call 0
    local.get $x
    local.get $y
    i64.rem_s
    i64.const 2
    call 0
    drop
  )
  (func (;5;) (type 1) (param $x i64) (param $y i64)
    i64.const 1000001000016
    call 1
    i64.const 3
    call 0
    local.get $x
    local.get $y
    i64.rem_u
    i64.const 2
    call 0
    drop
  )
  (export "no_dce.i32.rem_s" (func 2))
  (export "no_dce.i32.rem_u" (func 3))
  (export "no_dce.i64.rem_s" (func 4))
  (export "no_dce.i64.rem_u" (func 5))
)
(assert_trap (invoke "no_dce.i32.rem_s" (i32.const 1) (i32.const 0)) "integer divide by zero")
(assert_trap (invoke "no_dce.i32.rem_u" (i32.const 1) (i32.const 0)) "integer divide by zero")
(assert_trap (invoke "no_dce.i64.rem_s" (i64.const 1) (i64.const 0)) "integer divide by zero")
(assert_trap (invoke "no_dce.i64.rem_u" (i64.const 1) (i64.const 0)) "integer divide by zero")

(module
  (type (;0;) (func (param f32)))
  (type (;1;) (func (param f64)))
  (type (;2;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 2)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 2)))
  (func (;2;) (type 0) (param $x f32)
    i64.const 1000000000004
    call 1
    i64.const 2
    call 0
    local.get $x
    i32.trunc_f32_s
    i64.const 2
    call 0
    drop
  )
  (func (;3;) (type 0) (param $x f32)
    i64.const 1000000000004
    call 1
    i64.const 2
    call 0
    local.get $x
    i32.trunc_f32_u
    i64.const 2
    call 0
    drop
  )
  (func (;4;) (type 1) (param $x f64)
    i64.const 1000000000008
    call 1
    i64.const 2
    call 0
    local.get $x
    i32.trunc_f64_s
    i64.const 2
    call 0
    drop
  )
  (func (;5;) (type 1) (param $x f64)
    i64.const 1000000000008
    call 1
    i64.const 2
    call 0
    local.get $x
    i32.trunc_f64_u
    i64.const 2
    call 0
    drop
  )
  (func (;6;) (type 0) (param $x f32)
    i64.const 1000000000008
    call 1
    i64.const 2
    call 0
    local.get $x
    i64.trunc_f32_s
    i64.const 2
    call 0
    drop
  )
  (func (;7;) (type 0) (param $x f32)
    i64.const 1000000000008
    call 1
    i64.const 2
    call 0
    local.get $x
    i64.trunc_f32_u
    i64.const 2
    call 0
    drop
  )
  (func (;8;) (type 1) (param $x f64)
    i64.const 1000000000008
    call 1
    i64.const 2
    call 0
    local.get $x
    i64.trunc_f64_s
    i64.const 2
    call 0
    drop
  )
  (func (;9;) (type 1) (param $x f64)
    i64.const 1000000000008
    call 1
    i64.const 2
    call 0
    local.get $x
    i64.trunc_f64_u
    i64.const 2
    call 0
    drop
  )
  (export "no_dce.i32.trunc_f32_s" (func 2))
  (export "no_dce.i32.trunc_f32_u" (func 3))
  (export "no_dce.i32.trunc_f64_s" (func 4))
  (export "no_dce.i32.trunc_f64_u" (func 5))
  (export "no_dce.i64.trunc_f32_s" (func 6))
  (export "no_dce.i64.trunc_f32_u" (func 7))
  (export "no_dce.i64.trunc_f64_s" (func 8))
  (export "no_dce.i64.trunc_f64_u" (func 9))
)
(assert_trap (invoke "no_dce.i32.trunc_f32_s" (f32.const nan)) "invalid conversion to integer")
(assert_trap (invoke "no_dce.i32.trunc_f32_u" (f32.const nan)) "invalid conversion to integer")
(assert_trap (invoke "no_dce.i32.trunc_f64_s" (f64.const nan)) "invalid conversion to integer")
(assert_trap (invoke "no_dce.i32.trunc_f64_u" (f64.const nan)) "invalid conversion to integer")
(assert_trap (invoke "no_dce.i64.trunc_f32_s" (f32.const nan)) "invalid conversion to integer")
(assert_trap (invoke "no_dce.i64.trunc_f32_u" (f32.const nan)) "invalid conversion to integer")
(assert_trap (invoke "no_dce.i64.trunc_f64_s" (f64.const nan)) "invalid conversion to integer")
(assert_trap (invoke "no_dce.i64.trunc_f64_u" (f64.const nan)) "invalid conversion to integer")

(module
  (type (;0;) (func (param i32)))
  (type (;1;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 1)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 1)))
  (func (;2;) (type 0) (param $i i32)
    i64.const 1000000000004
    call 1
    i64.const 2
    call 0
    local.get $i
    i32.load
    i64.const 2
    call 0
    drop
  )
  (func (;3;) (type 0) (param $i i32)
    i64.const 1000000000004
    call 1
    i64.const 2
    call 0
    local.get $i
    i32.load16_s
    i64.const 2
    call 0
    drop
  )
  (func (;4;) (type 0) (param $i i32)
    i64.const 1000000000004
    call 1
    i64.const 2
    call 0
    local.get $i
    i32.load16_u
    i64.const 2
    call 0
    drop
  )
  (func (;5;) (type 0) (param $i i32)
    i64.const 1000000000004
    call 1
    i64.const 2
    call 0
    local.get $i
    i32.load8_s
    i64.const 2
    call 0
    drop
  )
  (func (;6;) (type 0) (param $i i32)
    i64.const 1000000000004
    call 1
    i64.const 2
    call 0
    local.get $i
    i32.load8_u
    i64.const 2
    call 0
    drop
  )
  (func (;7;) (type 0) (param $i i32)
    i64.const 1000000000008
    call 1
    i64.const 2
    call 0
    local.get $i
    i64.load
    i64.const 2
    call 0
    drop
  )
  (func (;8;) (type 0) (param $i i32)
    i64.const 1000000000008
    call 1
    i64.const 2
    call 0
    local.get $i
    i64.load32_s
    i64.const 2
    call 0
    drop
  )
  (func (;9;) (type 0) (param $i i32)
    i64.const 1000000000008
    call 1
    i64.const 2
    call 0
    local.get $i
    i64.load32_u
    i64.const 2
    call 0
    drop
  )
  (func (;10;) (type 0) (param $i i32)
    i64.const 1000000000008
    call 1
    i64.const 2
    call 0
    local.get $i
    i64.load16_s
    i64.const 2
    call 0
    drop
  )
  (func (;11;) (type 0) (param $i i32)
    i64.const 1000000000008
    call 1
    i64.const 2
    call 0
    local.get $i
    i64.load16_u
    i64.const 2
    call 0
    drop
  )
  (func (;12;) (type 0) (param $i i32)
    i64.const 1000000000008
    call 1
    i64.const 2
    call 0
    local.get $i
    i64.load8_s
    i64.const 2
    call 0
    drop
  )
  (func (;13;) (type 0) (param $i i32)
    i64.const 1000000000008
    call 1
    i64.const 2
    call 0
    local.get $i
    i64.load8_u
    i64.const 2
    call 0
    drop
  )
  (func (;14;) (type 0) (param $i i32)
    i64.const 1000000000004
    call 1
    i64.const 2
    call 0
    local.get $i
    f32.load
    i64.const 2
    call 0
    drop
  )
  (func (;15;) (type 0) (param $i i32)
    i64.const 1000000000008
    call 1
    i64.const 2
    call 0
    local.get $i
    f64.load
    i64.const 2
    call 0
    drop
  )
  (memory (;0;) 1)
  (export "no_dce.i32.load" (func 2))
  (export "no_dce.i32.load16_s" (func 3))
  (export "no_dce.i32.load16_u" (func 4))
  (export "no_dce.i32.load8_s" (func 5))
  (export "no_dce.i32.load8_u" (func 6))
  (export "no_dce.i64.load" (func 7))
  (export "no_dce.i64.load32_s" (func 8))
  (export "no_dce.i64.load32_u" (func 9))
  (export "no_dce.i64.load16_s" (func 10))
  (export "no_dce.i64.load16_u" (func 11))
  (export "no_dce.i64.load8_s" (func 12))
  (export "no_dce.i64.load8_u" (func 13))
  (export "no_dce.f32.load" (func 14))
  (export "no_dce.f64.load" (func 15))
)
(assert_trap (invoke "no_dce.i32.load" (i32.const 65536)) "out of bounds memory access")
(assert_trap (invoke "no_dce.i32.load16_s" (i32.const 65536)) "out of bounds memory access")
(assert_trap (invoke "no_dce.i32.load16_u" (i32.const 65536)) "out of bounds memory access")
(assert_trap (invoke "no_dce.i32.load8_s" (i32.const 65536)) "out of bounds memory access")
(assert_trap (invoke "no_dce.i32.load8_u" (i32.const 65536)) "out of bounds memory access")
(assert_trap (invoke "no_dce.i64.load" (i32.const 65536)) "out of bounds memory access")
(assert_trap (invoke "no_dce.i64.load32_s" (i32.const 65536)) "out of bounds memory access")
(assert_trap (invoke "no_dce.i64.load32_u" (i32.const 65536)) "out of bounds memory access")
(assert_trap (invoke "no_dce.i64.load16_s" (i32.const 65536)) "out of bounds memory access")
(assert_trap (invoke "no_dce.i64.load16_u" (i32.const 65536)) "out of bounds memory access")
(assert_trap (invoke "no_dce.i64.load8_s" (i32.const 65536)) "out of bounds memory access")
(assert_trap (invoke "no_dce.i64.load8_u" (i32.const 65536)) "out of bounds memory access")
(assert_trap (invoke "no_dce.f32.load" (i32.const 65536)) "out of bounds memory access")
(assert_trap (invoke "no_dce.f64.load" (i32.const 65536)) "out of bounds memory access")
