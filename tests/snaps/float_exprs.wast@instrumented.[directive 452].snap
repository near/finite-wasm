(module
  (type (;0;) (func (param f32 f32) (result f32)))
  (type (;1;) (func (param f64 f64) (result f64)))
  (type (;2;) (func (param i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 2)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 2)))
  (func (;2;) (type 0) (param $x f32) (param $y f32) (result f32)
    i64.const 1000001000008
    call 1
    i64.const 4
    call 0
    local.get $x
    local.get $y
    f32.lt
    if (result f32) ;; label = @1
      i64.const 2
      call 0
      local.get $x
    else
      i64.const 2
      call 0
      local.get $y
    end
    i64.const 1
    call 0
  )
  (func (;3;) (type 0) (param $x f32) (param $y f32) (result f32)
    i64.const 1000001000008
    call 1
    i64.const 4
    call 0
    local.get $x
    local.get $y
    f32.le
    if (result f32) ;; label = @1
      i64.const 2
      call 0
      local.get $x
    else
      i64.const 2
      call 0
      local.get $y
    end
    i64.const 1
    call 0
  )
  (func (;4;) (type 0) (param $x f32) (param $y f32) (result f32)
    i64.const 1000001000008
    call 1
    i64.const 4
    call 0
    local.get $x
    local.get $y
    f32.gt
    if (result f32) ;; label = @1
      i64.const 2
      call 0
      local.get $x
    else
      i64.const 2
      call 0
      local.get $y
    end
    i64.const 1
    call 0
  )
  (func (;5;) (type 0) (param $x f32) (param $y f32) (result f32)
    i64.const 1000001000008
    call 1
    i64.const 4
    call 0
    local.get $x
    local.get $y
    f32.ge
    if (result f32) ;; label = @1
      i64.const 2
      call 0
      local.get $x
    else
      i64.const 2
      call 0
      local.get $y
    end
    i64.const 1
    call 0
  )
  (func (;6;) (type 1) (param $x f64) (param $y f64) (result f64)
    i64.const 1000001000016
    call 1
    i64.const 4
    call 0
    local.get $x
    local.get $y
    f64.lt
    if (result f64) ;; label = @1
      i64.const 2
      call 0
      local.get $x
    else
      i64.const 2
      call 0
      local.get $y
    end
    i64.const 1
    call 0
  )
  (func (;7;) (type 1) (param $x f64) (param $y f64) (result f64)
    i64.const 1000001000016
    call 1
    i64.const 4
    call 0
    local.get $x
    local.get $y
    f64.le
    if (result f64) ;; label = @1
      i64.const 2
      call 0
      local.get $x
    else
      i64.const 2
      call 0
      local.get $y
    end
    i64.const 1
    call 0
  )
  (func (;8;) (type 1) (param $x f64) (param $y f64) (result f64)
    i64.const 1000001000016
    call 1
    i64.const 4
    call 0
    local.get $x
    local.get $y
    f64.gt
    if (result f64) ;; label = @1
      i64.const 2
      call 0
      local.get $x
    else
      i64.const 2
      call 0
      local.get $y
    end
    i64.const 1
    call 0
  )
  (func (;9;) (type 1) (param $x f64) (param $y f64) (result f64)
    i64.const 1000001000016
    call 1
    i64.const 4
    call 0
    local.get $x
    local.get $y
    f64.ge
    if (result f64) ;; label = @1
      i64.const 2
      call 0
      local.get $x
    else
      i64.const 2
      call 0
      local.get $y
    end
    i64.const 1
    call 0
  )
  (export "f32.no_fold_lt_if" (func 2))
  (export "f32.no_fold_le_if" (func 3))
  (export "f32.no_fold_gt_if" (func 4))
  (export "f32.no_fold_ge_if" (func 5))
  (export "f64.no_fold_lt_if" (func 6))
  (export "f64.no_fold_le_if" (func 7))
  (export "f64.no_fold_gt_if" (func 8))
  (export "f64.no_fold_ge_if" (func 9))
)