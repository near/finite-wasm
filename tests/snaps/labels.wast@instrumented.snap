(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func (param i32) (result i32)))
  (type (;2;) (func (param i64)))
  (type (;3;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 2)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 3)))
  (import "spectest" "finite_wasm_unstack" (func (;2;) (type 3)))
  (func (;3;) (type 0) (result i32)
    block $exit (result i32) ;; label = @1
      i64.const 4
      i64.const 0
      call 1
      i64.const 3
      call 0
      block (result i32) ;; label = @2
        i32.const 1
        br 0 (;@2;)
        i32.const 0
      end
    end
    i64.const 4
    i64.const 0
    call 2
  )
  (func (;4;) (type 0) (result i32)
    (local $i i32)
    block $exit (result i32) ;; label = @1
      i64.const 8
      i64.const 1
      call 1
      i64.const 3
      call 0
      i32.const 0
      local.set $i
      block $cont (result i32) ;; label = @2
        loop (result i32) ;; label = @3
          i64.const 9
          call 0
          local.get $i
          i32.const 1
          i32.add
          local.set $i
          local.get $i
          i32.const 5
          i32.eq
          if ;; label = @4
            i64.const 2
            call 0
            local.get $i
            br 2 (;@2;)
          end
          i64.const 1
          call 0
          br 0 (;@3;)
        end
      end
    end
    i64.const 8
    i64.const 1
    call 2
  )
  (func (;5;) (type 0) (result i32)
    (local $i i32)
    block $exit (result i32) ;; label = @1
      i64.const 8
      i64.const 1
      call 1
      i64.const 3
      call 0
      i32.const 0
      local.set $i
      block $cont (result i32) ;; label = @2
        loop (result i32) ;; label = @3
          i64.const 9
          call 0
          local.get $i
          i32.const 1
          i32.add
          local.set $i
          local.get $i
          i32.const 5
          i32.eq
          if ;; label = @4
            i64.const 1
            call 0
            br 1 (;@3;)
          end
          i64.const 4
          call 0
          local.get $i
          i32.const 8
          i32.eq
          if ;; label = @4
            i64.const 2
            call 0
            local.get $i
            br 2 (;@2;)
          end
          i64.const 5
          call 0
          local.get $i
          i32.const 1
          i32.add
          local.set $i
          br 0 (;@3;)
        end
      end
    end
    i64.const 8
    i64.const 1
    call 2
  )
  (func (;6;) (type 0) (result i32)
    (local $i i32)
    block $exit (result i32) ;; label = @1
      i64.const 8
      i64.const 1
      call 1
      i64.const 12
      call 0
      i32.const 0
      local.set $i
      block $cont (result i32) ;; label = @2
        loop (result i32) ;; label = @3
          local.get $i
          i32.const 1
          i32.add
          local.set $i
          local.get $i
          i32.const 5
          i32.eq
          if ;; label = @4
            i64.const 2
            call 0
            local.get $i
            br 2 (;@2;)
          end
          i64.const 1
          call 0
          local.get $i
        end
      end
    end
    i64.const 8
    i64.const 1
    call 2
  )
  (func (;7;) (type 1) (param $max i32) (result i32)
    (local $i i32)
    block $exit (result i32) ;; label = @1
      i64.const 8
      i64.const 2
      call 1
      i64.const 3
      call 0
      i32.const 1
      local.set $i
      block $cont (result i32) ;; label = @2
        loop (result i32) ;; label = @3
          i64.const 9
          call 0
          local.get $i
          local.get $i
          i32.add
          local.set $i
          local.get $i
          local.get $max
          i32.gt_u
          if ;; label = @4
            i64.const 2
            call 0
            local.get $i
            br 2 (;@2;)
          end
          i64.const 1
          call 0
          br 0 (;@3;)
        end
      end
    end
    i64.const 8
    i64.const 2
    call 2
  )
  (func (;8;) (type 0) (result i32)
    block $l (result i32) ;; label = @1
      i64.const 8
      i64.const 0
      call 1
      i64.const 4
      call 0
      loop (result i32) ;; label = @2
        i32.const 1
      end
      i32.const 1
      i32.add
    end
    i64.const 8
    i64.const 0
    call 2
  )
  (func (;9;) (type 0) (result i32)
    block (result i32) ;; label = @1
      i64.const 4
      i64.const 0
      call 1
      loop (result i32) ;; label = @2
        i64.const 3
        call 0
        i32.const 0
        br_if 0 (;@2;)
        i64.const 1
        call 0
        i32.const 3
      end
    end
    i64.const 4
    i64.const 0
    call 2
  )
  (func (;10;) (type 0) (result i32)
    (local $i i32)
    block (result i32) ;; label = @1
      i64.const 8
      i64.const 1
      call 1
      i64.const 5
      call 0
      i32.const 0
      local.set $i
      block $l ;; label = @2
        i32.const 1
        if $l ;; label = @3
          i64.const 1
          call 0
          br 0 (;@3;)
          i32.const 666
          local.set $i
        end
        i64.const 6
        call 0
        local.get $i
        i32.const 1
        i32.add
        local.set $i
        i32.const 1
        if $l ;; label = @3
          i64.const 1
          call 0
          br 0 (;@3;)
          i32.const 666
          local.set $i
        else
          i64.const 2
          call 0
          i32.const 888
          local.set $i
        end
        i64.const 6
        call 0
        local.get $i
        i32.const 1
        i32.add
        local.set $i
        i32.const 1
        if $l ;; label = @3
          i64.const 1
          call 0
          br 0 (;@3;)
          i32.const 666
          local.set $i
        else
          i64.const 2
          call 0
          i32.const 888
          local.set $i
        end
        i64.const 6
        call 0
        local.get $i
        i32.const 1
        i32.add
        local.set $i
        i32.const 0
        if $l ;; label = @3
          i64.const 2
          call 0
          i32.const 888
          local.set $i
        else
          i64.const 1
          call 0
          br 0 (;@3;)
          i32.const 666
          local.set $i
        end
        i64.const 6
        call 0
        local.get $i
        i32.const 1
        i32.add
        local.set $i
        i32.const 0
        if ;; label = @3
          i64.const 2
          call 0
          i32.const 888
          local.set $i
        else
          i64.const 1
          call 0
          br 0 (;@3;)
          i32.const 666
          local.set $i
        end
        i64.const 5
        call 0
        local.get $i
        i32.const 1
        i32.add
        local.set $i
      end
      local.get $i
    end
    i64.const 8
    i64.const 1
    call 2
  )
  (func (;11;) (type 0) (result i32)
    (local $i i32)
    block (result i32) ;; label = @1
      i64.const 8
      i64.const 1
      call 1
      i64.const 5
      call 0
      i32.const 0
      local.set $i
      block ;; label = @2
        i32.const 1
        if ;; label = @3
          i64.const 1
          call 0
          br 0 (;@3;)
          i32.const 666
          local.set $i
        end
        i64.const 6
        call 0
        local.get $i
        i32.const 1
        i32.add
        local.set $i
        i32.const 1
        if ;; label = @3
          i64.const 1
          call 0
          br 0 (;@3;)
          i32.const 666
          local.set $i
        else
          i64.const 2
          call 0
          i32.const 888
          local.set $i
        end
        i64.const 6
        call 0
        local.get $i
        i32.const 1
        i32.add
        local.set $i
        i32.const 1
        if ;; label = @3
          i64.const 1
          call 0
          br 0 (;@3;)
          i32.const 666
          local.set $i
        else
          i64.const 2
          call 0
          i32.const 888
          local.set $i
        end
        i64.const 6
        call 0
        local.get $i
        i32.const 1
        i32.add
        local.set $i
        i32.const 0
        if ;; label = @3
          i64.const 2
          call 0
          i32.const 888
          local.set $i
        else
          i64.const 1
          call 0
          br 0 (;@3;)
          i32.const 666
          local.set $i
        end
        i64.const 6
        call 0
        local.get $i
        i32.const 1
        i32.add
        local.set $i
        i32.const 0
        if ;; label = @3
          i64.const 2
          call 0
          i32.const 888
          local.set $i
        else
          i64.const 1
          call 0
          br 0 (;@3;)
          i32.const 666
          local.set $i
        end
        i64.const 5
        call 0
        local.get $i
        i32.const 1
        i32.add
        local.set $i
      end
      local.get $i
    end
    i64.const 8
    i64.const 1
    call 2
  )
  (func (;12;) (type 1) (param i32) (result i32)
    block $ret (result i32) ;; label = @1
      i64.const 8
      i64.const 1
      call 1
      i64.const 10
      call 0
      block $exit (result i32) ;; label = @2
        i32.const 10
        block $0 (result i32) ;; label = @3
          block $default ;; label = @4
            block $3 ;; label = @5
              block $2 ;; label = @6
                block $1 ;; label = @7
                  block ;; label = @8
                    local.get 0
                    br_table 4 (;@4;) 0 (;@8;) 1 (;@7;) 2 (;@6;) 3 (;@5;)
                  end
                end
                i64.const 2
                call 0
                i32.const 2
                br 3 (;@3;)
              end
              i64.const 2
              call 0
              i32.const 3
              br 3 (;@2;)
            end
          end
          i64.const 1
          call 0
          i32.const 5
        end
        i64.const 1
        call 0
        i32.mul
      end
    end
    i64.const 8
    i64.const 1
    call 2
  )
  (func (;13;) (type 1) (param i32) (result i32)
    block $default (result i32) ;; label = @1
      i64.const 4
      i64.const 1
      call 1
      i64.const 5
      call 0
      block $1 ;; label = @2
        block $0 ;; label = @3
          block ;; label = @4
            local.get 0
            br_table 0 (;@4;) 1 (;@3;)
            br 2 (;@2;)
          end
          i64.const 2
          call 0
          i32.const 0
          i64.const 4
          i64.const 1
          call 2
          return
        end
      end
      i64.const 1
      call 0
      i32.const 2
    end
    i64.const 4
    i64.const 1
    call 2
  )
  (func (;14;) (type 0) (result i32)
    (local $i i32)
    block $outer (result i32) ;; label = @1
      i64.const 8
      i64.const 1
      call 1
      i64.const 6
      call 0
      i32.const 0
      local.set $i
      block $inner (result i32) ;; label = @2
        block ;; label = @3
          i32.const 0
          br_if 0 (;@3;)
          i64.const 6
          call 0
          local.get $i
          i32.const 1
          i32.or
          local.set $i
          i32.const 1
          br_if 0 (;@3;)
          i64.const 4
          call 0
          local.get $i
          i32.const 2
          i32.or
          local.set $i
        end
        i64.const 8
        call 0
        block (result i32) ;; label = @3
          local.get $i
          i32.const 4
          i32.or
          local.set $i
          local.get $i
        end
        i32.const 0
        br_if 0 (;@2;)
        i64.const 13
        call 0
        drop
        local.get $i
        i32.const 8
        i32.or
        local.set $i
        block (result i32) ;; label = @3
          local.get $i
          i32.const 16
          i32.or
          local.set $i
          local.get $i
        end
        i32.const 1
        br_if 0 (;@2;)
        i64.const 6
        call 0
        drop
        local.get $i
        i32.const 32
        i32.or
        local.set $i
        local.get $i
      end
    end
    i64.const 8
    i64.const 1
    call 2
  )
  (func (;15;) (type 0) (result i32)
    block $l0 (result i32) ;; label = @1
      i64.const 8
      i64.const 0
      call 1
      i64.const 4
      call 0
      block $l1 (result i32) ;; label = @2
        block (result i32) ;; label = @3
          i32.const 1
          br 0 (;@3;)
        end
        i64.const 2
        call 0
        i32.const 1
        br_if 0 (;@2;)
        i64.const 2
        call 0
        drop
        i32.const 0
      end
    end
    i64.const 8
    i64.const 0
    call 2
  )
  (func (;16;) (type 0) (result i32)
    block $l0 (result i32) ;; label = @1
      i64.const 8
      i64.const 0
      call 1
      i64.const 3
      call 0
      block (result i32) ;; label = @2
        i32.const 1
        if $l1 ;; label = @3
          i64.const 3
          call 0
          block (result i32) ;; label = @4
            i32.const 1
            br 0 (;@4;)
          end
          i64.const 2
          call 0
          i32.const 1
          br_if 1 (;@2;)
          i64.const 1
          call 0
          drop
        end
        i64.const 1
        call 0
        i32.const 0
      end
    end
    i64.const 8
    i64.const 0
    call 2
  )
  (func (;17;) (type 0) (result i32)
    (local $i1 i32)
    block $l0 (result i32) ;; label = @1
      i64.const 8
      i64.const 1
      call 1
      i64.const 10
      call 0
      block (result i32) ;; label = @2
        block (result i32) ;; label = @3
          i32.const 1
          local.set $i1
          local.get $i1
        end
        block (result i32) ;; label = @3
          i32.const 2
          local.set $i1
          local.get $i1
        end
        br_if 0 (;@2;)
        i64.const 2
        call 0
        drop
        i32.const 0
      end
      i64.const 4
      call 0
      i32.const 0
      i32.add
      drop
      local.get $i1
    end
    i64.const 8
    i64.const 1
    call 2
  )
  (func (;18;) (type 0) (result i32)
    block $l0 (result i32) ;; label = @1
      i64.const 4
      i64.const 0
      call 1
      i64.const 3
      call 0
      block (result i32) ;; label = @2
        i32.const 1
        if $l1 ;; label = @3
          i64.const 3
          call 0
          block (result i32) ;; label = @4
            i32.const 1
            br 0 (;@4;)
          end
          i64.const 1
          call 0
          br 1 (;@2;)
        else
          i64.const 4
          call 0
          block $l1 ;; label = @4
            block (result i32) ;; label = @5
              i32.const 1
              br 0 (;@5;)
            end
            i64.const 1
            call 0
            drop
          end
        end
        i64.const 1
        call 0
        i32.const 1
      end
    end
    i64.const 4
    i64.const 0
    call 2
  )
  (func (;19;) (type 0) (result i32)
    block $l1 (result i32) ;; label = @1
      i64.const 4
      i64.const 0
      call 1
      i64.const 3
      call 0
      block (result i32) ;; label = @2
        i32.const 1
        br 0 (;@2;)
        i32.const 2
        i32.xor
      end
    end
    i64.const 4
    i64.const 0
    call 2
  )
  (func (;20;) (type 0) (result i32)
    block $l1 (result i32) ;; label = @1
      i64.const 8
      i64.const 0
      call 1
      i64.const 6
      call 0
      block $l1 (result i32) ;; label = @2
        block $l1 (result i32) ;; label = @3
          i32.const 2
        end
        block (result i32) ;; label = @3
          i32.const 3
          br 0 (;@3;)
        end
        i64.const 1
        call 0
        i32.add
      end
    end
    i64.const 8
    i64.const 0
    call 2
  )
  (export "block" (func 3))
  (export "loop1" (func 4))
  (export "loop2" (func 5))
  (export "loop3" (func 6))
  (export "loop4" (func 7))
  (export "loop5" (func 8))
  (export "loop6" (func 9))
  (export "if" (func 10))
  (export "if2" (func 11))
  (export "switch" (func 12))
  (export "return" (func 13))
  (export "br_if0" (func 14))
  (export "br_if1" (func 15))
  (export "br_if2" (func 16))
  (export "br_if3" (func 17))
  (export "br" (func 18))
  (export "shadowing" (func 19))
  (export "redefinition" (func 20))
)
(assert_return (invoke "block") (i32.const 1))
(assert_return (invoke "loop1") (i32.const 5))
(assert_return (invoke "loop2") (i32.const 8))
(assert_return (invoke "loop3") (i32.const 1))
(assert_return (invoke "loop4" (i32.const 8)) (i32.const 16))
(assert_return (invoke "loop5") (i32.const 2))
(assert_return (invoke "loop6") (i32.const 3))
(assert_return (invoke "if") (i32.const 5))
(assert_return (invoke "if2") (i32.const 5))
(assert_return (invoke "switch" (i32.const 0)) (i32.const 50))
(assert_return (invoke "switch" (i32.const 1)) (i32.const 20))
(assert_return (invoke "switch" (i32.const 2)) (i32.const 20))
(assert_return (invoke "switch" (i32.const 3)) (i32.const 3))
(assert_return (invoke "switch" (i32.const 4)) (i32.const 50))
(assert_return (invoke "switch" (i32.const 5)) (i32.const 50))
(assert_return (invoke "return" (i32.const 0)) (i32.const 0))
(assert_return (invoke "return" (i32.const 1)) (i32.const 2))
(assert_return (invoke "return" (i32.const 2)) (i32.const 2))
(assert_return (invoke "br_if0") (i32.const 0x1d))
(assert_return (invoke "br_if1") (i32.const 1))
(assert_return (invoke "br_if2") (i32.const 1))
(assert_return (invoke "br_if3") (i32.const 2))
(assert_return (invoke "br") (i32.const 1))
(assert_return (invoke "shadowing") (i32.const 1))
(assert_return (invoke "redefinition") (i32.const 5))

