(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func (param i32) (result i32)))
  (type (;2;) (func (param i64)))
  (type (;3;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 2)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 3)))
  (func (;2;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 3
    call 0
    block $exit (result i32) ;; label = @1
      i32.const 1
      br 0 (;@1;)
      i32.const 0
      i64.const 1
      call 0
    end
    i64.const 1
    call 0
  )
  (func (;3;) (type 0) (result i32)
    (local $i i32)
    i64.const 8
    i64.const 0
    call 1
    i64.const 4
    call 0
    i32.const 0
    local.set $i
    block $exit (result i32) ;; label = @1
      loop $cont (result i32) ;; label = @2
        i64.const 8
        call 0
        local.get $i
        i32.const 1
        i32.add
        local.set $i
        local.get $i
        i32.const 5
        i32.eq
        if ;; label = @3
          i64.const 2
          call 0
          local.get $i
          br 2 (;@1;)
          i64.const 1
          call 0
        end
        i64.const 1
        call 0
        br 0 (;@2;)
        i64.const 2
        call 0
      end
    end
    i64.const 1
    call 0
  )
  (func (;4;) (type 0) (result i32)
    (local $i i32)
    i64.const 8
    i64.const 0
    call 1
    i64.const 4
    call 0
    i32.const 0
    local.set $i
    block $exit (result i32) ;; label = @1
      loop $cont (result i32) ;; label = @2
        i64.const 8
        call 0
        local.get $i
        i32.const 1
        i32.add
        local.set $i
        local.get $i
        i32.const 5
        i32.eq
        if ;; label = @3
          i64.const 1
          call 0
          br 1 (;@2;)
          i64.const 1
          call 0
        end
        i64.const 4
        call 0
        local.get $i
        i32.const 8
        i32.eq
        if ;; label = @3
          i64.const 2
          call 0
          local.get $i
          br 2 (;@1;)
          i64.const 1
          call 0
        end
        i64.const 5
        call 0
        local.get $i
        i32.const 1
        i32.add
        local.set $i
        br 0 (;@2;)
        i64.const 2
        call 0
      end
    end
    i64.const 1
    call 0
  )
  (func (;5;) (type 0) (result i32)
    (local $i i32)
    i64.const 8
    i64.const 0
    call 1
    i64.const 12
    call 0
    i32.const 0
    local.set $i
    block $exit (result i32) ;; label = @1
      loop $cont (result i32) ;; label = @2
        local.get $i
        i32.const 1
        i32.add
        local.set $i
        local.get $i
        i32.const 5
        i32.eq
        if ;; label = @3
          i64.const 2
          call 0
          local.get $i
          br 2 (;@1;)
          i64.const 1
          call 0
        end
        i64.const 3
        call 0
        local.get $i
      end
    end
    i64.const 1
    call 0
  )
  (func (;6;) (type 1) (param $max i32) (result i32)
    (local $i i32)
    i64.const 8
    i64.const 1
    call 1
    i64.const 4
    call 0
    i32.const 1
    local.set $i
    block $exit (result i32) ;; label = @1
      loop $cont (result i32) ;; label = @2
        i64.const 8
        call 0
        local.get $i
        local.get $i
        i32.add
        local.set $i
        local.get $i
        local.get $max
        i32.gt_u
        if ;; label = @3
          i64.const 2
          call 0
          local.get $i
          br 2 (;@1;)
          i64.const 1
          call 0
        end
        i64.const 1
        call 0
        br 0 (;@2;)
        i64.const 2
        call 0
      end
    end
    i64.const 1
    call 0
  )
  (func (;7;) (type 0) (result i32)
    i64.const 8
    i64.const 0
    call 1
    i64.const 6
    call 0
    loop $l (result i32) ;; label = @1
      i32.const 1
    end
    i32.const 1
    i32.add
  )
  (func (;8;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 1
    call 0
    loop (result i32) ;; label = @1
      i64.const 2
      call 0
      i32.const 0
      br_if 0 (;@1;)
      i64.const 3
      call 0
      i32.const 3
    end
  )
  (func (;9;) (type 0) (result i32)
    (local $i i32)
    i64.const 8
    i64.const 0
    call 1
    i64.const 5
    call 0
    i32.const 0
    local.set $i
    block ;; label = @1
      i32.const 1
      if $l ;; label = @2
        i64.const 1
        call 0
        br 0 (;@2;)
        i32.const 666
        local.set $i
        i64.const 1
        call 0
      end
      i64.const 6
      call 0
      local.get $i
      i32.const 1
      i32.add
      local.set $i
      i32.const 1
      if $l2 ;; label = @2
        i64.const 1
        call 0
        br 0 (;@2;)
        i32.const 666
        local.set $i
        i64.const 1
        call 0
      else
        i64.const 3
        call 0
        i32.const 888
        local.set $i
      end
      i64.const 6
      call 0
      local.get $i
      i32.const 1
      i32.add
      local.set $i
      i32.const 1
      if $l3 ;; label = @2
        i64.const 1
        call 0
        br 0 (;@2;)
        i32.const 666
        local.set $i
        i64.const 1
        call 0
      else
        i64.const 3
        call 0
        i32.const 888
        local.set $i
      end
      i64.const 6
      call 0
      local.get $i
      i32.const 1
      i32.add
      local.set $i
      i32.const 0
      if $l4 ;; label = @2
        i64.const 3
        call 0
        i32.const 888
        local.set $i
      else
        i64.const 1
        call 0
        br 0 (;@2;)
        i32.const 666
        local.set $i
        i64.const 1
        call 0
      end
      i64.const 6
      call 0
      local.get $i
      i32.const 1
      i32.add
      local.set $i
      i32.const 0
      if $l5 ;; label = @2
        i64.const 3
        call 0
        i32.const 888
        local.set $i
      else
        i64.const 1
        call 0
        br 0 (;@2;)
        i32.const 666
        local.set $i
        i64.const 1
        call 0
      end
      i64.const 7
      call 0
      local.get $i
      i32.const 1
      i32.add
      local.set $i
    end
    local.get $i
  )
  (func (;10;) (type 0) (result i32)
    (local $i i32)
    i64.const 8
    i64.const 0
    call 1
    i64.const 5
    call 0
    i32.const 0
    local.set $i
    block ;; label = @1
      i32.const 1
      if ;; label = @2
        i64.const 1
        call 0
        br 0 (;@2;)
        i32.const 666
        local.set $i
        i64.const 1
        call 0
      end
      i64.const 6
      call 0
      local.get $i
      i32.const 1
      i32.add
      local.set $i
      i32.const 1
      if ;; label = @2
        i64.const 1
        call 0
        br 0 (;@2;)
        i32.const 666
        local.set $i
        i64.const 1
        call 0
      else
        i64.const 3
        call 0
        i32.const 888
        local.set $i
      end
      i64.const 6
      call 0
      local.get $i
      i32.const 1
      i32.add
      local.set $i
      i32.const 1
      if ;; label = @2
        i64.const 1
        call 0
        br 0 (;@2;)
        i32.const 666
        local.set $i
        i64.const 1
        call 0
      else
        i64.const 3
        call 0
        i32.const 888
        local.set $i
      end
      i64.const 6
      call 0
      local.get $i
      i32.const 1
      i32.add
      local.set $i
      i32.const 0
      if ;; label = @2
        i64.const 3
        call 0
        i32.const 888
        local.set $i
      else
        i64.const 1
        call 0
        br 0 (;@2;)
        i32.const 666
        local.set $i
        i64.const 1
        call 0
      end
      i64.const 6
      call 0
      local.get $i
      i32.const 1
      i32.add
      local.set $i
      i32.const 0
      if ;; label = @2
        i64.const 3
        call 0
        i32.const 888
        local.set $i
      else
        i64.const 1
        call 0
        br 0 (;@2;)
        i32.const 666
        local.set $i
        i64.const 1
        call 0
      end
      i64.const 7
      call 0
      local.get $i
      i32.const 1
      i32.add
      local.set $i
    end
    local.get $i
  )
  (func (;11;) (type 1) (param i32) (result i32)
    i64.const 8
    i64.const 0
    call 1
    i64.const 10
    call 0
    block $ret (result i32) ;; label = @1
      i32.const 10
      block $exit (result i32) ;; label = @2
        block $0 ;; label = @3
          block $default ;; label = @4
            block $3 ;; label = @5
              block $2 ;; label = @6
                block $1 ;; label = @7
                  local.get 0
                  br_table 4 (;@3;) 0 (;@7;) 1 (;@6;) 2 (;@5;) 3 (;@4;)
                  i64.const 1
                  call 0
                end
                i64.const 1
                call 0
              end
              i64.const 2
              call 0
              i32.const 2
              br 3 (;@2;)
              i64.const 1
              call 0
            end
            i64.const 2
            call 0
            i32.const 3
            br 3 (;@1;)
            i64.const 1
            call 0
          end
          i64.const 1
          call 0
        end
        i64.const 2
        call 0
        i32.const 5
      end
      i64.const 2
      call 0
      i32.mul
    end
    i64.const 1
    call 0
  )
  (func (;12;) (type 1) (param i32) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 5
    call 0
    block $default ;; label = @1
      block $1 ;; label = @2
        block $0 ;; label = @3
          local.get 0
          br_table 0 (;@3;) 1 (;@2;)
          br 2 (;@1;)
          i64.const 1
          call 0
        end
        i64.const 2
        call 0
        i32.const 0
        return
        i64.const 1
        call 0
      end
      i64.const 1
      call 0
    end
    i64.const 2
    call 0
    i32.const 2
  )
  (func (;13;) (type 0) (result i32)
    (local $i i32)
    i64.const 8
    i64.const 0
    call 1
    i64.const 6
    call 0
    i32.const 0
    local.set $i
    block $outer (result i32) ;; label = @1
      block $inner ;; label = @2
        i32.const 0
        br_if 0 (;@2;)
        i64.const 6
        call 0
        local.get $i
        i32.const 1
        i32.or
        local.set $i
        i32.const 1
        br_if 0 (;@2;)
        i64.const 5
        call 0
        local.get $i
        i32.const 2
        i32.or
        local.set $i
      end
      i64.const 9
      call 0
      block (result i32) ;; label = @2
        local.get $i
        i32.const 4
        i32.or
        local.set $i
        local.get $i
      end
      i32.const 0
      br_if 0 (;@1;)
      i64.const 14
      call 0
      drop
      local.get $i
      i32.const 8
      i32.or
      local.set $i
      block (result i32) ;; label = @2
        local.get $i
        i32.const 16
        i32.or
        local.set $i
        local.get $i
      end
      i32.const 1
      br_if 0 (;@1;)
      i64.const 7
      call 0
      drop
      local.get $i
      i32.const 32
      i32.or
      local.set $i
      local.get $i
    end
    i64.const 1
    call 0
  )
  (func (;14;) (type 0) (result i32)
    i64.const 8
    i64.const 0
    call 1
    i64.const 4
    call 0
    block $l0 (result i32) ;; label = @1
      block $l1 (result i32) ;; label = @2
        i32.const 1
        br 0 (;@2;)
        i64.const 1
        call 0
      end
      i64.const 2
      call 0
      i32.const 1
      br_if 0 (;@1;)
      i64.const 3
      call 0
      drop
      i32.const 0
    end
    i64.const 1
    call 0
  )
  (func (;15;) (type 0) (result i32)
    i64.const 8
    i64.const 0
    call 1
    i64.const 3
    call 0
    block $l0 (result i32) ;; label = @1
      i32.const 1
      if ;; label = @2
        i64.const 3
        call 0
        block $l1 (result i32) ;; label = @3
          i32.const 1
          br 0 (;@3;)
          i64.const 1
          call 0
        end
        i64.const 2
        call 0
        i32.const 1
        br_if 1 (;@1;)
        i64.const 2
        call 0
        drop
      end
      i64.const 2
      call 0
      i32.const 0
    end
    i64.const 1
    call 0
  )
  (func (;16;) (type 0) (result i32)
    (local $i1 i32)
    i64.const 8
    i64.const 0
    call 1
    i64.const 12
    call 0
    block $l0 (result i32) ;; label = @1
      block (result i32) ;; label = @2
        i32.const 1
        local.set $i1
        local.get $i1
      end
      block (result i32) ;; label = @2
        i32.const 2
        local.set $i1
        local.get $i1
      end
      br_if 0 (;@1;)
      i64.const 3
      call 0
      drop
      i32.const 0
    end
    i64.const 5
    call 0
    i32.const 0
    i32.add
    drop
    local.get $i1
  )
  (func (;17;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 3
    call 0
    block $l0 (result i32) ;; label = @1
      i32.const 1
      if ;; label = @2
        i64.const 3
        call 0
        block $l1 (result i32) ;; label = @3
          i32.const 1
          br 0 (;@3;)
          i64.const 1
          call 0
        end
        i64.const 1
        call 0
        br 1 (;@1;)
        i64.const 1
        call 0
      else
        i64.const 4
        call 0
        block ;; label = @3
          block $l2 (result i32) ;; label = @4
            i32.const 1
            br 0 (;@4;)
            i64.const 1
            call 0
          end
          i64.const 3
          call 0
          drop
        end
      end
      i64.const 2
      call 0
      i32.const 1
    end
    i64.const 1
    call 0
  )
  (func (;18;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 3
    call 0
    block $l1 (result i32) ;; label = @1
      i32.const 1
      br 0 (;@1;)
      i32.const 2
      i32.xor
      i64.const 1
      call 0
    end
    i64.const 1
    call 0
  )
  (func (;19;) (type 0) (result i32)
    i64.const 8
    i64.const 0
    call 1
    i64.const 7
    call 0
    block $l1 (result i32) ;; label = @1
      block $l2 (result i32) ;; label = @2
        i32.const 2
      end
      block $l3 (result i32) ;; label = @2
        i32.const 3
        br 0 (;@2;)
        i64.const 1
        call 0
      end
      i64.const 3
      call 0
      i32.add
    end
  )
  (export "block" (func 2))
  (export "loop1" (func 3))
  (export "loop2" (func 4))
  (export "loop3" (func 5))
  (export "loop4" (func 6))
  (export "loop5" (func 7))
  (export "loop6" (func 8))
  (export "if" (func 9))
  (export "if2" (func 10))
  (export "switch" (func 11))
  (export "return" (func 12))
  (export "br_if0" (func 13))
  (export "br_if1" (func 14))
  (export "br_if2" (func 15))
  (export "br_if3" (func 16))
  (export "br" (func 17))
  (export "shadowing" (func 18))
  (export "redefinition" (func 19))
)
(assert_return (invoke "block") (i32.const 1))
(assert_return (invoke "loop1") (i32.const 5))
(assert_return (invoke "loop2") (i32.const 8))
(assert_return (invoke "loop3") (i32.const 1))
(assert_return (invoke "loop4" (i32.const 8)) (i32.const 16))
(assert_return (invoke "loop5") (i32.const 2))
(assert_return (invoke "loop6") (i32.const 3))
(assert_return (invoke "if") (i32.const 5))
(assert_return (invoke "if2") (i32.const 5))
(assert_return (invoke "switch" (i32.const 0)) (i32.const 50))
(assert_return (invoke "switch" (i32.const 1)) (i32.const 20))
(assert_return (invoke "switch" (i32.const 2)) (i32.const 20))
(assert_return (invoke "switch" (i32.const 3)) (i32.const 3))
(assert_return (invoke "switch" (i32.const 4)) (i32.const 50))
(assert_return (invoke "switch" (i32.const 5)) (i32.const 50))
(assert_return (invoke "return" (i32.const 0)) (i32.const 0))
(assert_return (invoke "return" (i32.const 1)) (i32.const 2))
(assert_return (invoke "return" (i32.const 2)) (i32.const 2))
(assert_return (invoke "br_if0") (i32.const 0x1d))
(assert_return (invoke "br_if1") (i32.const 1))
(assert_return (invoke "br_if2") (i32.const 1))
(assert_return (invoke "br_if3") (i32.const 2))
(assert_return (invoke "br") (i32.const 1))
(assert_return (invoke "shadowing") (i32.const 1))
(assert_return (invoke "redefinition") (i32.const 5))

