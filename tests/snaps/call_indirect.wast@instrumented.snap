(module
  (type $proc (;0;) (func))
  (type $out-i32 (;1;) (func (result i32)))
  (type $out-i64 (;2;) (func (result i64)))
  (type $out-f32 (;3;) (func (result f32)))
  (type $out-f64 (;4;) (func (result f64)))
  (type $out-f64-i32 (;5;) (func (result f64 i32)))
  (type $over-i32 (;6;) (func (param i32) (result i32)))
  (type $over-i64 (;7;) (func (param i64) (result i64)))
  (type $over-f32 (;8;) (func (param f32) (result f32)))
  (type $over-f64 (;9;) (func (param f64) (result f64)))
  (type $over-i32-f64 (;10;) (func (param i32 f64) (result i32 f64)))
  (type $swap-i32-i64 (;11;) (func (param i32 i64) (result i64 i32)))
  (type $f32-i32 (;12;) (func (param f32 i32) (result i32)))
  (type $i32-i64 (;13;) (func (param i32 i64) (result i64)))
  (type $f64-f32 (;14;) (func (param f64 f32) (result f32)))
  (type $i64-f64 (;15;) (func (param i64 f64) (result f64)))
  (type $over-i32-duplicate (;16;) (func (param i32) (result i32)))
  (type $over-i64-duplicate (;17;) (func (param i64) (result i64)))
  (type $over-f32-duplicate (;18;) (func (param f32) (result f32)))
  (type $over-f64-duplicate (;19;) (func (param f64) (result f64)))
  (type (;20;) (func (param i64)))
  (type (;21;) (func (param i64 f64 i32 i64)))
  (type (;22;) (func (param i64) (result i32)))
  (type (;23;) (func (param i64 f64 i32 i64) (result i32)))
  (type (;24;) (func (result i32 f64)))
  (type (;25;) (func (result i64 i32)))
  (type (;26;) (func (param i32) (result i64)))
  (type (;27;) (func (param i32) (result f32)))
  (type (;28;) (func (param i32) (result f64)))
  (type (;29;) (func (param i64)))
  (type (;30;) (func (param i64 i64)))
  (type (;31;) (func (result i32 f64)))
  (type (;32;) (func (result i64 i32)))
  (import "spectest" "finite_wasm_gas" (func $finite_wasm_gas (;0;) (type 29)))
  (import "spectest" "finite_wasm_stack" (func $finite_wasm_stack (;1;) (type 30)))
  (import "spectest" "finite_wasm_unstack" (func $finite_wasm_unstack (;2;) (type 30)))
  (table (;0;) 32 32 funcref)
  (memory (;0;) 1)
  (global $a (;0;) (mut f64) f64.const 0x1.4p+3 (;=10;))
  (export "type-i32" (func 23))
  (export "type-i64" (func 24))
  (export "type-f32" (func 25))
  (export "type-f64" (func 26))
  (export "type-f64-i32" (func 27))
  (export "type-index" (func 28))
  (export "type-first-i32" (func 29))
  (export "type-first-i64" (func 30))
  (export "type-first-f32" (func 31))
  (export "type-first-f64" (func 32))
  (export "type-second-i32" (func 33))
  (export "type-second-i64" (func 34))
  (export "type-second-f32" (func 35))
  (export "type-second-f64" (func 36))
  (export "type-all-f64-i32" (func 37))
  (export "type-all-i32-f64" (func 38))
  (export "type-all-i32-i64" (func 39))
  (export "dispatch" (func 40))
  (export "dispatch-structural-i64" (func 41))
  (export "dispatch-structural-i32" (func 42))
  (export "dispatch-structural-f32" (func 43))
  (export "dispatch-structural-f64" (func 44))
  (export "fac-i64" (func $fac-i64))
  (export "fib-i64" (func $fib-i64))
  (export "fac-i32" (func $fac-i32))
  (export "fac-f32" (func $fac-f32))
  (export "fac-f64" (func $fac-f64))
  (export "fib-i32" (func $fib-i32))
  (export "fib-f32" (func $fib-f32))
  (export "fib-f64" (func $fib-f64))
  (export "even" (func $even))
  (export "odd" (func $odd))
  (export "runaway" (func $runaway))
  (export "mutual-runaway" (func $mutual-runaway1))
  (export "as-select-first" (func 58))
  (export "as-select-mid" (func 59))
  (export "as-select-last" (func 60))
  (export "as-if-condition" (func 61))
  (export "as-br_if-first" (func 62))
  (export "as-br_if-last" (func 63))
  (export "as-br_table-first" (func 64))
  (export "as-br_table-last" (func 65))
  (export "as-store-first" (func 66))
  (export "as-store-last" (func 67))
  (export "as-memory.grow-value" (func 68))
  (export "as-return-value" (func 69))
  (export "as-drop-operand" (func 70))
  (export "as-br-value" (func 71))
  (export "as-local.set-value" (func 72))
  (export "as-local.tee-value" (func 73))
  (export "as-global.set-value" (func 74))
  (export "as-load-operand" (func 75))
  (export "as-unary-operand" (func 76))
  (export "as-binary-left" (func 77))
  (export "as-binary-right" (func 78))
  (export "as-test-operand" (func 79))
  (export "as-compare-left" (func 80))
  (export "as-compare-right" (func 81))
  (export "as-convert-operand" (func 82))
  (elem (;0;) (table 0) (i32.const 0) func $const-i32 $const-i64 $const-f32 $const-f64 $id-i32 $id-i64 $id-f32 $id-f64 $f32-i32 $i32-i64 $f64-f32 $i64-f64 $fac-i64 $fib-i64 $even $odd $runaway $mutual-runaway1 $mutual-runaway2 $over-i32-duplicate $over-i64-duplicate $over-f32-duplicate $over-f64-duplicate $fac-i32 $fac-f32 $fac-f64 $fib-i32 $fib-f32 $fib-f64 $const-f64-i32 $id-i32-f64 $swap-i32-i64)
  (func $const-i32 (;3;) (type $out-i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 4
      i64.const 0
      call $finite_wasm_stack
      i64.const 1
      call $finite_wasm_gas
      i32.const 306
    end
    i64.const 4
    i64.const 0
    call $finite_wasm_unstack
  )
  (func $const-i64 (;4;) (type $out-i64) (result i64)
    block (result i64) ;; label = @1
      i64.const 8
      i64.const 0
      call $finite_wasm_stack
      i64.const 1
      call $finite_wasm_gas
      i64.const 356
    end
    i64.const 8
    i64.const 0
    call $finite_wasm_unstack
  )
  (func $const-f32 (;5;) (type $out-f32) (result f32)
    block (result f32) ;; label = @1
      i64.const 4
      i64.const 0
      call $finite_wasm_stack
      i64.const 1
      call $finite_wasm_gas
      f32.const 0x1.e64p+11 (;=3890;)
    end
    i64.const 4
    i64.const 0
    call $finite_wasm_unstack
  )
  (func $const-f64 (;6;) (type $out-f64) (result f64)
    block (result f64) ;; label = @1
      i64.const 8
      i64.const 0
      call $finite_wasm_stack
      i64.const 1
      call $finite_wasm_gas
      f64.const 0x1.ec8p+11 (;=3940;)
    end
    i64.const 8
    i64.const 0
    call $finite_wasm_unstack
  )
  (func $const-f64-i32 (;7;) (type $out-f64-i32) (result f64 i32)
    block (type $out-f64-i32) (result f64 i32) ;; label = @1
      i64.const 12
      i64.const 0
      call $finite_wasm_stack
      i64.const 2
      call $finite_wasm_gas
      f64.const 0x1.ec8p+11 (;=3940;)
      i32.const 32
    end
    i64.const 12
    i64.const 0
    call $finite_wasm_unstack
  )
  (func $id-i32 (;8;) (type $over-i32) (param i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 4
      i64.const 1
      call $finite_wasm_stack
      i64.const 1
      call $finite_wasm_gas
      local.get 0
    end
    i64.const 4
    i64.const 1
    call $finite_wasm_unstack
  )
  (func $id-i64 (;9;) (type $over-i64) (param i64) (result i64)
    block (result i64) ;; label = @1
      i64.const 8
      i64.const 1
      call $finite_wasm_stack
      i64.const 1
      call $finite_wasm_gas
      local.get 0
    end
    i64.const 8
    i64.const 1
    call $finite_wasm_unstack
  )
  (func $id-f32 (;10;) (type $over-f32) (param f32) (result f32)
    block (result f32) ;; label = @1
      i64.const 4
      i64.const 1
      call $finite_wasm_stack
      i64.const 1
      call $finite_wasm_gas
      local.get 0
    end
    i64.const 4
    i64.const 1
    call $finite_wasm_unstack
  )
  (func $id-f64 (;11;) (type $over-f64) (param f64) (result f64)
    block (result f64) ;; label = @1
      i64.const 8
      i64.const 1
      call $finite_wasm_stack
      i64.const 1
      call $finite_wasm_gas
      local.get 0
    end
    i64.const 8
    i64.const 1
    call $finite_wasm_unstack
  )
  (func $id-i32-f64 (;12;) (type $over-i32-f64) (param i32 f64) (result i32 f64)
    block (type 31) (result i32 f64) ;; label = @1
      i64.const 12
      i64.const 2
      call $finite_wasm_stack
      i64.const 2
      call $finite_wasm_gas
      local.get 0
      local.get 1
    end
    i64.const 12
    i64.const 2
    call $finite_wasm_unstack
  )
  (func $swap-i32-i64 (;13;) (type $swap-i32-i64) (param i32 i64) (result i64 i32)
    block (type 32) (result i64 i32) ;; label = @1
      i64.const 12
      i64.const 2
      call $finite_wasm_stack
      i64.const 2
      call $finite_wasm_gas
      local.get 1
      local.get 0
    end
    i64.const 12
    i64.const 2
    call $finite_wasm_unstack
  )
  (func $i32-i64 (;14;) (type $i32-i64) (param i32 i64) (result i64)
    block (result i64) ;; label = @1
      i64.const 8
      i64.const 2
      call $finite_wasm_stack
      i64.const 1
      call $finite_wasm_gas
      local.get 1
    end
    i64.const 8
    i64.const 2
    call $finite_wasm_unstack
  )
  (func $i64-f64 (;15;) (type $i64-f64) (param i64 f64) (result f64)
    block (result f64) ;; label = @1
      i64.const 8
      i64.const 2
      call $finite_wasm_stack
      i64.const 1
      call $finite_wasm_gas
      local.get 1
    end
    i64.const 8
    i64.const 2
    call $finite_wasm_unstack
  )
  (func $f32-i32 (;16;) (type $f32-i32) (param f32 i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 4
      i64.const 2
      call $finite_wasm_stack
      i64.const 1
      call $finite_wasm_gas
      local.get 1
    end
    i64.const 4
    i64.const 2
    call $finite_wasm_unstack
  )
  (func $f64-f32 (;17;) (type $f64-f32) (param f64 f32) (result f32)
    block (result f32) ;; label = @1
      i64.const 4
      i64.const 2
      call $finite_wasm_stack
      i64.const 1
      call $finite_wasm_gas
      local.get 1
    end
    i64.const 4
    i64.const 2
    call $finite_wasm_unstack
  )
  (func $over-i32-duplicate (;18;) (type $over-i32-duplicate) (param i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 4
      i64.const 1
      call $finite_wasm_stack
      i64.const 1
      call $finite_wasm_gas
      local.get 0
    end
    i64.const 4
    i64.const 1
    call $finite_wasm_unstack
  )
  (func $over-i64-duplicate (;19;) (type $over-i64-duplicate) (param i64) (result i64)
    block (result i64) ;; label = @1
      i64.const 8
      i64.const 1
      call $finite_wasm_stack
      i64.const 1
      call $finite_wasm_gas
      local.get 0
    end
    i64.const 8
    i64.const 1
    call $finite_wasm_unstack
  )
  (func $over-f32-duplicate (;20;) (type $over-f32-duplicate) (param f32) (result f32)
    block (result f32) ;; label = @1
      i64.const 4
      i64.const 1
      call $finite_wasm_stack
      i64.const 1
      call $finite_wasm_gas
      local.get 0
    end
    i64.const 4
    i64.const 1
    call $finite_wasm_unstack
  )
  (func $over-f64-duplicate (;21;) (type $over-f64-duplicate) (param f64) (result f64)
    block (result f64) ;; label = @1
      i64.const 8
      i64.const 1
      call $finite_wasm_stack
      i64.const 1
      call $finite_wasm_gas
      local.get 0
    end
    i64.const 8
    i64.const 1
    call $finite_wasm_unstack
  )
  (func (;22;) (type $proc)
    block ;; label = @1
      i64.const 72
      i64.const 0
      call $finite_wasm_stack
      i64.const 2
      call $finite_wasm_gas
      i32.const 0
      call_indirect (type $proc)
      i64.const 3
      call $finite_wasm_gas
      i64.const 0
      i32.const 0
      call_indirect (type 20)
      i64.const 6
      call $finite_wasm_gas
      i64.const 0
      f64.const 0x0p+0 (;=0;)
      i32.const 0
      i64.const 0
      i32.const 0
      call_indirect (type 21)
      i64.const 2
      call $finite_wasm_gas
      i32.const 0
      call_indirect (type $proc)
      i64.const 2
      call $finite_wasm_gas
      i32.const 0
      call_indirect (type $out-i32)
      i64.const 4
      call $finite_wasm_gas
      i32.eqz
      drop
      i32.const 0
      call_indirect (type $out-i32)
      i64.const 5
      call $finite_wasm_gas
      i32.eqz
      drop
      i64.const 0
      i32.const 0
      call_indirect (type 22)
      i64.const 8
      call $finite_wasm_gas
      i32.eqz
      drop
      i64.const 0
      f64.const 0x0p+0 (;=0;)
      i32.const 0
      i64.const 0
      i32.const 0
      call_indirect (type 23)
      i64.const 5
      call $finite_wasm_gas
      i32.eqz
      drop
      i64.const 0
      i32.const 0
      call_indirect (type $over-i64)
      i64.const 2
      call $finite_wasm_gas
      i64.eqz
      drop
    end
    i64.const 72
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;23;) (type $out-i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 8
      i64.const 0
      call $finite_wasm_stack
      i64.const 2
      call $finite_wasm_gas
      i32.const 0
      call_indirect (type $out-i32)
    end
    i64.const 8
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;24;) (type $out-i64) (result i64)
    block (result i64) ;; label = @1
      i64.const 12
      i64.const 0
      call $finite_wasm_stack
      i64.const 2
      call $finite_wasm_gas
      i32.const 1
      call_indirect (type $out-i64)
    end
    i64.const 12
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;25;) (type $out-f32) (result f32)
    block (result f32) ;; label = @1
      i64.const 8
      i64.const 0
      call $finite_wasm_stack
      i64.const 2
      call $finite_wasm_gas
      i32.const 2
      call_indirect (type $out-f32)
    end
    i64.const 8
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;26;) (type $out-f64) (result f64)
    block (result f64) ;; label = @1
      i64.const 12
      i64.const 0
      call $finite_wasm_stack
      i64.const 2
      call $finite_wasm_gas
      i32.const 3
      call_indirect (type $out-f64)
    end
    i64.const 12
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;27;) (type $out-f64-i32) (result f64 i32)
    block (type $out-f64-i32) (result f64 i32) ;; label = @1
      i64.const 16
      i64.const 0
      call $finite_wasm_stack
      i64.const 2
      call $finite_wasm_gas
      i32.const 29
      call_indirect (type $out-f64-i32)
    end
    i64.const 16
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;28;) (type $out-i64) (result i64)
    block (result i64) ;; label = @1
      i64.const 16
      i64.const 0
      call $finite_wasm_stack
      i64.const 3
      call $finite_wasm_gas
      i64.const 100
      i32.const 5
      call_indirect (type $over-i64)
    end
    i64.const 16
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;29;) (type $out-i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 8
      i64.const 0
      call $finite_wasm_stack
      i64.const 3
      call $finite_wasm_gas
      i32.const 32
      i32.const 4
      call_indirect (type $over-i32)
    end
    i64.const 8
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;30;) (type $out-i64) (result i64)
    block (result i64) ;; label = @1
      i64.const 16
      i64.const 0
      call $finite_wasm_stack
      i64.const 3
      call $finite_wasm_gas
      i64.const 64
      i32.const 5
      call_indirect (type $over-i64)
    end
    i64.const 16
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;31;) (type $out-f32) (result f32)
    block (result f32) ;; label = @1
      i64.const 8
      i64.const 0
      call $finite_wasm_stack
      i64.const 3
      call $finite_wasm_gas
      f32.const 0x1.51eb86p+0 (;=1.32;)
      i32.const 6
      call_indirect (type $over-f32)
    end
    i64.const 8
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;32;) (type $out-f64) (result f64)
    block (result f64) ;; label = @1
      i64.const 16
      i64.const 0
      call $finite_wasm_stack
      i64.const 3
      call $finite_wasm_gas
      f64.const 0x1.a3d70a3d70a3dp+0 (;=1.64;)
      i32.const 7
      call_indirect (type $over-f64)
    end
    i64.const 16
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;33;) (type $out-i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 12
      i64.const 0
      call $finite_wasm_stack
      i64.const 4
      call $finite_wasm_gas
      f32.const 0x1.00ccccp+5 (;=32.1;)
      i32.const 32
      i32.const 8
      call_indirect (type $f32-i32)
    end
    i64.const 12
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;34;) (type $out-i64) (result i64)
    block (result i64) ;; label = @1
      i64.const 16
      i64.const 0
      call $finite_wasm_stack
      i64.const 4
      call $finite_wasm_gas
      i32.const 32
      i64.const 64
      i32.const 9
      call_indirect (type $i32-i64)
    end
    i64.const 16
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;35;) (type $out-f32) (result f32)
    block (result f32) ;; label = @1
      i64.const 16
      i64.const 0
      call $finite_wasm_stack
      i64.const 4
      call $finite_wasm_gas
      f64.const 0x1p+6 (;=64;)
      f32.const 0x1p+5 (;=32;)
      i32.const 10
      call_indirect (type $f64-f32)
    end
    i64.const 16
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;36;) (type $out-f64) (result f64)
    block (result f64) ;; label = @1
      i64.const 20
      i64.const 0
      call $finite_wasm_stack
      i64.const 4
      call $finite_wasm_gas
      i64.const 64
      f64.const 0x1.0066666666666p+6 (;=64.1;)
      i32.const 11
      call_indirect (type $i64-f64)
    end
    i64.const 20
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;37;) (type $out-f64-i32) (result f64 i32)
    block (type $out-f64-i32) (result f64 i32) ;; label = @1
      i64.const 16
      i64.const 0
      call $finite_wasm_stack
      i64.const 2
      call $finite_wasm_gas
      i32.const 29
      call_indirect (type $out-f64-i32)
    end
    i64.const 16
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;38;) (type 24) (result i32 f64)
    block (type 24) (result i32 f64) ;; label = @1
      i64.const 16
      i64.const 0
      call $finite_wasm_stack
      i64.const 4
      call $finite_wasm_gas
      i32.const 1
      f64.const 0x1p+1 (;=2;)
      i32.const 30
      call_indirect (type $over-i32-f64)
    end
    i64.const 16
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;39;) (type 25) (result i64 i32)
    block (type 25) (result i64 i32) ;; label = @1
      i64.const 16
      i64.const 0
      call $finite_wasm_stack
      i64.const 4
      call $finite_wasm_gas
      i32.const 1
      i64.const 2
      i32.const 31
      call_indirect (type $swap-i32-i64)
    end
    i64.const 16
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;40;) (type $i32-i64) (param i32 i64) (result i64)
    block (result i64) ;; label = @1
      i64.const 16
      i64.const 2
      call $finite_wasm_stack
      i64.const 3
      call $finite_wasm_gas
      local.get 1
      local.get 0
      call_indirect (type $over-i64)
    end
    i64.const 16
    i64.const 2
    call $finite_wasm_unstack
  )
  (func (;41;) (type 26) (param i32) (result i64)
    block (result i64) ;; label = @1
      i64.const 16
      i64.const 1
      call $finite_wasm_stack
      i64.const 3
      call $finite_wasm_gas
      i64.const 9
      local.get 0
      call_indirect (type $over-i64-duplicate)
    end
    i64.const 16
    i64.const 1
    call $finite_wasm_unstack
  )
  (func (;42;) (type $over-i32) (param i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 8
      i64.const 1
      call $finite_wasm_stack
      i64.const 3
      call $finite_wasm_gas
      i32.const 9
      local.get 0
      call_indirect (type $over-i32-duplicate)
    end
    i64.const 8
    i64.const 1
    call $finite_wasm_unstack
  )
  (func (;43;) (type 27) (param i32) (result f32)
    block (result f32) ;; label = @1
      i64.const 8
      i64.const 1
      call $finite_wasm_stack
      i64.const 3
      call $finite_wasm_gas
      f32.const 0x1.2p+3 (;=9;)
      local.get 0
      call_indirect (type $over-f32-duplicate)
    end
    i64.const 8
    i64.const 1
    call $finite_wasm_unstack
  )
  (func (;44;) (type 28) (param i32) (result f64)
    block (result f64) ;; label = @1
      i64.const 16
      i64.const 1
      call $finite_wasm_stack
      i64.const 3
      call $finite_wasm_gas
      f64.const 0x1.2p+3 (;=9;)
      local.get 0
      call_indirect (type $over-f64-duplicate)
    end
    i64.const 16
    i64.const 1
    call $finite_wasm_unstack
  )
  (func $fac-i64 (;45;) (type $over-i64) (param i64) (result i64)
    block (result i64) ;; label = @1
      i64.const 24
      i64.const 1
      call $finite_wasm_stack
      i64.const 3
      call $finite_wasm_gas
      local.get 0
      i64.eqz
      if (result i64) ;; label = @2
        i64.const 1
        call $finite_wasm_gas
        i64.const 1
      else
        i64.const 6
        call $finite_wasm_gas
        local.get 0
        local.get 0
        i64.const 1
        i64.sub
        i32.const 12
        call_indirect (type $over-i64)
        i64.const 1
        call $finite_wasm_gas
        i64.mul
      end
    end
    i64.const 24
    i64.const 1
    call $finite_wasm_unstack
  )
  (func $fib-i64 (;46;) (type $over-i64) (param i64) (result i64)
    block (result i64) ;; label = @1
      i64.const 32
      i64.const 1
      call $finite_wasm_stack
      i64.const 4
      call $finite_wasm_gas
      local.get 0
      i64.const 1
      i64.le_u
      if (result i64) ;; label = @2
        i64.const 1
        call $finite_wasm_gas
        i64.const 1
      else
        i64.const 5
        call $finite_wasm_gas
        local.get 0
        i64.const 2
        i64.sub
        i32.const 13
        call_indirect (type $over-i64)
        i64.const 5
        call $finite_wasm_gas
        local.get 0
        i64.const 1
        i64.sub
        i32.const 13
        call_indirect (type $over-i64)
        i64.const 1
        call $finite_wasm_gas
        i64.add
      end
    end
    i64.const 32
    i64.const 1
    call $finite_wasm_unstack
  )
  (func $fac-i32 (;47;) (type $over-i32) (param i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 12
      i64.const 1
      call $finite_wasm_stack
      i64.const 3
      call $finite_wasm_gas
      local.get 0
      i32.eqz
      if (result i32) ;; label = @2
        i64.const 1
        call $finite_wasm_gas
        i32.const 1
      else
        i64.const 6
        call $finite_wasm_gas
        local.get 0
        local.get 0
        i32.const 1
        i32.sub
        i32.const 23
        call_indirect (type $over-i32)
        i64.const 1
        call $finite_wasm_gas
        i32.mul
      end
    end
    i64.const 12
    i64.const 1
    call $finite_wasm_unstack
  )
  (func $fac-f32 (;48;) (type $over-f32) (param f32) (result f32)
    block (result f32) ;; label = @1
      i64.const 12
      i64.const 1
      call $finite_wasm_stack
      i64.const 4
      call $finite_wasm_gas
      local.get 0
      f32.const 0x0p+0 (;=0;)
      f32.eq
      if (result f32) ;; label = @2
        i64.const 1
        call $finite_wasm_gas
        f32.const 0x1p+0 (;=1;)
      else
        i64.const 6
        call $finite_wasm_gas
        local.get 0
        local.get 0
        f32.const 0x1p+0 (;=1;)
        f32.sub
        i32.const 24
        call_indirect (type $over-f32)
        i64.const 1
        call $finite_wasm_gas
        f32.mul
      end
    end
    i64.const 12
    i64.const 1
    call $finite_wasm_unstack
  )
  (func $fac-f64 (;49;) (type $over-f64) (param f64) (result f64)
    block (result f64) ;; label = @1
      i64.const 24
      i64.const 1
      call $finite_wasm_stack
      i64.const 4
      call $finite_wasm_gas
      local.get 0
      f64.const 0x0p+0 (;=0;)
      f64.eq
      if (result f64) ;; label = @2
        i64.const 1
        call $finite_wasm_gas
        f64.const 0x1p+0 (;=1;)
      else
        i64.const 6
        call $finite_wasm_gas
        local.get 0
        local.get 0
        f64.const 0x1p+0 (;=1;)
        f64.sub
        i32.const 25
        call_indirect (type $over-f64)
        i64.const 1
        call $finite_wasm_gas
        f64.mul
      end
    end
    i64.const 24
    i64.const 1
    call $finite_wasm_unstack
  )
  (func $fib-i32 (;50;) (type $over-i32) (param i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 16
      i64.const 1
      call $finite_wasm_stack
      i64.const 4
      call $finite_wasm_gas
      local.get 0
      i32.const 1
      i32.le_u
      if (result i32) ;; label = @2
        i64.const 1
        call $finite_wasm_gas
        i32.const 1
      else
        i64.const 5
        call $finite_wasm_gas
        local.get 0
        i32.const 2
        i32.sub
        i32.const 26
        call_indirect (type $over-i32)
        i64.const 5
        call $finite_wasm_gas
        local.get 0
        i32.const 1
        i32.sub
        i32.const 26
        call_indirect (type $over-i32)
        i64.const 1
        call $finite_wasm_gas
        i32.add
      end
    end
    i64.const 16
    i64.const 1
    call $finite_wasm_unstack
  )
  (func $fib-f32 (;51;) (type $over-f32) (param f32) (result f32)
    block (result f32) ;; label = @1
      i64.const 16
      i64.const 1
      call $finite_wasm_stack
      i64.const 4
      call $finite_wasm_gas
      local.get 0
      f32.const 0x1p+0 (;=1;)
      f32.le
      if (result f32) ;; label = @2
        i64.const 1
        call $finite_wasm_gas
        f32.const 0x1p+0 (;=1;)
      else
        i64.const 5
        call $finite_wasm_gas
        local.get 0
        f32.const 0x1p+1 (;=2;)
        f32.sub
        i32.const 27
        call_indirect (type $over-f32)
        i64.const 5
        call $finite_wasm_gas
        local.get 0
        f32.const 0x1p+0 (;=1;)
        f32.sub
        i32.const 27
        call_indirect (type $over-f32)
        i64.const 1
        call $finite_wasm_gas
        f32.add
      end
    end
    i64.const 16
    i64.const 1
    call $finite_wasm_unstack
  )
  (func $fib-f64 (;52;) (type $over-f64) (param f64) (result f64)
    block (result f64) ;; label = @1
      i64.const 32
      i64.const 1
      call $finite_wasm_stack
      i64.const 4
      call $finite_wasm_gas
      local.get 0
      f64.const 0x1p+0 (;=1;)
      f64.le
      if (result f64) ;; label = @2
        i64.const 1
        call $finite_wasm_gas
        f64.const 0x1p+0 (;=1;)
      else
        i64.const 5
        call $finite_wasm_gas
        local.get 0
        f64.const 0x1p+1 (;=2;)
        f64.sub
        i32.const 28
        call_indirect (type $over-f64)
        i64.const 5
        call $finite_wasm_gas
        local.get 0
        f64.const 0x1p+0 (;=1;)
        f64.sub
        i32.const 28
        call_indirect (type $over-f64)
        i64.const 1
        call $finite_wasm_gas
        f64.add
      end
    end
    i64.const 32
    i64.const 1
    call $finite_wasm_unstack
  )
  (func $even (;53;) (type $over-i32) (param i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 8
      i64.const 1
      call $finite_wasm_stack
      i64.const 3
      call $finite_wasm_gas
      local.get 0
      i32.eqz
      if (result i32) ;; label = @2
        i64.const 1
        call $finite_wasm_gas
        i32.const 44
      else
        i64.const 5
        call $finite_wasm_gas
        local.get 0
        i32.const 1
        i32.sub
        i32.const 15
        call_indirect (type $over-i32)
      end
    end
    i64.const 8
    i64.const 1
    call $finite_wasm_unstack
  )
  (func $odd (;54;) (type $over-i32) (param i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 8
      i64.const 1
      call $finite_wasm_stack
      i64.const 3
      call $finite_wasm_gas
      local.get 0
      i32.eqz
      if (result i32) ;; label = @2
        i64.const 1
        call $finite_wasm_gas
        i32.const 99
      else
        i64.const 5
        call $finite_wasm_gas
        local.get 0
        i32.const 1
        i32.sub
        i32.const 14
        call_indirect (type $over-i32)
      end
    end
    i64.const 8
    i64.const 1
    call $finite_wasm_unstack
  )
  (func $runaway (;55;) (type $proc)
    block ;; label = @1
      i64.const 4
      i64.const 0
      call $finite_wasm_stack
      i64.const 2
      call $finite_wasm_gas
      i32.const 16
      call_indirect (type $proc)
    end
    i64.const 4
    i64.const 0
    call $finite_wasm_unstack
  )
  (func $mutual-runaway1 (;56;) (type $proc)
    block ;; label = @1
      i64.const 4
      i64.const 0
      call $finite_wasm_stack
      i64.const 2
      call $finite_wasm_gas
      i32.const 18
      call_indirect (type $proc)
    end
    i64.const 4
    i64.const 0
    call $finite_wasm_unstack
  )
  (func $mutual-runaway2 (;57;) (type $proc)
    block ;; label = @1
      i64.const 4
      i64.const 0
      call $finite_wasm_stack
      i64.const 2
      call $finite_wasm_gas
      i32.const 17
      call_indirect (type $proc)
    end
    i64.const 4
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;58;) (type $out-i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 16
      i64.const 0
      call $finite_wasm_stack
      i64.const 2
      call $finite_wasm_gas
      i32.const 0
      call_indirect (type $out-i32)
      i64.const 3
      call $finite_wasm_gas
      i32.const 2
      i32.const 3
      select
    end
    i64.const 16
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;59;) (type $out-i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 16
      i64.const 0
      call $finite_wasm_stack
      i64.const 3
      call $finite_wasm_gas
      i32.const 2
      i32.const 0
      call_indirect (type $out-i32)
      i64.const 2
      call $finite_wasm_gas
      i32.const 3
      select
    end
    i64.const 16
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;60;) (type $out-i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 16
      i64.const 0
      call $finite_wasm_stack
      i64.const 4
      call $finite_wasm_gas
      i32.const 2
      i32.const 3
      i32.const 0
      call_indirect (type $out-i32)
      i64.const 1
      call $finite_wasm_gas
      select
    end
    i64.const 16
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;61;) (type $out-i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 8
      i64.const 0
      call $finite_wasm_stack
      i64.const 2
      call $finite_wasm_gas
      i32.const 0
      call_indirect (type $out-i32)
      i64.const 1
      call $finite_wasm_gas
      if (result i32) ;; label = @2
        i64.const 1
        call $finite_wasm_gas
        i32.const 1
      else
        i64.const 1
        call $finite_wasm_gas
        i32.const 2
      end
    end
    i64.const 8
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;62;) (type $out-i64) (result i64)
    block (result i64) ;; label = @1
      i64.const 16
      i64.const 0
      call $finite_wasm_stack
      i64.const 3
      call $finite_wasm_gas
      block (result i64) ;; label = @2
        i32.const 1
        call_indirect (type $out-i64)
        i64.const 2
        call $finite_wasm_gas
        i32.const 2
        br_if 0 (;@2;)
      end
    end
    i64.const 16
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;63;) (type $out-i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 12
      i64.const 0
      call $finite_wasm_stack
      i64.const 4
      call $finite_wasm_gas
      block (result i32) ;; label = @2
        i32.const 2
        i32.const 0
        call_indirect (type $out-i32)
        i64.const 1
        call $finite_wasm_gas
        br_if 0 (;@2;)
      end
    end
    i64.const 12
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;64;) (type $out-f32) (result f32)
    block (result f32) ;; label = @1
      i64.const 12
      i64.const 0
      call $finite_wasm_stack
      i64.const 3
      call $finite_wasm_gas
      block (result f32) ;; label = @2
        i32.const 2
        call_indirect (type $out-f32)
        i64.const 2
        call $finite_wasm_gas
        i32.const 2
        br_table 0 (;@2;) 0 (;@2;)
      end
    end
    i64.const 12
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;65;) (type $out-i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 12
      i64.const 0
      call $finite_wasm_stack
      i64.const 4
      call $finite_wasm_gas
      block (result i32) ;; label = @2
        i32.const 2
        i32.const 0
        call_indirect (type $out-i32)
        i64.const 1
        call $finite_wasm_gas
        br_table 0 (;@2;) 0 (;@2;)
      end
    end
    i64.const 12
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;66;) (type $proc)
    block ;; label = @1
      i64.const 12
      i64.const 0
      call $finite_wasm_stack
      i64.const 2
      call $finite_wasm_gas
      i32.const 0
      call_indirect (type $out-i32)
      i64.const 2
      call $finite_wasm_gas
      i32.const 1
      i32.store
    end
    i64.const 12
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;67;) (type $proc)
    block ;; label = @1
      i64.const 16
      i64.const 0
      call $finite_wasm_stack
      i64.const 3
      call $finite_wasm_gas
      i32.const 10
      i32.const 3
      call_indirect (type $out-f64)
      i64.const 1
      call $finite_wasm_gas
      f64.store
    end
    i64.const 16
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;68;) (type $out-i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 8
      i64.const 0
      call $finite_wasm_stack
      i64.const 2
      call $finite_wasm_gas
      i32.const 0
      call_indirect (type $out-i32)
      i64.const 1
      call $finite_wasm_gas
      memory.grow
    end
    i64.const 8
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;69;) (type $out-i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 8
      i64.const 0
      call $finite_wasm_stack
      i64.const 3
      call $finite_wasm_gas
      i32.const 1
      i32.const 4
      call_indirect (type $over-i32)
      i64.const 1
      call $finite_wasm_gas
      i64.const 8
      i64.const 0
      call $finite_wasm_unstack
      return
    end
    i64.const 8
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;70;) (type $proc)
    block ;; label = @1
      i64.const 16
      i64.const 0
      call $finite_wasm_stack
      i64.const 3
      call $finite_wasm_gas
      i64.const 1
      i32.const 5
      call_indirect (type $over-i64)
      i64.const 1
      call $finite_wasm_gas
      drop
    end
    i64.const 16
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;71;) (type $out-f32) (result f32)
    block (result f32) ;; label = @1
      i64.const 8
      i64.const 0
      call $finite_wasm_stack
      i64.const 4
      call $finite_wasm_gas
      block (result f32) ;; label = @2
        f32.const 0x1p+0 (;=1;)
        i32.const 6
        call_indirect (type $over-f32)
        i64.const 1
        call $finite_wasm_gas
        br 0 (;@2;)
      end
    end
    i64.const 8
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;72;) (type $out-f64) (result f64)
    (local f64)
    block (result f64) ;; label = @1
      i64.const 16
      i64.const 1
      call $finite_wasm_stack
      i64.const 3
      call $finite_wasm_gas
      f64.const 0x1p+0 (;=1;)
      i32.const 7
      call_indirect (type $over-f64)
      i64.const 2
      call $finite_wasm_gas
      local.set 0
      local.get 0
    end
    i64.const 16
    i64.const 1
    call $finite_wasm_unstack
  )
  (func (;73;) (type $out-f64) (result f64)
    (local f64)
    block (result f64) ;; label = @1
      i64.const 16
      i64.const 1
      call $finite_wasm_stack
      i64.const 3
      call $finite_wasm_gas
      f64.const 0x1p+0 (;=1;)
      i32.const 7
      call_indirect (type $over-f64)
      i64.const 1
      call $finite_wasm_gas
      local.tee 0
    end
    i64.const 16
    i64.const 1
    call $finite_wasm_unstack
  )
  (func (;74;) (type $out-f64) (result f64)
    block (result f64) ;; label = @1
      i64.const 16
      i64.const 0
      call $finite_wasm_stack
      i64.const 3
      call $finite_wasm_gas
      f64.const 0x1p+0 (;=1;)
      i32.const 7
      call_indirect (type $over-f64)
      i64.const 2
      call $finite_wasm_gas
      global.set $a
      global.get $a
    end
    i64.const 16
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;75;) (type $out-i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 8
      i64.const 0
      call $finite_wasm_stack
      i64.const 2
      call $finite_wasm_gas
      i32.const 0
      call_indirect (type $out-i32)
      i64.const 1
      call $finite_wasm_gas
      i32.load
    end
    i64.const 8
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;76;) (type $out-f32) (result f32)
    block (result f32) ;; label = @1
      i64.const 8
      i64.const 0
      call $finite_wasm_stack
      i64.const 4
      call $finite_wasm_gas
      block (result f32) ;; label = @2
        f32.const 0x0p+0 (;=0;)
        i32.const 6
        call_indirect (type $over-f32)
        i64.const 1
        call $finite_wasm_gas
        f32.sqrt
      end
    end
    i64.const 8
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;77;) (type $out-i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 12
      i64.const 0
      call $finite_wasm_stack
      i64.const 4
      call $finite_wasm_gas
      block (result i32) ;; label = @2
        i32.const 1
        i32.const 4
        call_indirect (type $over-i32)
        i64.const 2
        call $finite_wasm_gas
        i32.const 10
        i32.add
      end
    end
    i64.const 12
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;78;) (type $out-i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 12
      i64.const 0
      call $finite_wasm_stack
      i64.const 5
      call $finite_wasm_gas
      block (result i32) ;; label = @2
        i32.const 10
        i32.const 1
        i32.const 4
        call_indirect (type $over-i32)
        i64.const 1
        call $finite_wasm_gas
        i32.sub
      end
    end
    i64.const 12
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;79;) (type $out-i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 8
      i64.const 0
      call $finite_wasm_stack
      i64.const 4
      call $finite_wasm_gas
      block (result i32) ;; label = @2
        i32.const 1
        i32.const 4
        call_indirect (type $over-i32)
        i64.const 1
        call $finite_wasm_gas
        i32.eqz
      end
    end
    i64.const 8
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;80;) (type $out-i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 12
      i64.const 0
      call $finite_wasm_stack
      i64.const 4
      call $finite_wasm_gas
      block (result i32) ;; label = @2
        i32.const 1
        i32.const 4
        call_indirect (type $over-i32)
        i64.const 2
        call $finite_wasm_gas
        i32.const 10
        i32.le_u
      end
    end
    i64.const 12
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;81;) (type $out-i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 12
      i64.const 0
      call $finite_wasm_stack
      i64.const 5
      call $finite_wasm_gas
      block (result i32) ;; label = @2
        i32.const 10
        i32.const 1
        i32.const 4
        call_indirect (type $over-i32)
        i64.const 1
        call $finite_wasm_gas
        i32.ne
      end
    end
    i64.const 12
    i64.const 0
    call $finite_wasm_unstack
  )
  (func (;82;) (type $out-i64) (result i64)
    block (result i64) ;; label = @1
      i64.const 12
      i64.const 0
      call $finite_wasm_stack
      i64.const 4
      call $finite_wasm_gas
      block (result i64) ;; label = @2
        i32.const 1
        i32.const 4
        call_indirect (type $over-i32)
        i64.const 1
        call $finite_wasm_gas
        i64.extend_i32_s
      end
    end
    i64.const 12
    i64.const 0
    call $finite_wasm_unstack
  )
)

(assert_return (invoke "type-i32") (i32.const 0x132))
(assert_return (invoke "type-i64") (i64.const 0x164))
(assert_return (invoke "type-f32") (f32.const 0xf32))
(assert_return (invoke "type-f64") (f64.const 0xf64))
(assert_return (invoke "type-f64-i32") (f64.const 0xf64) (i32.const 32))

(assert_return (invoke "type-index") (i64.const 100))

(assert_return (invoke "type-first-i32") (i32.const 32))
(assert_return (invoke "type-first-i64") (i64.const 64))
(assert_return (invoke "type-first-f32") (f32.const 1.32))
(assert_return (invoke "type-first-f64") (f64.const 1.64))

(assert_return (invoke "type-second-i32") (i32.const 32))
(assert_return (invoke "type-second-i64") (i64.const 64))
(assert_return (invoke "type-second-f32") (f32.const 32))
(assert_return (invoke "type-second-f64") (f64.const 64.1))

(assert_return (invoke "type-all-f64-i32") (f64.const 0xf64) (i32.const 32))
(assert_return (invoke "type-all-i32-f64") (i32.const 1) (f64.const 2))
(assert_return (invoke "type-all-i32-i64") (i64.const 2) (i32.const 1))

(assert_return (invoke "dispatch" (i32.const 5) (i64.const 2)) (i64.const 2))
(assert_return (invoke "dispatch" (i32.const 5) (i64.const 5)) (i64.const 5))
(assert_return (invoke "dispatch" (i32.const 12) (i64.const 5)) (i64.const 120))
(assert_return (invoke "dispatch" (i32.const 13) (i64.const 5)) (i64.const 8))
(assert_return (invoke "dispatch" (i32.const 20) (i64.const 2)) (i64.const 2))
(assert_trap (invoke "dispatch" (i32.const 0) (i64.const 2)) "indirect call type mismatch")
(assert_trap (invoke "dispatch" (i32.const 15) (i64.const 2)) "indirect call type mismatch")
(assert_trap (invoke "dispatch" (i32.const 32) (i64.const 2)) "undefined element")
(assert_trap (invoke "dispatch" (i32.const -1) (i64.const 2)) "undefined element")
(assert_trap (invoke "dispatch" (i32.const 1213432423) (i64.const 2)) "undefined element")

(assert_return (invoke "dispatch-structural-i64" (i32.const 5)) (i64.const 9))
(assert_return (invoke "dispatch-structural-i64" (i32.const 12)) (i64.const 362880))
(assert_return (invoke "dispatch-structural-i64" (i32.const 13)) (i64.const 55))
(assert_return (invoke "dispatch-structural-i64" (i32.const 20)) (i64.const 9))
(assert_trap (invoke "dispatch-structural-i64" (i32.const 11)) "indirect call type mismatch")
(assert_trap (invoke "dispatch-structural-i64" (i32.const 22)) "indirect call type mismatch")

(assert_return (invoke "dispatch-structural-i32" (i32.const 4)) (i32.const 9))
(assert_return (invoke "dispatch-structural-i32" (i32.const 23)) (i32.const 362880))
(assert_return (invoke "dispatch-structural-i32" (i32.const 26)) (i32.const 55))
(assert_return (invoke "dispatch-structural-i32" (i32.const 19)) (i32.const 9))
(assert_trap (invoke "dispatch-structural-i32" (i32.const 9)) "indirect call type mismatch")
(assert_trap (invoke "dispatch-structural-i32" (i32.const 21)) "indirect call type mismatch")

(assert_return (invoke "dispatch-structural-f32" (i32.const 6)) (f32.const 9.0))
(assert_return (invoke "dispatch-structural-f32" (i32.const 24)) (f32.const 362880.0))
(assert_return (invoke "dispatch-structural-f32" (i32.const 27)) (f32.const 55.0))
(assert_return (invoke "dispatch-structural-f32" (i32.const 21)) (f32.const 9.0))
(assert_trap (invoke "dispatch-structural-f32" (i32.const 8)) "indirect call type mismatch")
(assert_trap (invoke "dispatch-structural-f32" (i32.const 19)) "indirect call type mismatch")

(assert_return (invoke "dispatch-structural-f64" (i32.const 7)) (f64.const 9.0))
(assert_return (invoke "dispatch-structural-f64" (i32.const 25)) (f64.const 362880.0))
(assert_return (invoke "dispatch-structural-f64" (i32.const 28)) (f64.const 55.0))
(assert_return (invoke "dispatch-structural-f64" (i32.const 22)) (f64.const 9.0))
(assert_trap (invoke "dispatch-structural-f64" (i32.const 10)) "indirect call type mismatch")
(assert_trap (invoke "dispatch-structural-f64" (i32.const 18)) "indirect call type mismatch")

(assert_return (invoke "fac-i64" (i64.const 0)) (i64.const 1))
(assert_return (invoke "fac-i64" (i64.const 1)) (i64.const 1))
(assert_return (invoke "fac-i64" (i64.const 5)) (i64.const 120))
(assert_return (invoke "fac-i64" (i64.const 25)) (i64.const 7034535277573963776))

(assert_return (invoke "fac-i32" (i32.const 0)) (i32.const 1))
(assert_return (invoke "fac-i32" (i32.const 1)) (i32.const 1))
(assert_return (invoke "fac-i32" (i32.const 5)) (i32.const 120))
(assert_return (invoke "fac-i32" (i32.const 10)) (i32.const 3628800))

(assert_return (invoke "fac-f32" (f32.const 0.0)) (f32.const 1.0))
(assert_return (invoke "fac-f32" (f32.const 1.0)) (f32.const 1.0))
(assert_return (invoke "fac-f32" (f32.const 5.0)) (f32.const 120.0))
(assert_return (invoke "fac-f32" (f32.const 10.0)) (f32.const 3628800.0))

(assert_return (invoke "fac-f64" (f64.const 0.0)) (f64.const 1.0))
(assert_return (invoke "fac-f64" (f64.const 1.0)) (f64.const 1.0))
(assert_return (invoke "fac-f64" (f64.const 5.0)) (f64.const 120.0))
(assert_return (invoke "fac-f64" (f64.const 10.0)) (f64.const 3628800.0))

(assert_return (invoke "fib-i64" (i64.const 0)) (i64.const 1))
(assert_return (invoke "fib-i64" (i64.const 1)) (i64.const 1))
(assert_return (invoke "fib-i64" (i64.const 2)) (i64.const 2))
(assert_return (invoke "fib-i64" (i64.const 5)) (i64.const 8))
(assert_return (invoke "fib-i64" (i64.const 20)) (i64.const 10946))

(assert_return (invoke "fib-i32" (i32.const 0)) (i32.const 1))
(assert_return (invoke "fib-i32" (i32.const 1)) (i32.const 1))
(assert_return (invoke "fib-i32" (i32.const 2)) (i32.const 2))
(assert_return (invoke "fib-i32" (i32.const 5)) (i32.const 8))
(assert_return (invoke "fib-i32" (i32.const 20)) (i32.const 10946))

(assert_return (invoke "fib-f32" (f32.const 0.0)) (f32.const 1.0))
(assert_return (invoke "fib-f32" (f32.const 1.0)) (f32.const 1.0))
(assert_return (invoke "fib-f32" (f32.const 2.0)) (f32.const 2.0))
(assert_return (invoke "fib-f32" (f32.const 5.0)) (f32.const 8.0))
(assert_return (invoke "fib-f32" (f32.const 20.0)) (f32.const 10946.0))

(assert_return (invoke "fib-f64" (f64.const 0.0)) (f64.const 1.0))
(assert_return (invoke "fib-f64" (f64.const 1.0)) (f64.const 1.0))
(assert_return (invoke "fib-f64" (f64.const 2.0)) (f64.const 2.0))
(assert_return (invoke "fib-f64" (f64.const 5.0)) (f64.const 8.0))
(assert_return (invoke "fib-f64" (f64.const 20.0)) (f64.const 10946.0))

(assert_return (invoke "even" (i32.const 0)) (i32.const 44))
(assert_return (invoke "even" (i32.const 1)) (i32.const 99))
(assert_return (invoke "even" (i32.const 100)) (i32.const 44))
(assert_return (invoke "even" (i32.const 77)) (i32.const 99))
(assert_return (invoke "odd" (i32.const 0)) (i32.const 99))
(assert_return (invoke "odd" (i32.const 1)) (i32.const 44))
(assert_return (invoke "odd" (i32.const 200)) (i32.const 99))
(assert_return (invoke "odd" (i32.const 77)) (i32.const 44))

(assert_return (invoke "as-select-first") (i32.const 0x132))
(assert_return (invoke "as-select-mid") (i32.const 2))
(assert_return (invoke "as-select-last") (i32.const 2))

(assert_return (invoke "as-if-condition") (i32.const 1))

(assert_return (invoke "as-br_if-first") (i64.const 0x164))
(assert_return (invoke "as-br_if-last") (i32.const 2))

(assert_return (invoke "as-br_table-first") (f32.const 0xf32))
(assert_return (invoke "as-br_table-last") (i32.const 2))

(assert_return (invoke "as-store-first"))
(assert_return (invoke "as-store-last"))

(assert_return (invoke "as-memory.grow-value") (i32.const 1))
(assert_return (invoke "as-return-value") (i32.const 1))
(assert_return (invoke "as-drop-operand"))
(assert_return (invoke "as-br-value") (f32.const 1))
(assert_return (invoke "as-local.set-value") (f64.const 1))
(assert_return (invoke "as-local.tee-value") (f64.const 1))
(assert_return (invoke "as-global.set-value") (f64.const 1.0))
(assert_return (invoke "as-load-operand") (i32.const 1))

(assert_return (invoke "as-unary-operand") (f32.const 0x0p+0))
(assert_return (invoke "as-binary-left") (i32.const 11))
(assert_return (invoke "as-binary-right") (i32.const 9))
(assert_return (invoke "as-test-operand") (i32.const 0))
(assert_return (invoke "as-compare-left") (i32.const 1))
(assert_return (invoke "as-compare-right") (i32.const 1))
(assert_return (invoke "as-convert-operand") (i64.const 1))


;; Multiple tables

(module
  (type $ii-i (;0;) (func (param i32 i32) (result i32)))
  (type (;1;) (func))
  (type (;2;) (func (param i32 i32 i32) (result i32)))
  (type (;3;) (func (param i64)))
  (type (;4;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func $finite_wasm_gas (;0;) (type 3)))
  (import "spectest" "finite_wasm_stack" (func $finite_wasm_stack (;1;) (type 4)))
  (import "spectest" "finite_wasm_unstack" (func $finite_wasm_unstack (;2;) (type 4)))
  (table $t1 (;0;) 2 2 funcref)
  (table $t2 (;1;) 3 3 funcref)
  (table $t3 (;2;) 4 funcref)
  (export "call-1" (func 9))
  (export "call-2" (func 10))
  (export "call-3" (func 11))
  (elem (;0;) (table $t1) (i32.const 0) func $f $g)
  (elem (;1;) (table $t2) (i32.const 0) func $h $i $j)
  (elem (;2;) (table $t3) (i32.const 0) func $g $h)
  (elem (;3;) (table $t3) (i32.const 3) func $z)
  (func $f (;3;) (type $ii-i) (param i32 i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 8
      i64.const 2
      call $finite_wasm_stack
      i64.const 3
      call $finite_wasm_gas
      local.get 0
      local.get 1
      i32.add
    end
    i64.const 8
    i64.const 2
    call $finite_wasm_unstack
  )
  (func $g (;4;) (type $ii-i) (param i32 i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 8
      i64.const 2
      call $finite_wasm_stack
      i64.const 3
      call $finite_wasm_gas
      local.get 0
      local.get 1
      i32.sub
    end
    i64.const 8
    i64.const 2
    call $finite_wasm_unstack
  )
  (func $h (;5;) (type $ii-i) (param i32 i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 8
      i64.const 2
      call $finite_wasm_stack
      i64.const 3
      call $finite_wasm_gas
      local.get 0
      local.get 1
      i32.mul
    end
    i64.const 8
    i64.const 2
    call $finite_wasm_unstack
  )
  (func $i (;6;) (type $ii-i) (param i32 i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 8
      i64.const 2
      call $finite_wasm_stack
      i64.const 3
      call $finite_wasm_gas
      local.get 0
      local.get 1
      i32.div_u
    end
    i64.const 8
    i64.const 2
    call $finite_wasm_unstack
  )
  (func $j (;7;) (type $ii-i) (param i32 i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 8
      i64.const 2
      call $finite_wasm_stack
      i64.const 3
      call $finite_wasm_gas
      local.get 0
      local.get 1
      i32.rem_u
    end
    i64.const 8
    i64.const 2
    call $finite_wasm_unstack
  )
  (func $z (;8;) (type 1))
  (func (;9;) (type 2) (param i32 i32 i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 12
      i64.const 3
      call $finite_wasm_stack
      i64.const 4
      call $finite_wasm_gas
      local.get 0
      local.get 1
      local.get 2
      call_indirect (type $ii-i)
    end
    i64.const 12
    i64.const 3
    call $finite_wasm_unstack
  )
  (func (;10;) (type 2) (param i32 i32 i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 12
      i64.const 3
      call $finite_wasm_stack
      i64.const 4
      call $finite_wasm_gas
      local.get 0
      local.get 1
      local.get 2
      call_indirect $t2 (type $ii-i)
    end
    i64.const 12
    i64.const 3
    call $finite_wasm_unstack
  )
  (func (;11;) (type 2) (param i32 i32 i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 12
      i64.const 3
      call $finite_wasm_stack
      i64.const 4
      call $finite_wasm_gas
      local.get 0
      local.get 1
      local.get 2
      call_indirect $t3 (type $ii-i)
    end
    i64.const 12
    i64.const 3
    call $finite_wasm_unstack
  )
)

(assert_return (invoke "call-1" (i32.const 2) (i32.const 3) (i32.const 0)) (i32.const 5))
(assert_return (invoke "call-1" (i32.const 2) (i32.const 3) (i32.const 1)) (i32.const -1))
(assert_trap (invoke "call-1" (i32.const 2) (i32.const 3) (i32.const 2)) "undefined element")

(assert_return (invoke "call-2" (i32.const 2) (i32.const 3) (i32.const 0)) (i32.const 6))
(assert_return (invoke "call-2" (i32.const 2) (i32.const 3) (i32.const 1)) (i32.const 0))
(assert_return (invoke "call-2" (i32.const 2) (i32.const 3) (i32.const 2)) (i32.const 2))
(assert_trap (invoke "call-2" (i32.const 2) (i32.const 3) (i32.const 3)) "undefined element")

(assert_return (invoke "call-3" (i32.const 2) (i32.const 3) (i32.const 0)) (i32.const -1))
(assert_return (invoke "call-3" (i32.const 2) (i32.const 3) (i32.const 1)) (i32.const 6))
(assert_trap (invoke "call-3" (i32.const 2) (i32.const 3) (i32.const 2)) "uninitialized element")
(assert_trap (invoke "call-3" (i32.const 2) (i32.const 3) (i32.const 3)) "indirect call type mismatch")
(assert_trap (invoke "call-3" (i32.const 2) (i32.const 3) (i32.const 4)) "undefined element")


;; Invalid syntax

(module
  (type (;0;) (func))
  (type (;1;) (func (result i32)))
  (type (;2;) (func (param i64)))
  (type (;3;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 2)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 3)))
  (import "spectest" "finite_wasm_unstack" (func (;2;) (type 3)))
  (table (;0;) 1 funcref)
  (func (;3;) (type 0)
    i64.const 1
    call 0
    unreachable
    call_indirect (type 0)
  )
  (func (;4;) (type 0)
    i64.const 1
    call 0
    unreachable
    call_indirect (type 0)
    nop
  )
  (func (;5;) (type 0)
    i64.const 1
    call 0
    unreachable
    call_indirect (type 0)
    call_indirect (type 0)
  )
  (func (;6;) (type 0)
    i64.const 1
    call 0
    unreachable
    call_indirect (type 0)
    call_indirect (type 0)
  )
  (func (;7;) (type 0)
    i64.const 1
    call 0
    unreachable
    call_indirect (type 0)
    call_indirect (type 0)
    call_indirect (type 0)
  )
  (func (;8;) (type 0)
    i64.const 1
    call 0
    unreachable
    call_indirect (type 0)
  )
  (func (;9;) (type 0)
    i64.const 1
    call 0
    unreachable
    call_indirect (type 0)
  )
  (func (;10;) (type 0)
    i64.const 1
    call 0
    unreachable
    call_indirect (type 0)
    call_indirect (type 0)
  )
  (func (;11;) (type 0)
    i64.const 1
    call 0
    unreachable
    call_indirect (type 0)
    call_indirect (type 0)
  )
  (func (;12;) (type 1) (result i32)
    i64.const 1
    call 0
    unreachable
    call_indirect (type 0)
    select
  )
  (func (;13;) (type 1) (result i32)
    i64.const 1
    call 0
    unreachable
    call_indirect (type 0)
    select
    call_indirect (type 0)
  )
)

