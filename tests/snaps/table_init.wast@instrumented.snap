(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func (param i64)))
  (type (;2;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 1)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 2)))
  (func (;2;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 0
  )
  (func (;3;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 1
  )
  (func (;4;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 2
  )
  (func (;5;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 3
  )
  (func (;6;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 4
  )
  (export "ef0" (func 2))
  (export "ef1" (func 3))
  (export "ef2" (func 4))
  (export "ef3" (func 5))
  (export "ef4" (func 6))
)
(register "a")

(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func))
  (type (;2;) (func (param i32) (result i32)))
  (type (;3;) (func (param i64)))
  (type (;4;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 3)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 4)))
  (import "a" "ef0" (func (;2;) (type 0)))
  (import "a" "ef1" (func (;3;) (type 0)))
  (import "a" "ef2" (func (;4;) (type 0)))
  (import "a" "ef3" (func (;5;) (type 0)))
  (import "a" "ef4" (func (;6;) (type 0)))
  (func (;7;) (type 0) (result i32)
    i64.const 0
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 5
  )
  (func (;8;) (type 0) (result i32)
    i64.const 0
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 6
  )
  (func (;9;) (type 0) (result i32)
    i64.const 0
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 7
  )
  (func (;10;) (type 0) (result i32)
    i64.const 0
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 8
  )
  (func (;11;) (type 0) (result i32)
    i64.const 0
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 9
  )
  (func (;12;) (type 1)
    i64.const 4
    i64.const 0
    call 1
    i64.const 3
    call 0
    i32.const 7
    i32.const 0
    i32.const 4
    i64.const 1
    call 0
    table.init 1
    i64.const 1
    call 0
  )
  (func (;13;) (type 2) (param i32) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get 0
    call_indirect (type 0)
    i64.const 1
    call 0
  )
  (table $t0 (;0;) 30 30 funcref)
  (table $t1 (;1;) 30 30 funcref)
  (export "test" (func 12))
  (export "check" (func 13))
  (elem (;0;) (i32.const 2) func 5 3 6 3)
  (elem (;1;) funcref (ref.func 4) (ref.func 9) (ref.func 3) (ref.func 10))
  (elem (;2;) (i32.const 12) func 9 7 4 5 8)
  (elem (;3;) funcref (ref.func 7) (ref.func 11) (ref.func 4) (ref.func 9) (ref.func 8))
)
(invoke "test")
(assert_trap (invoke "check" (i32.const 0)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 1)) "uninitialized element")
(assert_return (invoke "check" (i32.const 2)) (i32.const 3))
(assert_return (invoke "check" (i32.const 3)) (i32.const 1))
(assert_return (invoke "check" (i32.const 4)) (i32.const 4))
(assert_return (invoke "check" (i32.const 5)) (i32.const 1))
(assert_trap (invoke "check" (i32.const 6)) "uninitialized element")
(assert_return (invoke "check" (i32.const 7)) (i32.const 2))
(assert_return (invoke "check" (i32.const 8)) (i32.const 7))
(assert_return (invoke "check" (i32.const 9)) (i32.const 1))
(assert_return (invoke "check" (i32.const 10)) (i32.const 8))
(assert_trap (invoke "check" (i32.const 11)) "uninitialized element")
(assert_return (invoke "check" (i32.const 12)) (i32.const 7))
(assert_return (invoke "check" (i32.const 13)) (i32.const 5))
(assert_return (invoke "check" (i32.const 14)) (i32.const 2))
(assert_return (invoke "check" (i32.const 15)) (i32.const 3))
(assert_return (invoke "check" (i32.const 16)) (i32.const 6))
(assert_trap (invoke "check" (i32.const 17)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 18)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 19)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 20)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 21)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 22)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 23)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 24)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 25)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 26)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 27)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 28)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 29)) "uninitialized element")

(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func))
  (type (;2;) (func (param i32) (result i32)))
  (type (;3;) (func (param i64)))
  (type (;4;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 3)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 4)))
  (import "a" "ef0" (func (;2;) (type 0)))
  (import "a" "ef1" (func (;3;) (type 0)))
  (import "a" "ef2" (func (;4;) (type 0)))
  (import "a" "ef3" (func (;5;) (type 0)))
  (import "a" "ef4" (func (;6;) (type 0)))
  (func (;7;) (type 0) (result i32)
    i64.const 0
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 5
  )
  (func (;8;) (type 0) (result i32)
    i64.const 0
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 6
  )
  (func (;9;) (type 0) (result i32)
    i64.const 0
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 7
  )
  (func (;10;) (type 0) (result i32)
    i64.const 0
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 8
  )
  (func (;11;) (type 0) (result i32)
    i64.const 0
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 9
  )
  (func (;12;) (type 1)
    i64.const 4
    i64.const 0
    call 1
    i64.const 3
    call 0
    i32.const 15
    i32.const 1
    i32.const 3
    i64.const 1
    call 0
    table.init 3
    i64.const 1
    call 0
  )
  (func (;13;) (type 2) (param i32) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get 0
    call_indirect (type 0)
    i64.const 1
    call 0
  )
  (table $t0 (;0;) 30 30 funcref)
  (table $t1 (;1;) 30 30 funcref)
  (export "test" (func 12))
  (export "check" (func 13))
  (elem (;0;) (i32.const 2) func 5 3 6 3)
  (elem (;1;) funcref (ref.func 4) (ref.func 9) (ref.func 3) (ref.func 10))
  (elem (;2;) (i32.const 12) func 9 7 4 5 8)
  (elem (;3;) funcref (ref.func 7) (ref.func 11) (ref.func 4) (ref.func 9) (ref.func 8))
)
(invoke "test")
(assert_trap (invoke "check" (i32.const 0)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 1)) "uninitialized element")
(assert_return (invoke "check" (i32.const 2)) (i32.const 3))
(assert_return (invoke "check" (i32.const 3)) (i32.const 1))
(assert_return (invoke "check" (i32.const 4)) (i32.const 4))
(assert_return (invoke "check" (i32.const 5)) (i32.const 1))
(assert_trap (invoke "check" (i32.const 6)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 7)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 8)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 9)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 10)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 11)) "uninitialized element")
(assert_return (invoke "check" (i32.const 12)) (i32.const 7))
(assert_return (invoke "check" (i32.const 13)) (i32.const 5))
(assert_return (invoke "check" (i32.const 14)) (i32.const 2))
(assert_return (invoke "check" (i32.const 15)) (i32.const 9))
(assert_return (invoke "check" (i32.const 16)) (i32.const 2))
(assert_return (invoke "check" (i32.const 17)) (i32.const 7))
(assert_trap (invoke "check" (i32.const 18)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 19)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 20)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 21)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 22)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 23)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 24)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 25)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 26)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 27)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 28)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 29)) "uninitialized element")

(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func))
  (type (;2;) (func (param i32) (result i32)))
  (type (;3;) (func (param i64)))
  (type (;4;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 3)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 4)))
  (import "a" "ef0" (func (;2;) (type 0)))
  (import "a" "ef1" (func (;3;) (type 0)))
  (import "a" "ef2" (func (;4;) (type 0)))
  (import "a" "ef3" (func (;5;) (type 0)))
  (import "a" "ef4" (func (;6;) (type 0)))
  (func (;7;) (type 0) (result i32)
    i64.const 0
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 5
  )
  (func (;8;) (type 0) (result i32)
    i64.const 0
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 6
  )
  (func (;9;) (type 0) (result i32)
    i64.const 0
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 7
  )
  (func (;10;) (type 0) (result i32)
    i64.const 0
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 8
  )
  (func (;11;) (type 0) (result i32)
    i64.const 0
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 9
  )
  (func (;12;) (type 1)
    i64.const 4
    i64.const 0
    call 1
    i64.const 3
    call 0
    i32.const 7
    i32.const 0
    i32.const 4
    i64.const 1
    call 0
    table.init 1
    i64.const 4
    call 0
    elem.drop 1
    i32.const 15
    i32.const 1
    i32.const 3
    i64.const 1
    call 0
    table.init 3
    i64.const 4
    call 0
    elem.drop 3
    i32.const 20
    i32.const 15
    i32.const 5
    i64.const 1
    call 0
    table.copy
    i64.const 3
    call 0
    i32.const 21
    i32.const 29
    i32.const 1
    i64.const 1
    call 0
    table.copy
    i64.const 3
    call 0
    i32.const 24
    i32.const 10
    i32.const 1
    i64.const 1
    call 0
    table.copy
    i64.const 3
    call 0
    i32.const 13
    i32.const 11
    i32.const 4
    i64.const 1
    call 0
    table.copy
    i64.const 3
    call 0
    i32.const 19
    i32.const 20
    i32.const 5
    i64.const 1
    call 0
    table.copy
    i64.const 1
    call 0
  )
  (func (;13;) (type 2) (param i32) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get 0
    call_indirect (type 0)
    i64.const 1
    call 0
  )
  (table $t0 (;0;) 30 30 funcref)
  (table $t1 (;1;) 30 30 funcref)
  (export "test" (func 12))
  (export "check" (func 13))
  (elem (;0;) (i32.const 2) func 5 3 6 3)
  (elem (;1;) funcref (ref.func 4) (ref.func 9) (ref.func 3) (ref.func 10))
  (elem (;2;) (i32.const 12) func 9 7 4 5 8)
  (elem (;3;) funcref (ref.func 7) (ref.func 11) (ref.func 4) (ref.func 9) (ref.func 8))
)
(invoke "test")
(assert_trap (invoke "check" (i32.const 0)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 1)) "uninitialized element")
(assert_return (invoke "check" (i32.const 2)) (i32.const 3))
(assert_return (invoke "check" (i32.const 3)) (i32.const 1))
(assert_return (invoke "check" (i32.const 4)) (i32.const 4))
(assert_return (invoke "check" (i32.const 5)) (i32.const 1))
(assert_trap (invoke "check" (i32.const 6)) "uninitialized element")
(assert_return (invoke "check" (i32.const 7)) (i32.const 2))
(assert_return (invoke "check" (i32.const 8)) (i32.const 7))
(assert_return (invoke "check" (i32.const 9)) (i32.const 1))
(assert_return (invoke "check" (i32.const 10)) (i32.const 8))
(assert_trap (invoke "check" (i32.const 11)) "uninitialized element")
(assert_return (invoke "check" (i32.const 12)) (i32.const 7))
(assert_trap (invoke "check" (i32.const 13)) "uninitialized element")
(assert_return (invoke "check" (i32.const 14)) (i32.const 7))
(assert_return (invoke "check" (i32.const 15)) (i32.const 5))
(assert_return (invoke "check" (i32.const 16)) (i32.const 2))
(assert_return (invoke "check" (i32.const 17)) (i32.const 7))
(assert_trap (invoke "check" (i32.const 18)) "uninitialized element")
(assert_return (invoke "check" (i32.const 19)) (i32.const 9))
(assert_trap (invoke "check" (i32.const 20)) "uninitialized element")
(assert_return (invoke "check" (i32.const 21)) (i32.const 7))
(assert_trap (invoke "check" (i32.const 22)) "uninitialized element")
(assert_return (invoke "check" (i32.const 23)) (i32.const 8))
(assert_return (invoke "check" (i32.const 24)) (i32.const 8))
(assert_trap (invoke "check" (i32.const 25)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 26)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 27)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 28)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 29)) "uninitialized element")

(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func))
  (type (;2;) (func (param i32) (result i32)))
  (type (;3;) (func (param i64)))
  (type (;4;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 3)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 4)))
  (import "a" "ef0" (func (;2;) (type 0)))
  (import "a" "ef1" (func (;3;) (type 0)))
  (import "a" "ef2" (func (;4;) (type 0)))
  (import "a" "ef3" (func (;5;) (type 0)))
  (import "a" "ef4" (func (;6;) (type 0)))
  (func (;7;) (type 0) (result i32)
    i64.const 0
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 5
  )
  (func (;8;) (type 0) (result i32)
    i64.const 0
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 6
  )
  (func (;9;) (type 0) (result i32)
    i64.const 0
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 7
  )
  (func (;10;) (type 0) (result i32)
    i64.const 0
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 8
  )
  (func (;11;) (type 0) (result i32)
    i64.const 0
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 9
  )
  (func (;12;) (type 1)
    i64.const 4
    i64.const 0
    call 1
    i64.const 3
    call 0
    i32.const 7
    i32.const 0
    i32.const 4
    i64.const 1
    call 0
    table.init $t1 1
    i64.const 1
    call 0
  )
  (func (;13;) (type 2) (param i32) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get 0
    call_indirect $t1 (type 0)
    i64.const 1
    call 0
  )
  (table $t0 (;0;) 30 30 funcref)
  (table $t1 (;1;) 30 30 funcref)
  (export "test" (func 12))
  (export "check" (func 13))
  (elem (;0;) (table $t1) (i32.const 2) func 5 3 6 3)
  (elem (;1;) funcref (ref.func 4) (ref.func 9) (ref.func 3) (ref.func 10))
  (elem (;2;) (table $t1) (i32.const 12) func 9 7 4 5 8)
  (elem (;3;) funcref (ref.func 7) (ref.func 11) (ref.func 4) (ref.func 9) (ref.func 8))
)
(invoke "test")
(assert_trap (invoke "check" (i32.const 0)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 1)) "uninitialized element")
(assert_return (invoke "check" (i32.const 2)) (i32.const 3))
(assert_return (invoke "check" (i32.const 3)) (i32.const 1))
(assert_return (invoke "check" (i32.const 4)) (i32.const 4))
(assert_return (invoke "check" (i32.const 5)) (i32.const 1))
(assert_trap (invoke "check" (i32.const 6)) "uninitialized element")
(assert_return (invoke "check" (i32.const 7)) (i32.const 2))
(assert_return (invoke "check" (i32.const 8)) (i32.const 7))
(assert_return (invoke "check" (i32.const 9)) (i32.const 1))
(assert_return (invoke "check" (i32.const 10)) (i32.const 8))
(assert_trap (invoke "check" (i32.const 11)) "uninitialized element")
(assert_return (invoke "check" (i32.const 12)) (i32.const 7))
(assert_return (invoke "check" (i32.const 13)) (i32.const 5))
(assert_return (invoke "check" (i32.const 14)) (i32.const 2))
(assert_return (invoke "check" (i32.const 15)) (i32.const 3))
(assert_return (invoke "check" (i32.const 16)) (i32.const 6))
(assert_trap (invoke "check" (i32.const 17)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 18)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 19)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 20)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 21)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 22)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 23)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 24)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 25)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 26)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 27)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 28)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 29)) "uninitialized element")

(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func))
  (type (;2;) (func (param i32) (result i32)))
  (type (;3;) (func (param i64)))
  (type (;4;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 3)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 4)))
  (import "a" "ef0" (func (;2;) (type 0)))
  (import "a" "ef1" (func (;3;) (type 0)))
  (import "a" "ef2" (func (;4;) (type 0)))
  (import "a" "ef3" (func (;5;) (type 0)))
  (import "a" "ef4" (func (;6;) (type 0)))
  (func (;7;) (type 0) (result i32)
    i64.const 0
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 5
  )
  (func (;8;) (type 0) (result i32)
    i64.const 0
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 6
  )
  (func (;9;) (type 0) (result i32)
    i64.const 0
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 7
  )
  (func (;10;) (type 0) (result i32)
    i64.const 0
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 8
  )
  (func (;11;) (type 0) (result i32)
    i64.const 0
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 9
  )
  (func (;12;) (type 1)
    i64.const 4
    i64.const 0
    call 1
    i64.const 3
    call 0
    i32.const 15
    i32.const 1
    i32.const 3
    i64.const 1
    call 0
    table.init $t1 3
    i64.const 1
    call 0
  )
  (func (;13;) (type 2) (param i32) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get 0
    call_indirect $t1 (type 0)
    i64.const 1
    call 0
  )
  (table $t0 (;0;) 30 30 funcref)
  (table $t1 (;1;) 30 30 funcref)
  (export "test" (func 12))
  (export "check" (func 13))
  (elem (;0;) (table $t1) (i32.const 2) func 5 3 6 3)
  (elem (;1;) funcref (ref.func 4) (ref.func 9) (ref.func 3) (ref.func 10))
  (elem (;2;) (table $t1) (i32.const 12) func 9 7 4 5 8)
  (elem (;3;) funcref (ref.func 7) (ref.func 11) (ref.func 4) (ref.func 9) (ref.func 8))
)
(invoke "test")
(assert_trap (invoke "check" (i32.const 0)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 1)) "uninitialized element")
(assert_return (invoke "check" (i32.const 2)) (i32.const 3))
(assert_return (invoke "check" (i32.const 3)) (i32.const 1))
(assert_return (invoke "check" (i32.const 4)) (i32.const 4))
(assert_return (invoke "check" (i32.const 5)) (i32.const 1))
(assert_trap (invoke "check" (i32.const 6)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 7)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 8)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 9)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 10)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 11)) "uninitialized element")
(assert_return (invoke "check" (i32.const 12)) (i32.const 7))
(assert_return (invoke "check" (i32.const 13)) (i32.const 5))
(assert_return (invoke "check" (i32.const 14)) (i32.const 2))
(assert_return (invoke "check" (i32.const 15)) (i32.const 9))
(assert_return (invoke "check" (i32.const 16)) (i32.const 2))
(assert_return (invoke "check" (i32.const 17)) (i32.const 7))
(assert_trap (invoke "check" (i32.const 18)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 19)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 20)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 21)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 22)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 23)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 24)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 25)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 26)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 27)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 28)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 29)) "uninitialized element")

(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func))
  (type (;2;) (func (param i32) (result i32)))
  (type (;3;) (func (param i64)))
  (type (;4;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 3)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 4)))
  (import "a" "ef0" (func (;2;) (type 0)))
  (import "a" "ef1" (func (;3;) (type 0)))
  (import "a" "ef2" (func (;4;) (type 0)))
  (import "a" "ef3" (func (;5;) (type 0)))
  (import "a" "ef4" (func (;6;) (type 0)))
  (func (;7;) (type 0) (result i32)
    i64.const 0
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 5
  )
  (func (;8;) (type 0) (result i32)
    i64.const 0
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 6
  )
  (func (;9;) (type 0) (result i32)
    i64.const 0
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 7
  )
  (func (;10;) (type 0) (result i32)
    i64.const 0
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 8
  )
  (func (;11;) (type 0) (result i32)
    i64.const 0
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 9
  )
  (func (;12;) (type 1)
    i64.const 4
    i64.const 0
    call 1
    i64.const 3
    call 0
    i32.const 7
    i32.const 0
    i32.const 4
    i64.const 1
    call 0
    table.init $t1 1
    i64.const 4
    call 0
    elem.drop 1
    i32.const 15
    i32.const 1
    i32.const 3
    i64.const 1
    call 0
    table.init $t1 3
    i64.const 4
    call 0
    elem.drop 3
    i32.const 20
    i32.const 15
    i32.const 5
    i64.const 1
    call 0
    table.copy $t1 $t1
    i64.const 3
    call 0
    i32.const 21
    i32.const 29
    i32.const 1
    i64.const 1
    call 0
    table.copy $t1 $t1
    i64.const 3
    call 0
    i32.const 24
    i32.const 10
    i32.const 1
    i64.const 1
    call 0
    table.copy $t1 $t1
    i64.const 3
    call 0
    i32.const 13
    i32.const 11
    i32.const 4
    i64.const 1
    call 0
    table.copy $t1 $t1
    i64.const 3
    call 0
    i32.const 19
    i32.const 20
    i32.const 5
    i64.const 1
    call 0
    table.copy $t1 $t1
    i64.const 1
    call 0
  )
  (func (;13;) (type 2) (param i32) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    local.get 0
    call_indirect $t1 (type 0)
    i64.const 1
    call 0
  )
  (table $t0 (;0;) 30 30 funcref)
  (table $t1 (;1;) 30 30 funcref)
  (export "test" (func 12))
  (export "check" (func 13))
  (elem (;0;) (table $t1) (i32.const 2) func 5 3 6 3)
  (elem (;1;) funcref (ref.func 4) (ref.func 9) (ref.func 3) (ref.func 10))
  (elem (;2;) (table $t1) (i32.const 12) func 9 7 4 5 8)
  (elem (;3;) funcref (ref.func 7) (ref.func 11) (ref.func 4) (ref.func 9) (ref.func 8))
)
(invoke "test")
(assert_trap (invoke "check" (i32.const 0)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 1)) "uninitialized element")
(assert_return (invoke "check" (i32.const 2)) (i32.const 3))
(assert_return (invoke "check" (i32.const 3)) (i32.const 1))
(assert_return (invoke "check" (i32.const 4)) (i32.const 4))
(assert_return (invoke "check" (i32.const 5)) (i32.const 1))
(assert_trap (invoke "check" (i32.const 6)) "uninitialized element")
(assert_return (invoke "check" (i32.const 7)) (i32.const 2))
(assert_return (invoke "check" (i32.const 8)) (i32.const 7))
(assert_return (invoke "check" (i32.const 9)) (i32.const 1))
(assert_return (invoke "check" (i32.const 10)) (i32.const 8))
(assert_trap (invoke "check" (i32.const 11)) "uninitialized element")
(assert_return (invoke "check" (i32.const 12)) (i32.const 7))
(assert_trap (invoke "check" (i32.const 13)) "uninitialized element")
(assert_return (invoke "check" (i32.const 14)) (i32.const 7))
(assert_return (invoke "check" (i32.const 15)) (i32.const 5))
(assert_return (invoke "check" (i32.const 16)) (i32.const 2))
(assert_return (invoke "check" (i32.const 17)) (i32.const 7))
(assert_trap (invoke "check" (i32.const 18)) "uninitialized element")
(assert_return (invoke "check" (i32.const 19)) (i32.const 9))
(assert_trap (invoke "check" (i32.const 20)) "uninitialized element")
(assert_return (invoke "check" (i32.const 21)) (i32.const 7))
(assert_trap (invoke "check" (i32.const 22)) "uninitialized element")
(assert_return (invoke "check" (i32.const 23)) (i32.const 8))
(assert_return (invoke "check" (i32.const 24)) (i32.const 8))
(assert_trap (invoke "check" (i32.const 25)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 26)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 27)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 28)) "uninitialized element")
(assert_trap (invoke "check" (i32.const 29)) "uninitialized element")
(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func))
  (type (;2;) (func (param i64)))
  (type (;3;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 2)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 3)))
  (func (;2;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 0
  )
  (func (;3;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 1
  )
  (func (;4;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 2
  )
  (func (;5;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 3
  )
  (func (;6;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 4
  )
  (func (;7;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 5
  )
  (func (;8;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 6
  )
  (func (;9;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 7
  )
  (func (;10;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 8
  )
  (func (;11;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 9
  )
  (func (;12;) (type 1)
    i64.const 0
    i64.const 0
    call 1
    i64.const 2
    call 0
    elem.drop 2
  )
  (table $t0 (;0;) 30 30 funcref)
  (table $t1 (;1;) 28 28 funcref)
  (export "test" (func 12))
  (elem (;0;) (i32.const 2) func 5 3 6 3)
  (elem (;1;) funcref (ref.func 4) (ref.func 9) (ref.func 3) (ref.func 10))
  (elem (;2;) (i32.const 12) func 9 7 4 5 8)
  (elem (;3;) funcref (ref.func 7) (ref.func 11) (ref.func 4) (ref.func 9) (ref.func 8))
)
(invoke "test")

(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func))
  (type (;2;) (func (param i64)))
  (type (;3;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 2)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 3)))
  (func (;2;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 0
  )
  (func (;3;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 1
  )
  (func (;4;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 2
  )
  (func (;5;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 3
  )
  (func (;6;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 4
  )
  (func (;7;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 5
  )
  (func (;8;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 6
  )
  (func (;9;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 7
  )
  (func (;10;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 8
  )
  (func (;11;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 9
  )
  (func (;12;) (type 1)
    i64.const 12
    i64.const 0
    call 1
    i64.const 3
    call 0
    i32.const 12
    i32.const 1
    i32.const 1
    i64.const 1
    call 0
    table.init 2
    i64.const 1
    call 0
  )
  (table $t0 (;0;) 30 30 funcref)
  (table $t1 (;1;) 28 28 funcref)
  (export "test" (func 12))
  (elem (;0;) (i32.const 2) func 5 3 6 3)
  (elem (;1;) funcref (ref.func 4) (ref.func 9) (ref.func 3) (ref.func 10))
  (elem (;2;) (i32.const 12) func 9 7 4 5 8)
  (elem (;3;) funcref (ref.func 7) (ref.func 11) (ref.func 4) (ref.func 9) (ref.func 8))
)
(assert_trap (invoke "test") "out of bounds table access")

(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func))
  (type (;2;) (func (param i64)))
  (type (;3;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 2)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 3)))
  (func (;2;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 0
  )
  (func (;3;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 1
  )
  (func (;4;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 2
  )
  (func (;5;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 3
  )
  (func (;6;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 4
  )
  (func (;7;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 5
  )
  (func (;8;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 6
  )
  (func (;9;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 7
  )
  (func (;10;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 8
  )
  (func (;11;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 9
  )
  (func (;12;) (type 1)
    i64.const 12
    i64.const 0
    call 1
    i64.const 3
    call 0
    i32.const 12
    i32.const 1
    i32.const 1
    i64.const 1
    call 0
    table.init 1
    i64.const 3
    call 0
    i32.const 21
    i32.const 1
    i32.const 1
    i64.const 1
    call 0
    table.init 1
    i64.const 1
    call 0
  )
  (table $t0 (;0;) 30 30 funcref)
  (table $t1 (;1;) 28 28 funcref)
  (export "test" (func 12))
  (elem (;0;) (i32.const 2) func 5 3 6 3)
  (elem (;1;) funcref (ref.func 4) (ref.func 9) (ref.func 3) (ref.func 10))
  (elem (;2;) (i32.const 12) func 9 7 4 5 8)
  (elem (;3;) funcref (ref.func 7) (ref.func 11) (ref.func 4) (ref.func 9) (ref.func 8))
)
(invoke "test")

(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func))
  (type (;2;) (func (param i64)))
  (type (;3;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 2)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 3)))
  (func (;2;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 0
  )
  (func (;3;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 1
  )
  (func (;4;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 2
  )
  (func (;5;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 3
  )
  (func (;6;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 4
  )
  (func (;7;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 5
  )
  (func (;8;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 6
  )
  (func (;9;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 7
  )
  (func (;10;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 8
  )
  (func (;11;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 9
  )
  (func (;12;) (type 1)
    i64.const 0
    i64.const 0
    call 1
    i64.const 3
    call 0
    elem.drop 1
    elem.drop 1
  )
  (table $t0 (;0;) 30 30 funcref)
  (table $t1 (;1;) 28 28 funcref)
  (export "test" (func 12))
  (elem (;0;) (i32.const 2) func 5 3 6 3)
  (elem (;1;) funcref (ref.func 4) (ref.func 9) (ref.func 3) (ref.func 10))
  (elem (;2;) (i32.const 12) func 9 7 4 5 8)
  (elem (;3;) funcref (ref.func 7) (ref.func 11) (ref.func 4) (ref.func 9) (ref.func 8))
)
(invoke "test")

(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func))
  (type (;2;) (func (param i64)))
  (type (;3;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 2)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 3)))
  (func (;2;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 0
  )
  (func (;3;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 1
  )
  (func (;4;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 2
  )
  (func (;5;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 3
  )
  (func (;6;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 4
  )
  (func (;7;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 5
  )
  (func (;8;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 6
  )
  (func (;9;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 7
  )
  (func (;10;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 8
  )
  (func (;11;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 9
  )
  (func (;12;) (type 1)
    i64.const 12
    i64.const 0
    call 1
    i64.const 4
    call 0
    elem.drop 1
    i32.const 12
    i32.const 1
    i32.const 1
    i64.const 1
    call 0
    table.init 1
    i64.const 1
    call 0
  )
  (table $t0 (;0;) 30 30 funcref)
  (table $t1 (;1;) 28 28 funcref)
  (export "test" (func 12))
  (elem (;0;) (i32.const 2) func 5 3 6 3)
  (elem (;1;) funcref (ref.func 4) (ref.func 9) (ref.func 3) (ref.func 10))
  (elem (;2;) (i32.const 12) func 9 7 4 5 8)
  (elem (;3;) funcref (ref.func 7) (ref.func 11) (ref.func 4) (ref.func 9) (ref.func 8))
)
(assert_trap (invoke "test") "out of bounds table access")

(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func))
  (type (;2;) (func (param i64)))
  (type (;3;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 2)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 3)))
  (func (;2;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 0
  )
  (func (;3;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 1
  )
  (func (;4;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 2
  )
  (func (;5;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 3
  )
  (func (;6;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 4
  )
  (func (;7;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 5
  )
  (func (;8;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 6
  )
  (func (;9;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 7
  )
  (func (;10;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 8
  )
  (func (;11;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 9
  )
  (func (;12;) (type 1)
    i64.const 12
    i64.const 0
    call 1
    i64.const 3
    call 0
    i32.const 12
    i32.const 0
    i32.const 5
    i64.const 1
    call 0
    table.init 1
    i64.const 1
    call 0
  )
  (table $t0 (;0;) 30 30 funcref)
  (table $t1 (;1;) 28 28 funcref)
  (export "test" (func 12))
  (elem (;0;) (i32.const 2) func 5 3 6 3)
  (elem (;1;) funcref (ref.func 4) (ref.func 9) (ref.func 3) (ref.func 10))
  (elem (;2;) (i32.const 12) func 9 7 4 5 8)
  (elem (;3;) funcref (ref.func 7) (ref.func 11) (ref.func 4) (ref.func 9) (ref.func 8))
)
(assert_trap (invoke "test") "out of bounds table access")

(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func))
  (type (;2;) (func (param i64)))
  (type (;3;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 2)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 3)))
  (func (;2;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 0
  )
  (func (;3;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 1
  )
  (func (;4;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 2
  )
  (func (;5;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 3
  )
  (func (;6;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 4
  )
  (func (;7;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 5
  )
  (func (;8;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 6
  )
  (func (;9;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 7
  )
  (func (;10;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 8
  )
  (func (;11;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 9
  )
  (func (;12;) (type 1)
    i64.const 12
    i64.const 0
    call 1
    i64.const 3
    call 0
    i32.const 12
    i32.const 2
    i32.const 3
    i64.const 1
    call 0
    table.init 1
    i64.const 1
    call 0
  )
  (table $t0 (;0;) 30 30 funcref)
  (table $t1 (;1;) 28 28 funcref)
  (export "test" (func 12))
  (elem (;0;) (i32.const 2) func 5 3 6 3)
  (elem (;1;) funcref (ref.func 4) (ref.func 9) (ref.func 3) (ref.func 10))
  (elem (;2;) (i32.const 12) func 9 7 4 5 8)
  (elem (;3;) funcref (ref.func 7) (ref.func 11) (ref.func 4) (ref.func 9) (ref.func 8))
)
(assert_trap (invoke "test") "out of bounds table access")

(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func))
  (type (;2;) (func (param i64)))
  (type (;3;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 2)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 3)))
  (func (;2;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 0
  )
  (func (;3;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 1
  )
  (func (;4;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 2
  )
  (func (;5;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 3
  )
  (func (;6;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 4
  )
  (func (;7;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 5
  )
  (func (;8;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 6
  )
  (func (;9;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 7
  )
  (func (;10;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 8
  )
  (func (;11;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 9
  )
  (func (;12;) (type 1)
    i64.const 12
    i64.const 0
    call 1
    i64.const 3
    call 0
    i32.const 28
    i32.const 1
    i32.const 3
    i64.const 1
    call 0
    table.init 1
    i64.const 1
    call 0
  )
  (table $t0 (;0;) 30 30 funcref)
  (table $t1 (;1;) 28 28 funcref)
  (export "test" (func 12))
  (elem (;0;) (i32.const 2) func 5 3 6 3)
  (elem (;1;) funcref (ref.func 4) (ref.func 9) (ref.func 3) (ref.func 10))
  (elem (;2;) (i32.const 12) func 9 7 4 5 8)
  (elem (;3;) funcref (ref.func 7) (ref.func 11) (ref.func 4) (ref.func 9) (ref.func 8))
)
(assert_trap (invoke "test") "out of bounds table access")

(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func))
  (type (;2;) (func (param i64)))
  (type (;3;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 2)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 3)))
  (func (;2;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 0
  )
  (func (;3;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 1
  )
  (func (;4;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 2
  )
  (func (;5;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 3
  )
  (func (;6;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 4
  )
  (func (;7;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 5
  )
  (func (;8;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 6
  )
  (func (;9;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 7
  )
  (func (;10;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 8
  )
  (func (;11;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 9
  )
  (func (;12;) (type 1)
    i64.const 12
    i64.const 0
    call 1
    i64.const 3
    call 0
    i32.const 12
    i32.const 4
    i32.const 0
    i64.const 1
    call 0
    table.init 1
    i64.const 1
    call 0
  )
  (table $t0 (;0;) 30 30 funcref)
  (table $t1 (;1;) 28 28 funcref)
  (export "test" (func 12))
  (elem (;0;) (i32.const 2) func 5 3 6 3)
  (elem (;1;) funcref (ref.func 4) (ref.func 9) (ref.func 3) (ref.func 10))
  (elem (;2;) (i32.const 12) func 9 7 4 5 8)
  (elem (;3;) funcref (ref.func 7) (ref.func 11) (ref.func 4) (ref.func 9) (ref.func 8))
)
(invoke "test")

(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func))
  (type (;2;) (func (param i64)))
  (type (;3;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 2)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 3)))
  (func (;2;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 0
  )
  (func (;3;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 1
  )
  (func (;4;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 2
  )
  (func (;5;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 3
  )
  (func (;6;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 4
  )
  (func (;7;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 5
  )
  (func (;8;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 6
  )
  (func (;9;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 7
  )
  (func (;10;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 8
  )
  (func (;11;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 9
  )
  (func (;12;) (type 1)
    i64.const 12
    i64.const 0
    call 1
    i64.const 3
    call 0
    i32.const 12
    i32.const 5
    i32.const 0
    i64.const 1
    call 0
    table.init 1
    i64.const 1
    call 0
  )
  (table $t0 (;0;) 30 30 funcref)
  (table $t1 (;1;) 28 28 funcref)
  (export "test" (func 12))
  (elem (;0;) (i32.const 2) func 5 3 6 3)
  (elem (;1;) funcref (ref.func 4) (ref.func 9) (ref.func 3) (ref.func 10))
  (elem (;2;) (i32.const 12) func 9 7 4 5 8)
  (elem (;3;) funcref (ref.func 7) (ref.func 11) (ref.func 4) (ref.func 9) (ref.func 8))
)
(assert_trap (invoke "test") "out of bounds table access")

(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func))
  (type (;2;) (func (param i64)))
  (type (;3;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 2)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 3)))
  (func (;2;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 0
  )
  (func (;3;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 1
  )
  (func (;4;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 2
  )
  (func (;5;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 3
  )
  (func (;6;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 4
  )
  (func (;7;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 5
  )
  (func (;8;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 6
  )
  (func (;9;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 7
  )
  (func (;10;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 8
  )
  (func (;11;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 9
  )
  (func (;12;) (type 1)
    i64.const 12
    i64.const 0
    call 1
    i64.const 3
    call 0
    i32.const 30
    i32.const 2
    i32.const 0
    i64.const 1
    call 0
    table.init 1
    i64.const 1
    call 0
  )
  (table $t0 (;0;) 30 30 funcref)
  (table $t1 (;1;) 28 28 funcref)
  (export "test" (func 12))
  (elem (;0;) (i32.const 2) func 5 3 6 3)
  (elem (;1;) funcref (ref.func 4) (ref.func 9) (ref.func 3) (ref.func 10))
  (elem (;2;) (i32.const 12) func 9 7 4 5 8)
  (elem (;3;) funcref (ref.func 7) (ref.func 11) (ref.func 4) (ref.func 9) (ref.func 8))
)
(invoke "test")

(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func))
  (type (;2;) (func (param i64)))
  (type (;3;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 2)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 3)))
  (func (;2;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 0
  )
  (func (;3;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 1
  )
  (func (;4;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 2
  )
  (func (;5;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 3
  )
  (func (;6;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 4
  )
  (func (;7;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 5
  )
  (func (;8;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 6
  )
  (func (;9;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 7
  )
  (func (;10;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 8
  )
  (func (;11;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 9
  )
  (func (;12;) (type 1)
    i64.const 12
    i64.const 0
    call 1
    i64.const 3
    call 0
    i32.const 31
    i32.const 2
    i32.const 0
    i64.const 1
    call 0
    table.init 1
    i64.const 1
    call 0
  )
  (table $t0 (;0;) 30 30 funcref)
  (table $t1 (;1;) 28 28 funcref)
  (export "test" (func 12))
  (elem (;0;) (i32.const 2) func 5 3 6 3)
  (elem (;1;) funcref (ref.func 4) (ref.func 9) (ref.func 3) (ref.func 10))
  (elem (;2;) (i32.const 12) func 9 7 4 5 8)
  (elem (;3;) funcref (ref.func 7) (ref.func 11) (ref.func 4) (ref.func 9) (ref.func 8))
)
(assert_trap (invoke "test") "out of bounds table access")

(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func))
  (type (;2;) (func (param i64)))
  (type (;3;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 2)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 3)))
  (func (;2;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 0
  )
  (func (;3;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 1
  )
  (func (;4;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 2
  )
  (func (;5;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 3
  )
  (func (;6;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 4
  )
  (func (;7;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 5
  )
  (func (;8;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 6
  )
  (func (;9;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 7
  )
  (func (;10;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 8
  )
  (func (;11;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 9
  )
  (func (;12;) (type 1)
    i64.const 12
    i64.const 0
    call 1
    i64.const 3
    call 0
    i32.const 30
    i32.const 4
    i32.const 0
    i64.const 1
    call 0
    table.init 1
    i64.const 1
    call 0
  )
  (table $t0 (;0;) 30 30 funcref)
  (table $t1 (;1;) 28 28 funcref)
  (export "test" (func 12))
  (elem (;0;) (i32.const 2) func 5 3 6 3)
  (elem (;1;) funcref (ref.func 4) (ref.func 9) (ref.func 3) (ref.func 10))
  (elem (;2;) (i32.const 12) func 9 7 4 5 8)
  (elem (;3;) funcref (ref.func 7) (ref.func 11) (ref.func 4) (ref.func 9) (ref.func 8))
)
(invoke "test")

(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func))
  (type (;2;) (func (param i64)))
  (type (;3;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 2)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 3)))
  (func (;2;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 0
  )
  (func (;3;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 1
  )
  (func (;4;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 2
  )
  (func (;5;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 3
  )
  (func (;6;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 4
  )
  (func (;7;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 5
  )
  (func (;8;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 6
  )
  (func (;9;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 7
  )
  (func (;10;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 8
  )
  (func (;11;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 9
  )
  (func (;12;) (type 1)
    i64.const 12
    i64.const 0
    call 1
    i64.const 3
    call 0
    i32.const 31
    i32.const 5
    i32.const 0
    i64.const 1
    call 0
    table.init 1
    i64.const 1
    call 0
  )
  (table $t0 (;0;) 30 30 funcref)
  (table $t1 (;1;) 28 28 funcref)
  (export "test" (func 12))
  (elem (;0;) (i32.const 2) func 5 3 6 3)
  (elem (;1;) funcref (ref.func 4) (ref.func 9) (ref.func 3) (ref.func 10))
  (elem (;2;) (i32.const 12) func 9 7 4 5 8)
  (elem (;3;) funcref (ref.func 7) (ref.func 11) (ref.func 4) (ref.func 9) (ref.func 8))
)
(assert_trap (invoke "test") "out of bounds table access")

(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func))
  (type (;2;) (func (param i64)))
  (type (;3;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 2)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 3)))
  (func (;2;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 0
  )
  (func (;3;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 1
  )
  (func (;4;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 2
  )
  (func (;5;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 3
  )
  (func (;6;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 4
  )
  (func (;7;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 5
  )
  (func (;8;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 6
  )
  (func (;9;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 7
  )
  (func (;10;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 8
  )
  (func (;11;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 9
  )
  (func (;12;) (type 1)
    i64.const 12
    i64.const 0
    call 1
    i64.const 3
    call 0
    i32.const 26
    i32.const 1
    i32.const 3
    i64.const 1
    call 0
    table.init $t1 1
    i64.const 1
    call 0
  )
  (table $t0 (;0;) 30 30 funcref)
  (table $t1 (;1;) 28 28 funcref)
  (export "test" (func 12))
  (elem (;0;) (table $t1) (i32.const 2) func 5 3 6 3)
  (elem (;1;) funcref (ref.func 4) (ref.func 9) (ref.func 3) (ref.func 10))
  (elem (;2;) (table $t1) (i32.const 12) func 9 7 4 5 8)
  (elem (;3;) funcref (ref.func 7) (ref.func 11) (ref.func 4) (ref.func 9) (ref.func 8))
)
(assert_trap (invoke "test") "out of bounds table access")

(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func))
  (type (;2;) (func (param i64)))
  (type (;3;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 2)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 3)))
  (func (;2;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 0
  )
  (func (;3;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 1
  )
  (func (;4;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 2
  )
  (func (;5;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 3
  )
  (func (;6;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 4
  )
  (func (;7;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 5
  )
  (func (;8;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 6
  )
  (func (;9;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 7
  )
  (func (;10;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 8
  )
  (func (;11;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 9
  )
  (func (;12;) (type 1)
    i64.const 12
    i64.const 0
    call 1
    i64.const 3
    call 0
    i32.const 12
    i32.const 4
    i32.const 0
    i64.const 1
    call 0
    table.init $t1 1
    i64.const 1
    call 0
  )
  (table $t0 (;0;) 30 30 funcref)
  (table $t1 (;1;) 28 28 funcref)
  (export "test" (func 12))
  (elem (;0;) (table $t1) (i32.const 2) func 5 3 6 3)
  (elem (;1;) funcref (ref.func 4) (ref.func 9) (ref.func 3) (ref.func 10))
  (elem (;2;) (table $t1) (i32.const 12) func 9 7 4 5 8)
  (elem (;3;) funcref (ref.func 7) (ref.func 11) (ref.func 4) (ref.func 9) (ref.func 8))
)
(invoke "test")

(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func))
  (type (;2;) (func (param i64)))
  (type (;3;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 2)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 3)))
  (func (;2;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 0
  )
  (func (;3;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 1
  )
  (func (;4;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 2
  )
  (func (;5;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 3
  )
  (func (;6;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 4
  )
  (func (;7;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 5
  )
  (func (;8;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 6
  )
  (func (;9;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 7
  )
  (func (;10;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 8
  )
  (func (;11;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 9
  )
  (func (;12;) (type 1)
    i64.const 12
    i64.const 0
    call 1
    i64.const 3
    call 0
    i32.const 12
    i32.const 5
    i32.const 0
    i64.const 1
    call 0
    table.init $t1 1
    i64.const 1
    call 0
  )
  (table $t0 (;0;) 30 30 funcref)
  (table $t1 (;1;) 28 28 funcref)
  (export "test" (func 12))
  (elem (;0;) (table $t1) (i32.const 2) func 5 3 6 3)
  (elem (;1;) funcref (ref.func 4) (ref.func 9) (ref.func 3) (ref.func 10))
  (elem (;2;) (table $t1) (i32.const 12) func 9 7 4 5 8)
  (elem (;3;) funcref (ref.func 7) (ref.func 11) (ref.func 4) (ref.func 9) (ref.func 8))
)
(assert_trap (invoke "test") "out of bounds table access")

(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func))
  (type (;2;) (func (param i64)))
  (type (;3;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 2)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 3)))
  (func (;2;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 0
  )
  (func (;3;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 1
  )
  (func (;4;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 2
  )
  (func (;5;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 3
  )
  (func (;6;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 4
  )
  (func (;7;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 5
  )
  (func (;8;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 6
  )
  (func (;9;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 7
  )
  (func (;10;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 8
  )
  (func (;11;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 9
  )
  (func (;12;) (type 1)
    i64.const 12
    i64.const 0
    call 1
    i64.const 3
    call 0
    i32.const 28
    i32.const 2
    i32.const 0
    i64.const 1
    call 0
    table.init $t1 1
    i64.const 1
    call 0
  )
  (table $t0 (;0;) 30 30 funcref)
  (table $t1 (;1;) 28 28 funcref)
  (export "test" (func 12))
  (elem (;0;) (table $t1) (i32.const 2) func 5 3 6 3)
  (elem (;1;) funcref (ref.func 4) (ref.func 9) (ref.func 3) (ref.func 10))
  (elem (;2;) (table $t1) (i32.const 12) func 9 7 4 5 8)
  (elem (;3;) funcref (ref.func 7) (ref.func 11) (ref.func 4) (ref.func 9) (ref.func 8))
)
(invoke "test")

(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func))
  (type (;2;) (func (param i64)))
  (type (;3;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 2)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 3)))
  (func (;2;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 0
  )
  (func (;3;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 1
  )
  (func (;4;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 2
  )
  (func (;5;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 3
  )
  (func (;6;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 4
  )
  (func (;7;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 5
  )
  (func (;8;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 6
  )
  (func (;9;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 7
  )
  (func (;10;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 8
  )
  (func (;11;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 9
  )
  (func (;12;) (type 1)
    i64.const 12
    i64.const 0
    call 1
    i64.const 3
    call 0
    i32.const 29
    i32.const 2
    i32.const 0
    i64.const 1
    call 0
    table.init $t1 1
    i64.const 1
    call 0
  )
  (table $t0 (;0;) 30 30 funcref)
  (table $t1 (;1;) 28 28 funcref)
  (export "test" (func 12))
  (elem (;0;) (table $t1) (i32.const 2) func 5 3 6 3)
  (elem (;1;) funcref (ref.func 4) (ref.func 9) (ref.func 3) (ref.func 10))
  (elem (;2;) (table $t1) (i32.const 12) func 9 7 4 5 8)
  (elem (;3;) funcref (ref.func 7) (ref.func 11) (ref.func 4) (ref.func 9) (ref.func 8))
)
(assert_trap (invoke "test") "out of bounds table access")

(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func))
  (type (;2;) (func (param i64)))
  (type (;3;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 2)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 3)))
  (func (;2;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 0
  )
  (func (;3;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 1
  )
  (func (;4;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 2
  )
  (func (;5;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 3
  )
  (func (;6;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 4
  )
  (func (;7;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 5
  )
  (func (;8;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 6
  )
  (func (;9;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 7
  )
  (func (;10;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 8
  )
  (func (;11;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 9
  )
  (func (;12;) (type 1)
    i64.const 12
    i64.const 0
    call 1
    i64.const 3
    call 0
    i32.const 28
    i32.const 4
    i32.const 0
    i64.const 1
    call 0
    table.init $t1 1
    i64.const 1
    call 0
  )
  (table $t0 (;0;) 30 30 funcref)
  (table $t1 (;1;) 28 28 funcref)
  (export "test" (func 12))
  (elem (;0;) (table $t1) (i32.const 2) func 5 3 6 3)
  (elem (;1;) funcref (ref.func 4) (ref.func 9) (ref.func 3) (ref.func 10))
  (elem (;2;) (table $t1) (i32.const 12) func 9 7 4 5 8)
  (elem (;3;) funcref (ref.func 7) (ref.func 11) (ref.func 4) (ref.func 9) (ref.func 8))
)
(invoke "test")

(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func))
  (type (;2;) (func (param i64)))
  (type (;3;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 2)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 3)))
  (func (;2;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 0
  )
  (func (;3;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 1
  )
  (func (;4;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 2
  )
  (func (;5;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 3
  )
  (func (;6;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 4
  )
  (func (;7;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 5
  )
  (func (;8;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 6
  )
  (func (;9;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 7
  )
  (func (;10;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 8
  )
  (func (;11;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call 1
    i64.const 2
    call 0
    i32.const 9
  )
  (func (;12;) (type 1)
    i64.const 12
    i64.const 0
    call 1
    i64.const 3
    call 0
    i32.const 29
    i32.const 5
    i32.const 0
    i64.const 1
    call 0
    table.init $t1 1
    i64.const 1
    call 0
  )
  (table $t0 (;0;) 30 30 funcref)
  (table $t1 (;1;) 28 28 funcref)
  (export "test" (func 12))
  (elem (;0;) (table $t1) (i32.const 2) func 5 3 6 3)
  (elem (;1;) funcref (ref.func 4) (ref.func 9) (ref.func 3) (ref.func 10))
  (elem (;2;) (table $t1) (i32.const 12) func 9 7 4 5 8)
  (elem (;3;) funcref (ref.func 7) (ref.func 11) (ref.func 4) (ref.func 9) (ref.func 8))
)
(assert_trap (invoke "test") "out of bounds table access")

(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func (param i32) (result i32)))
  (type (;2;) (func (param i32 i32)))
  (type (;3;) (func (param i64)))
  (type (;4;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func $finite_wasm_gas (;0;) (type 3)))
  (import "spectest" "finite_wasm_stack" (func $finite_wasm_stack (;1;) (type 4)))
  (func $f0 (;2;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 0
  )
  (func $f1 (;3;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 1
  )
  (func $f2 (;4;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 2
  )
  (func $f3 (;5;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 3
  )
  (func $f4 (;6;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 4
  )
  (func $f5 (;7;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 5
  )
  (func $f6 (;8;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 6
  )
  (func $f7 (;9;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 7
  )
  (func $f8 (;10;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 8
  )
  (func $f9 (;11;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 9
  )
  (func $f10 (;12;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 10
  )
  (func $f11 (;13;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 11
  )
  (func $f12 (;14;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 12
  )
  (func $f13 (;15;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 13
  )
  (func $f14 (;16;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 14
  )
  (func $f15 (;17;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 15
  )
  (func (;18;) (type 1) (param $n i32) (result i32)
    i64.const 8
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    local.get $n
    call_indirect (type 0)
    i64.const 1
    call $finite_wasm_gas
  )
  (func (;19;) (type 2) (param $offs i32) (param $len i32)
    i64.const 12
    i64.const 1
    call $finite_wasm_stack
    i64.const 3
    call $finite_wasm_gas
    local.get $offs
    i32.const 0
    local.get $len
    i64.const 1
    call $finite_wasm_gas
    table.init 0
    i64.const 1
    call $finite_wasm_gas
  )
  (table (;0;) 32 64 funcref)
  (export "f0" (func $f0))
  (export "f1" (func $f1))
  (export "f2" (func $f2))
  (export "f3" (func $f3))
  (export "f4" (func $f4))
  (export "f5" (func $f5))
  (export "f6" (func $f6))
  (export "f7" (func $f7))
  (export "f8" (func $f8))
  (export "f9" (func $f9))
  (export "f10" (func $f10))
  (export "f11" (func $f11))
  (export "f12" (func $f12))
  (export "f13" (func $f13))
  (export "f14" (func $f14))
  (export "f15" (func $f15))
  (export "test" (func 18))
  (export "run" (func 19))
  (elem (;0;) funcref (ref.func $f0) (ref.func $f1) (ref.func $f2) (ref.func $f3) (ref.func $f4) (ref.func $f5) (ref.func $f6) (ref.func $f7) (ref.func $f8) (ref.func $f9) (ref.func $f10) (ref.func $f11) (ref.func $f12) (ref.func $f13) (ref.func $f14) (ref.func $f15))
)
(assert_trap (invoke "run" (i32.const 24) (i32.const 16)) "out of bounds table access")
(assert_trap (invoke "test" (i32.const 0)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 1)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 2)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 3)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 4)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 5)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 6)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 7)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 8)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 9)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 10)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 11)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 12)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 13)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 14)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 15)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 16)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 17)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 18)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 19)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 20)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 21)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 22)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 23)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 24)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 25)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 26)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 27)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 28)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 29)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 30)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 31)) "uninitialized element")

(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func (param i32) (result i32)))
  (type (;2;) (func (param i32 i32)))
  (type (;3;) (func (param i64)))
  (type (;4;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func $finite_wasm_gas (;0;) (type 3)))
  (import "spectest" "finite_wasm_stack" (func $finite_wasm_stack (;1;) (type 4)))
  (func $f0 (;2;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 0
  )
  (func $f1 (;3;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 1
  )
  (func $f2 (;4;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 2
  )
  (func $f3 (;5;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 3
  )
  (func $f4 (;6;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 4
  )
  (func $f5 (;7;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 5
  )
  (func $f6 (;8;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 6
  )
  (func $f7 (;9;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 7
  )
  (func $f8 (;10;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 8
  )
  (func $f9 (;11;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 9
  )
  (func $f10 (;12;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 10
  )
  (func $f11 (;13;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 11
  )
  (func $f12 (;14;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 12
  )
  (func $f13 (;15;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 13
  )
  (func $f14 (;16;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 14
  )
  (func $f15 (;17;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 15
  )
  (func (;18;) (type 1) (param $n i32) (result i32)
    i64.const 8
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    local.get $n
    call_indirect (type 0)
    i64.const 1
    call $finite_wasm_gas
  )
  (func (;19;) (type 2) (param $offs i32) (param $len i32)
    i64.const 12
    i64.const 1
    call $finite_wasm_stack
    i64.const 3
    call $finite_wasm_gas
    local.get $offs
    i32.const 0
    local.get $len
    i64.const 1
    call $finite_wasm_gas
    table.init 0
    i64.const 1
    call $finite_wasm_gas
  )
  (table (;0;) 32 64 funcref)
  (export "f0" (func $f0))
  (export "f1" (func $f1))
  (export "f2" (func $f2))
  (export "f3" (func $f3))
  (export "f4" (func $f4))
  (export "f5" (func $f5))
  (export "f6" (func $f6))
  (export "f7" (func $f7))
  (export "f8" (func $f8))
  (export "f9" (func $f9))
  (export "f10" (func $f10))
  (export "f11" (func $f11))
  (export "f12" (func $f12))
  (export "f13" (func $f13))
  (export "f14" (func $f14))
  (export "f15" (func $f15))
  (export "test" (func 18))
  (export "run" (func 19))
  (elem (;0;) funcref (ref.func $f0) (ref.func $f1) (ref.func $f2) (ref.func $f3) (ref.func $f4) (ref.func $f5) (ref.func $f6) (ref.func $f7) (ref.func $f8) (ref.func $f9) (ref.func $f10) (ref.func $f11) (ref.func $f12) (ref.func $f13) (ref.func $f14) (ref.func $f15))
)
(assert_trap (invoke "run" (i32.const 25) (i32.const 16)) "out of bounds table access")
(assert_trap (invoke "test" (i32.const 0)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 1)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 2)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 3)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 4)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 5)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 6)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 7)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 8)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 9)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 10)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 11)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 12)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 13)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 14)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 15)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 16)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 17)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 18)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 19)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 20)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 21)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 22)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 23)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 24)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 25)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 26)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 27)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 28)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 29)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 30)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 31)) "uninitialized element")

(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func (param i32) (result i32)))
  (type (;2;) (func (param i32 i32)))
  (type (;3;) (func (param i64)))
  (type (;4;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func $finite_wasm_gas (;0;) (type 3)))
  (import "spectest" "finite_wasm_stack" (func $finite_wasm_stack (;1;) (type 4)))
  (func $f0 (;2;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 0
  )
  (func $f1 (;3;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 1
  )
  (func $f2 (;4;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 2
  )
  (func $f3 (;5;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 3
  )
  (func $f4 (;6;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 4
  )
  (func $f5 (;7;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 5
  )
  (func $f6 (;8;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 6
  )
  (func $f7 (;9;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 7
  )
  (func $f8 (;10;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 8
  )
  (func $f9 (;11;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 9
  )
  (func $f10 (;12;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 10
  )
  (func $f11 (;13;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 11
  )
  (func $f12 (;14;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 12
  )
  (func $f13 (;15;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 13
  )
  (func $f14 (;16;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 14
  )
  (func $f15 (;17;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 15
  )
  (func (;18;) (type 1) (param $n i32) (result i32)
    i64.const 8
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    local.get $n
    call_indirect (type 0)
    i64.const 1
    call $finite_wasm_gas
  )
  (func (;19;) (type 2) (param $offs i32) (param $len i32)
    i64.const 12
    i64.const 1
    call $finite_wasm_stack
    i64.const 3
    call $finite_wasm_gas
    local.get $offs
    i32.const 0
    local.get $len
    i64.const 1
    call $finite_wasm_gas
    table.init 0
    i64.const 1
    call $finite_wasm_gas
  )
  (table (;0;) 160 320 funcref)
  (export "f0" (func $f0))
  (export "f1" (func $f1))
  (export "f2" (func $f2))
  (export "f3" (func $f3))
  (export "f4" (func $f4))
  (export "f5" (func $f5))
  (export "f6" (func $f6))
  (export "f7" (func $f7))
  (export "f8" (func $f8))
  (export "f9" (func $f9))
  (export "f10" (func $f10))
  (export "f11" (func $f11))
  (export "f12" (func $f12))
  (export "f13" (func $f13))
  (export "f14" (func $f14))
  (export "f15" (func $f15))
  (export "test" (func 18))
  (export "run" (func 19))
  (elem (;0;) funcref (ref.func $f0) (ref.func $f1) (ref.func $f2) (ref.func $f3) (ref.func $f4) (ref.func $f5) (ref.func $f6) (ref.func $f7) (ref.func $f8) (ref.func $f9) (ref.func $f10) (ref.func $f11) (ref.func $f12) (ref.func $f13) (ref.func $f14) (ref.func $f15))
)
(assert_trap (invoke "run" (i32.const 96) (i32.const 32)) "out of bounds table access")
(assert_trap (invoke "test" (i32.const 0)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 1)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 2)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 3)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 4)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 5)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 6)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 7)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 8)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 9)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 10)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 11)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 12)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 13)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 14)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 15)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 16)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 17)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 18)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 19)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 20)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 21)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 22)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 23)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 24)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 25)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 26)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 27)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 28)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 29)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 30)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 31)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 32)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 33)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 34)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 35)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 36)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 37)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 38)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 39)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 40)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 41)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 42)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 43)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 44)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 45)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 46)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 47)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 48)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 49)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 50)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 51)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 52)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 53)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 54)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 55)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 56)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 57)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 58)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 59)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 60)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 61)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 62)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 63)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 64)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 65)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 66)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 67)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 68)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 69)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 70)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 71)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 72)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 73)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 74)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 75)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 76)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 77)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 78)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 79)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 80)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 81)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 82)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 83)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 84)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 85)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 86)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 87)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 88)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 89)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 90)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 91)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 92)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 93)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 94)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 95)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 96)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 97)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 98)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 99)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 100)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 101)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 102)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 103)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 104)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 105)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 106)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 107)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 108)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 109)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 110)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 111)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 112)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 113)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 114)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 115)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 116)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 117)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 118)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 119)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 120)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 121)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 122)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 123)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 124)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 125)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 126)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 127)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 128)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 129)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 130)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 131)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 132)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 133)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 134)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 135)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 136)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 137)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 138)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 139)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 140)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 141)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 142)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 143)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 144)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 145)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 146)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 147)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 148)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 149)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 150)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 151)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 152)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 153)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 154)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 155)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 156)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 157)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 158)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 159)) "uninitialized element")

(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func (param i32) (result i32)))
  (type (;2;) (func (param i32 i32)))
  (type (;3;) (func (param i64)))
  (type (;4;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func $finite_wasm_gas (;0;) (type 3)))
  (import "spectest" "finite_wasm_stack" (func $finite_wasm_stack (;1;) (type 4)))
  (func $f0 (;2;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 0
  )
  (func $f1 (;3;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 1
  )
  (func $f2 (;4;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 2
  )
  (func $f3 (;5;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 3
  )
  (func $f4 (;6;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 4
  )
  (func $f5 (;7;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 5
  )
  (func $f6 (;8;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 6
  )
  (func $f7 (;9;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 7
  )
  (func $f8 (;10;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 8
  )
  (func $f9 (;11;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 9
  )
  (func $f10 (;12;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 10
  )
  (func $f11 (;13;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 11
  )
  (func $f12 (;14;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 12
  )
  (func $f13 (;15;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 13
  )
  (func $f14 (;16;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 14
  )
  (func $f15 (;17;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 15
  )
  (func (;18;) (type 1) (param $n i32) (result i32)
    i64.const 8
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    local.get $n
    call_indirect (type 0)
    i64.const 1
    call $finite_wasm_gas
  )
  (func (;19;) (type 2) (param $offs i32) (param $len i32)
    i64.const 12
    i64.const 1
    call $finite_wasm_stack
    i64.const 3
    call $finite_wasm_gas
    local.get $offs
    i32.const 0
    local.get $len
    i64.const 1
    call $finite_wasm_gas
    table.init 0
    i64.const 1
    call $finite_wasm_gas
  )
  (table (;0;) 160 320 funcref)
  (export "f0" (func $f0))
  (export "f1" (func $f1))
  (export "f2" (func $f2))
  (export "f3" (func $f3))
  (export "f4" (func $f4))
  (export "f5" (func $f5))
  (export "f6" (func $f6))
  (export "f7" (func $f7))
  (export "f8" (func $f8))
  (export "f9" (func $f9))
  (export "f10" (func $f10))
  (export "f11" (func $f11))
  (export "f12" (func $f12))
  (export "f13" (func $f13))
  (export "f14" (func $f14))
  (export "f15" (func $f15))
  (export "test" (func 18))
  (export "run" (func 19))
  (elem (;0;) funcref (ref.func $f0) (ref.func $f1) (ref.func $f2) (ref.func $f3) (ref.func $f4) (ref.func $f5) (ref.func $f6) (ref.func $f7) (ref.func $f8) (ref.func $f9) (ref.func $f10) (ref.func $f11) (ref.func $f12) (ref.func $f13) (ref.func $f14) (ref.func $f15))
)
(assert_trap (invoke "run" (i32.const 97) (i32.const 31)) "out of bounds table access")
(assert_trap (invoke "test" (i32.const 0)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 1)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 2)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 3)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 4)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 5)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 6)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 7)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 8)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 9)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 10)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 11)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 12)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 13)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 14)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 15)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 16)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 17)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 18)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 19)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 20)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 21)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 22)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 23)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 24)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 25)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 26)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 27)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 28)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 29)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 30)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 31)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 32)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 33)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 34)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 35)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 36)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 37)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 38)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 39)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 40)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 41)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 42)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 43)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 44)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 45)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 46)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 47)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 48)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 49)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 50)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 51)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 52)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 53)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 54)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 55)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 56)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 57)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 58)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 59)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 60)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 61)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 62)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 63)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 64)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 65)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 66)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 67)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 68)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 69)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 70)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 71)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 72)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 73)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 74)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 75)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 76)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 77)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 78)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 79)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 80)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 81)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 82)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 83)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 84)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 85)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 86)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 87)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 88)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 89)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 90)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 91)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 92)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 93)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 94)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 95)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 96)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 97)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 98)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 99)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 100)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 101)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 102)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 103)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 104)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 105)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 106)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 107)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 108)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 109)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 110)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 111)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 112)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 113)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 114)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 115)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 116)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 117)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 118)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 119)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 120)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 121)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 122)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 123)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 124)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 125)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 126)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 127)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 128)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 129)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 130)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 131)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 132)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 133)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 134)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 135)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 136)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 137)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 138)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 139)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 140)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 141)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 142)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 143)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 144)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 145)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 146)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 147)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 148)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 149)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 150)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 151)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 152)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 153)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 154)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 155)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 156)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 157)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 158)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 159)) "uninitialized element")

(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func (param i32) (result i32)))
  (type (;2;) (func (param i32 i32)))
  (type (;3;) (func (param i64)))
  (type (;4;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func $finite_wasm_gas (;0;) (type 3)))
  (import "spectest" "finite_wasm_stack" (func $finite_wasm_stack (;1;) (type 4)))
  (func $f0 (;2;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 0
  )
  (func $f1 (;3;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 1
  )
  (func $f2 (;4;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 2
  )
  (func $f3 (;5;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 3
  )
  (func $f4 (;6;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 4
  )
  (func $f5 (;7;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 5
  )
  (func $f6 (;8;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 6
  )
  (func $f7 (;9;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 7
  )
  (func $f8 (;10;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 8
  )
  (func $f9 (;11;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 9
  )
  (func $f10 (;12;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 10
  )
  (func $f11 (;13;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 11
  )
  (func $f12 (;14;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 12
  )
  (func $f13 (;15;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 13
  )
  (func $f14 (;16;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 14
  )
  (func $f15 (;17;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 15
  )
  (func (;18;) (type 1) (param $n i32) (result i32)
    i64.const 8
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    local.get $n
    call_indirect (type 0)
    i64.const 1
    call $finite_wasm_gas
  )
  (func (;19;) (type 2) (param $offs i32) (param $len i32)
    i64.const 12
    i64.const 1
    call $finite_wasm_stack
    i64.const 3
    call $finite_wasm_gas
    local.get $offs
    i32.const 0
    local.get $len
    i64.const 1
    call $finite_wasm_gas
    table.init 0
    i64.const 1
    call $finite_wasm_gas
  )
  (table (;0;) 64 64 funcref)
  (export "f0" (func $f0))
  (export "f1" (func $f1))
  (export "f2" (func $f2))
  (export "f3" (func $f3))
  (export "f4" (func $f4))
  (export "f5" (func $f5))
  (export "f6" (func $f6))
  (export "f7" (func $f7))
  (export "f8" (func $f8))
  (export "f9" (func $f9))
  (export "f10" (func $f10))
  (export "f11" (func $f11))
  (export "f12" (func $f12))
  (export "f13" (func $f13))
  (export "f14" (func $f14))
  (export "f15" (func $f15))
  (export "test" (func 18))
  (export "run" (func 19))
  (elem (;0;) funcref (ref.func $f0) (ref.func $f1) (ref.func $f2) (ref.func $f3) (ref.func $f4) (ref.func $f5) (ref.func $f6) (ref.func $f7) (ref.func $f8) (ref.func $f9) (ref.func $f10) (ref.func $f11) (ref.func $f12) (ref.func $f13) (ref.func $f14) (ref.func $f15))
)
(assert_trap (invoke "run" (i32.const 48) (i32.const 4294967280)) "out of bounds table access")
(assert_trap (invoke "test" (i32.const 0)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 1)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 2)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 3)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 4)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 5)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 6)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 7)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 8)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 9)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 10)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 11)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 12)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 13)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 14)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 15)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 16)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 17)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 18)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 19)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 20)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 21)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 22)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 23)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 24)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 25)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 26)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 27)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 28)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 29)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 30)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 31)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 32)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 33)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 34)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 35)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 36)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 37)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 38)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 39)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 40)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 41)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 42)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 43)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 44)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 45)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 46)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 47)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 48)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 49)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 50)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 51)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 52)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 53)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 54)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 55)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 56)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 57)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 58)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 59)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 60)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 61)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 62)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 63)) "uninitialized element")

(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func (param i32) (result i32)))
  (type (;2;) (func (param i32 i32)))
  (type (;3;) (func (param i64)))
  (type (;4;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func $finite_wasm_gas (;0;) (type 3)))
  (import "spectest" "finite_wasm_stack" (func $finite_wasm_stack (;1;) (type 4)))
  (func $f0 (;2;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 0
  )
  (func $f1 (;3;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 1
  )
  (func $f2 (;4;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 2
  )
  (func $f3 (;5;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 3
  )
  (func $f4 (;6;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 4
  )
  (func $f5 (;7;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 5
  )
  (func $f6 (;8;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 6
  )
  (func $f7 (;9;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 7
  )
  (func $f8 (;10;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 8
  )
  (func $f9 (;11;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 9
  )
  (func $f10 (;12;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 10
  )
  (func $f11 (;13;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 11
  )
  (func $f12 (;14;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 12
  )
  (func $f13 (;15;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 13
  )
  (func $f14 (;16;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 14
  )
  (func $f15 (;17;) (type 0) (result i32)
    i64.const 4
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    i32.const 15
  )
  (func (;18;) (type 1) (param $n i32) (result i32)
    i64.const 8
    i64.const 0
    call $finite_wasm_stack
    i64.const 2
    call $finite_wasm_gas
    local.get $n
    call_indirect (type 0)
    i64.const 1
    call $finite_wasm_gas
  )
  (func (;19;) (type 2) (param $offs i32) (param $len i32)
    i64.const 12
    i64.const 1
    call $finite_wasm_stack
    i64.const 3
    call $finite_wasm_gas
    local.get $offs
    i32.const 8
    local.get $len
    i64.const 1
    call $finite_wasm_gas
    table.init 0
    i64.const 1
    call $finite_wasm_gas
  )
  (table (;0;) 16 16 funcref)
  (export "f0" (func $f0))
  (export "f1" (func $f1))
  (export "f2" (func $f2))
  (export "f3" (func $f3))
  (export "f4" (func $f4))
  (export "f5" (func $f5))
  (export "f6" (func $f6))
  (export "f7" (func $f7))
  (export "f8" (func $f8))
  (export "f9" (func $f9))
  (export "f10" (func $f10))
  (export "f11" (func $f11))
  (export "f12" (func $f12))
  (export "f13" (func $f13))
  (export "f14" (func $f14))
  (export "f15" (func $f15))
  (export "test" (func 18))
  (export "run" (func 19))
  (elem (;0;) funcref (ref.func $f0) (ref.func $f1) (ref.func $f2) (ref.func $f3) (ref.func $f4) (ref.func $f5) (ref.func $f6) (ref.func $f7) (ref.func $f8) (ref.func $f9) (ref.func $f10) (ref.func $f11) (ref.func $f12) (ref.func $f13) (ref.func $f14) (ref.func $f15))
)
(assert_trap (invoke "run" (i32.const 0) (i32.const 4294967292)) "out of bounds table access")
(assert_trap (invoke "test" (i32.const 0)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 1)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 2)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 3)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 4)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 5)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 6)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 7)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 8)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 9)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 10)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 11)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 12)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 13)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 14)) "uninitialized element")
(assert_trap (invoke "test" (i32.const 15)) "uninitialized element")

(module
  (type (;0;) (func))
  (type (;1;) (func (param i64)))
  (type (;2;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 1)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 2)))
  (func (;2;) (type 0)
    i64.const 12
    i64.const 0
    call 1
    i64.const 3
    call 0
    i32.const 0
    i32.const 0
    i32.const 0
    i64.const 1
    call 0
    table.init 64
    i64.const 1
    call 0
  )
  (table (;0;) 1 funcref)
  (elem (;0;) funcref)
  (elem (;1;) funcref)
  (elem (;2;) funcref)
  (elem (;3;) funcref)
  (elem (;4;) funcref)
  (elem (;5;) funcref)
  (elem (;6;) funcref)
  (elem (;7;) funcref)
  (elem (;8;) funcref)
  (elem (;9;) funcref)
  (elem (;10;) funcref)
  (elem (;11;) funcref)
  (elem (;12;) funcref)
  (elem (;13;) funcref)
  (elem (;14;) funcref)
  (elem (;15;) funcref)
  (elem (;16;) funcref)
  (elem (;17;) funcref)
  (elem (;18;) funcref)
  (elem (;19;) funcref)
  (elem (;20;) funcref)
  (elem (;21;) funcref)
  (elem (;22;) funcref)
  (elem (;23;) funcref)
  (elem (;24;) funcref)
  (elem (;25;) funcref)
  (elem (;26;) funcref)
  (elem (;27;) funcref)
  (elem (;28;) funcref)
  (elem (;29;) funcref)
  (elem (;30;) funcref)
  (elem (;31;) funcref)
  (elem (;32;) funcref)
  (elem (;33;) funcref)
  (elem (;34;) funcref)
  (elem (;35;) funcref)
  (elem (;36;) funcref)
  (elem (;37;) funcref)
  (elem (;38;) funcref)
  (elem (;39;) funcref)
  (elem (;40;) funcref)
  (elem (;41;) funcref)
  (elem (;42;) funcref)
  (elem (;43;) funcref)
  (elem (;44;) funcref)
  (elem (;45;) funcref)
  (elem (;46;) funcref)
  (elem (;47;) funcref)
  (elem (;48;) funcref)
  (elem (;49;) funcref)
  (elem (;50;) funcref)
  (elem (;51;) funcref)
  (elem (;52;) funcref)
  (elem (;53;) funcref)
  (elem (;54;) funcref)
  (elem (;55;) funcref)
  (elem (;56;) funcref)
  (elem (;57;) funcref)
  (elem (;58;) funcref)
  (elem (;59;) funcref)
  (elem (;60;) funcref)
  (elem (;61;) funcref)
  (elem (;62;) funcref)
  (elem (;63;) funcref)
  (elem (;64;) funcref)
)
