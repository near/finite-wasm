(module
  (type (;0;) (func (result f32)))
  (type (;1;) (func (result i32)))
  (type (;2;) (func))
  (type (;3;) (func (param i64)))
  (type (;4;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 3)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 4)))
  (import "spectest" "finite_wasm_unstack" (func (;2;) (type 4)))
  (memory (;0;) 1 1)
  (export "f32.load" (func 3))
  (export "i32.load" (func 4))
  (export "f32.store" (func 5))
  (export "i32.store" (func 6))
  (export "reset" (func 7))
  (func (;3;) (type 0) (result f32)
    block (result f32) ;; label = @1
      i64.const 4
      i64.const 0
      call 1
      i64.const 2
      call 0
      i32.const 0
      f32.load
    end
    i64.const 4
    i64.const 0
    call 2
  )
  (func (;4;) (type 1) (result i32)
    block (result i32) ;; label = @1
      i64.const 4
      i64.const 0
      call 1
      i64.const 2
      call 0
      i32.const 0
      i32.load
    end
    i64.const 4
    i64.const 0
    call 2
  )
  (func (;5;) (type 2)
    block ;; label = @1
      i64.const 8
      i64.const 0
      call 1
      i64.const 3
      call 0
      i32.const 0
      f32.const nan:0x200000 (;=NaN;)
      f32.store
    end
    i64.const 8
    i64.const 0
    call 2
  )
  (func (;6;) (type 2)
    block ;; label = @1
      i64.const 8
      i64.const 0
      call 1
      i64.const 3
      call 0
      i32.const 0
      i32.const 2141192192
      i32.store
    end
    i64.const 8
    i64.const 0
    call 2
  )
  (func (;7;) (type 2)
    block ;; label = @1
      i64.const 8
      i64.const 0
      call 1
      i64.const 3
      call 0
      i32.const 0
      i32.const 0
      i32.store
    end
    i64.const 8
    i64.const 0
    call 2
  )
  (data (;0;) (i32.const 0) "\00\00\a0\7f")
)

(assert_return (invoke "i32.load") (i32.const 0x7fa00000))
(assert_return (invoke "f32.load") (f32.const nan:0x200000))
(invoke "reset")
(assert_return (invoke "i32.load") (i32.const 0x0))
(assert_return (invoke "f32.load") (f32.const 0.0))
(invoke "f32.store")
(assert_return (invoke "i32.load") (i32.const 0x7fa00000))
(assert_return (invoke "f32.load") (f32.const nan:0x200000))
(invoke "reset")
(assert_return (invoke "i32.load") (i32.const 0x0))
(assert_return (invoke "f32.load") (f32.const 0.0))
(invoke "i32.store")
(assert_return (invoke "i32.load") (i32.const 0x7fa00000))
(assert_return (invoke "f32.load") (f32.const nan:0x200000))

(module
  (type (;0;) (func (result f64)))
  (type (;1;) (func (result i64)))
  (type (;2;) (func))
  (type (;3;) (func (param i64)))
  (type (;4;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 3)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 4)))
  (import "spectest" "finite_wasm_unstack" (func (;2;) (type 4)))
  (memory (;0;) 1 1)
  (export "f64.load" (func 3))
  (export "i64.load" (func 4))
  (export "f64.store" (func 5))
  (export "i64.store" (func 6))
  (export "reset" (func 7))
  (func (;3;) (type 0) (result f64)
    block (result f64) ;; label = @1
      i64.const 8
      i64.const 0
      call 1
      i64.const 2
      call 0
      i32.const 0
      f64.load
    end
    i64.const 8
    i64.const 0
    call 2
  )
  (func (;4;) (type 1) (result i64)
    block (result i64) ;; label = @1
      i64.const 8
      i64.const 0
      call 1
      i64.const 2
      call 0
      i32.const 0
      i64.load
    end
    i64.const 8
    i64.const 0
    call 2
  )
  (func (;5;) (type 2)
    block ;; label = @1
      i64.const 12
      i64.const 0
      call 1
      i64.const 3
      call 0
      i32.const 0
      f64.const nan:0x4000000000000 (;=NaN;)
      f64.store
    end
    i64.const 12
    i64.const 0
    call 2
  )
  (func (;6;) (type 2)
    block ;; label = @1
      i64.const 12
      i64.const 0
      call 1
      i64.const 3
      call 0
      i32.const 0
      i64.const 9219994337134247936
      i64.store
    end
    i64.const 12
    i64.const 0
    call 2
  )
  (func (;7;) (type 2)
    block ;; label = @1
      i64.const 12
      i64.const 0
      call 1
      i64.const 3
      call 0
      i32.const 0
      i64.const 0
      i64.store
    end
    i64.const 12
    i64.const 0
    call 2
  )
  (data (;0;) (i32.const 0) "\00\00\00\00\00\00\f4\7f")
)

(assert_return (invoke "i64.load") (i64.const 0x7ff4000000000000))
(assert_return (invoke "f64.load") (f64.const nan:0x4000000000000))
(invoke "reset")
(assert_return (invoke "i64.load") (i64.const 0x0))
(assert_return (invoke "f64.load") (f64.const 0.0))
(invoke "f64.store")
(assert_return (invoke "i64.load") (i64.const 0x7ff4000000000000))
(assert_return (invoke "f64.load") (f64.const nan:0x4000000000000))
(invoke "reset")
(assert_return (invoke "i64.load") (i64.const 0x0))
(assert_return (invoke "f64.load") (f64.const 0.0))
(invoke "i64.store")
(assert_return (invoke "i64.load") (i64.const 0x7ff4000000000000))
(assert_return (invoke "f64.load") (f64.const nan:0x4000000000000))

;; Test that unaligned load and store do not canonicalize NaNs.

(module
  (type (;0;) (func (result f32)))
  (type (;1;) (func (result i32)))
  (type (;2;) (func))
  (type (;3;) (func (param i64)))
  (type (;4;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 3)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 4)))
  (import "spectest" "finite_wasm_unstack" (func (;2;) (type 4)))
  (memory (;0;) 1 1)
  (export "f32.load" (func 3))
  (export "i32.load" (func 4))
  (export "f32.store" (func 5))
  (export "i32.store" (func 6))
  (export "reset" (func 7))
  (func (;3;) (type 0) (result f32)
    block (result f32) ;; label = @1
      i64.const 4
      i64.const 0
      call 1
      i64.const 2
      call 0
      i32.const 1
      f32.load
    end
    i64.const 4
    i64.const 0
    call 2
  )
  (func (;4;) (type 1) (result i32)
    block (result i32) ;; label = @1
      i64.const 4
      i64.const 0
      call 1
      i64.const 2
      call 0
      i32.const 1
      i32.load
    end
    i64.const 4
    i64.const 0
    call 2
  )
  (func (;5;) (type 2)
    block ;; label = @1
      i64.const 8
      i64.const 0
      call 1
      i64.const 3
      call 0
      i32.const 1
      f32.const nan:0x200000 (;=NaN;)
      f32.store
    end
    i64.const 8
    i64.const 0
    call 2
  )
  (func (;6;) (type 2)
    block ;; label = @1
      i64.const 8
      i64.const 0
      call 1
      i64.const 3
      call 0
      i32.const 1
      i32.const 2141192192
      i32.store
    end
    i64.const 8
    i64.const 0
    call 2
  )
  (func (;7;) (type 2)
    block ;; label = @1
      i64.const 8
      i64.const 0
      call 1
      i64.const 3
      call 0
      i32.const 1
      i32.const 0
      i32.store
    end
    i64.const 8
    i64.const 0
    call 2
  )
  (data (;0;) (i32.const 0) "\00\00\00\a0\7f")
)

(assert_return (invoke "i32.load") (i32.const 0x7fa00000))
(assert_return (invoke "f32.load") (f32.const nan:0x200000))
(invoke "reset")
(assert_return (invoke "i32.load") (i32.const 0x0))
(assert_return (invoke "f32.load") (f32.const 0.0))
(invoke "f32.store")
(assert_return (invoke "i32.load") (i32.const 0x7fa00000))
(assert_return (invoke "f32.load") (f32.const nan:0x200000))
(invoke "reset")
(assert_return (invoke "i32.load") (i32.const 0x0))
(assert_return (invoke "f32.load") (f32.const 0.0))
(invoke "i32.store")
(assert_return (invoke "i32.load") (i32.const 0x7fa00000))
(assert_return (invoke "f32.load") (f32.const nan:0x200000))

(module
  (type (;0;) (func (result f64)))
  (type (;1;) (func (result i64)))
  (type (;2;) (func))
  (type (;3;) (func (param i64)))
  (type (;4;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 3)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 4)))
  (import "spectest" "finite_wasm_unstack" (func (;2;) (type 4)))
  (memory (;0;) 1 1)
  (export "f64.load" (func 3))
  (export "i64.load" (func 4))
  (export "f64.store" (func 5))
  (export "i64.store" (func 6))
  (export "reset" (func 7))
  (func (;3;) (type 0) (result f64)
    block (result f64) ;; label = @1
      i64.const 8
      i64.const 0
      call 1
      i64.const 2
      call 0
      i32.const 1
      f64.load
    end
    i64.const 8
    i64.const 0
    call 2
  )
  (func (;4;) (type 1) (result i64)
    block (result i64) ;; label = @1
      i64.const 8
      i64.const 0
      call 1
      i64.const 2
      call 0
      i32.const 1
      i64.load
    end
    i64.const 8
    i64.const 0
    call 2
  )
  (func (;5;) (type 2)
    block ;; label = @1
      i64.const 12
      i64.const 0
      call 1
      i64.const 3
      call 0
      i32.const 1
      f64.const nan:0x4000000000000 (;=NaN;)
      f64.store
    end
    i64.const 12
    i64.const 0
    call 2
  )
  (func (;6;) (type 2)
    block ;; label = @1
      i64.const 12
      i64.const 0
      call 1
      i64.const 3
      call 0
      i32.const 1
      i64.const 9219994337134247936
      i64.store
    end
    i64.const 12
    i64.const 0
    call 2
  )
  (func (;7;) (type 2)
    block ;; label = @1
      i64.const 12
      i64.const 0
      call 1
      i64.const 3
      call 0
      i32.const 1
      i64.const 0
      i64.store
    end
    i64.const 12
    i64.const 0
    call 2
  )
  (data (;0;) (i32.const 0) "\00\00\00\00\00\00\00\f4\7f")
)

(assert_return (invoke "i64.load") (i64.const 0x7ff4000000000000))
(assert_return (invoke "f64.load") (f64.const nan:0x4000000000000))
(invoke "reset")
(assert_return (invoke "i64.load") (i64.const 0x0))
(assert_return (invoke "f64.load") (f64.const 0.0))
(invoke "f64.store")
(assert_return (invoke "i64.load") (i64.const 0x7ff4000000000000))
(assert_return (invoke "f64.load") (f64.const nan:0x4000000000000))
(invoke "reset")
(assert_return (invoke "i64.load") (i64.const 0x0))
(assert_return (invoke "f64.load") (f64.const 0.0))
(invoke "i64.store")
(assert_return (invoke "i64.load") (i64.const 0x7ff4000000000000))
(assert_return (invoke "f64.load") (f64.const nan:0x4000000000000))

;; Test that load and store do not canonicalize NaNs as some JS engines do.

(module
  (type (;0;) (func (result f32)))
  (type (;1;) (func (result i32)))
  (type (;2;) (func))
  (type (;3;) (func (param i64)))
  (type (;4;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 3)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 4)))
  (import "spectest" "finite_wasm_unstack" (func (;2;) (type 4)))
  (memory (;0;) 1 1)
  (export "f32.load" (func 3))
  (export "i32.load" (func 4))
  (export "f32.store" (func 5))
  (export "i32.store" (func 6))
  (export "reset" (func 7))
  (func (;3;) (type 0) (result f32)
    block (result f32) ;; label = @1
      i64.const 4
      i64.const 0
      call 1
      i64.const 2
      call 0
      i32.const 0
      f32.load
    end
    i64.const 4
    i64.const 0
    call 2
  )
  (func (;4;) (type 1) (result i32)
    block (result i32) ;; label = @1
      i64.const 4
      i64.const 0
      call 1
      i64.const 2
      call 0
      i32.const 0
      i32.load
    end
    i64.const 4
    i64.const 0
    call 2
  )
  (func (;5;) (type 2)
    block ;; label = @1
      i64.const 8
      i64.const 0
      call 1
      i64.const 3
      call 0
      i32.const 0
      f32.const nan:0x500001 (;=NaN;)
      f32.store
    end
    i64.const 8
    i64.const 0
    call 2
  )
  (func (;6;) (type 2)
    block ;; label = @1
      i64.const 8
      i64.const 0
      call 1
      i64.const 3
      call 0
      i32.const 0
      i32.const 2144337921
      i32.store
    end
    i64.const 8
    i64.const 0
    call 2
  )
  (func (;7;) (type 2)
    block ;; label = @1
      i64.const 8
      i64.const 0
      call 1
      i64.const 3
      call 0
      i32.const 0
      i32.const 0
      i32.store
    end
    i64.const 8
    i64.const 0
    call 2
  )
  (data (;0;) (i32.const 0) "\01\00\d0\7f")
)

(assert_return (invoke "i32.load") (i32.const 0x7fd00001))
(assert_return (invoke "f32.load") (f32.const nan:0x500001))
(invoke "reset")
(assert_return (invoke "i32.load") (i32.const 0x0))
(assert_return (invoke "f32.load") (f32.const 0.0))
(invoke "f32.store")
(assert_return (invoke "i32.load") (i32.const 0x7fd00001))
(assert_return (invoke "f32.load") (f32.const nan:0x500001))
(invoke "reset")
(assert_return (invoke "i32.load") (i32.const 0x0))
(assert_return (invoke "f32.load") (f32.const 0.0))
(invoke "i32.store")
(assert_return (invoke "i32.load") (i32.const 0x7fd00001))
(assert_return (invoke "f32.load") (f32.const nan:0x500001))

(module
  (type (;0;) (func (result f64)))
  (type (;1;) (func (result i64)))
  (type (;2;) (func))
  (type (;3;) (func (param i64)))
  (type (;4;) (func (param i64 i64)))
  (import "spectest" "finite_wasm_gas" (func (;0;) (type 3)))
  (import "spectest" "finite_wasm_stack" (func (;1;) (type 4)))
  (import "spectest" "finite_wasm_unstack" (func (;2;) (type 4)))
  (memory (;0;) 1 1)
  (export "f64.load" (func 3))
  (export "i64.load" (func 4))
  (export "f64.store" (func 5))
  (export "i64.store" (func 6))
  (export "reset" (func 7))
  (func (;3;) (type 0) (result f64)
    block (result f64) ;; label = @1
      i64.const 8
      i64.const 0
      call 1
      i64.const 2
      call 0
      i32.const 0
      f64.load
    end
    i64.const 8
    i64.const 0
    call 2
  )
  (func (;4;) (type 1) (result i64)
    block (result i64) ;; label = @1
      i64.const 8
      i64.const 0
      call 1
      i64.const 2
      call 0
      i32.const 0
      i64.load
    end
    i64.const 8
    i64.const 0
    call 2
  )
  (func (;5;) (type 2)
    block ;; label = @1
      i64.const 12
      i64.const 0
      call 1
      i64.const 3
      call 0
      i32.const 0
      f64.const nan:0xc000000000001 (;=NaN;)
      f64.store
    end
    i64.const 12
    i64.const 0
    call 2
  )
  (func (;6;) (type 2)
    block ;; label = @1
      i64.const 12
      i64.const 0
      call 1
      i64.const 3
      call 0
      i32.const 0
      i64.const 9222246136947933185
      i64.store
    end
    i64.const 12
    i64.const 0
    call 2
  )
  (func (;7;) (type 2)
    block ;; label = @1
      i64.const 12
      i64.const 0
      call 1
      i64.const 3
      call 0
      i32.const 0
      i64.const 0
      i64.store
    end
    i64.const 12
    i64.const 0
    call 2
  )
  (data (;0;) (i32.const 0) "\01\00\00\00\00\00\fc\7f")
)

(assert_return (invoke "i64.load") (i64.const 0x7ffc000000000001))
(assert_return (invoke "f64.load") (f64.const nan:0xc000000000001))
(invoke "reset")
(assert_return (invoke "i64.load") (i64.const 0x0))
(assert_return (invoke "f64.load") (f64.const 0.0))
(invoke "f64.store")
(assert_return (invoke "i64.load") (i64.const 0x7ffc000000000001))
(assert_return (invoke "f64.load") (f64.const nan:0xc000000000001))
(invoke "reset")
(assert_return (invoke "i64.load") (i64.const 0x0))
(assert_return (invoke "f64.load") (f64.const 0.0))
(invoke "i64.store")
(assert_return (invoke "i64.load") (i64.const 0x7ffc000000000001))
(assert_return (invoke "f64.load") (f64.const nan:0xc000000000001))
