use wasm_encoder as we;
use wasmparser as wp;
use wp::BinaryReaderError;

pub(crate) fn transform_op<'a, 'b>(
    op: wp::Operator<'a>,
) -> Result<we::Instruction<'b>, BinaryReaderError> {
    use we::Instruction::*;
    use wp::Operator as O;
    Ok(match op {
        O::Unreachable => Unreachable,
        O::Nop => Nop,
        O::Block { ty } => Block(transform_block_ty(ty)),
        O::Loop { ty } => Loop(transform_block_ty(ty)),
        O::If { ty } => If(transform_block_ty(ty)),
        O::Else => Else,
        O::Try { ty } => Try(transform_block_ty(ty)),
        O::Catch { index } => Catch(index),
        O::Throw { index } => Throw(index),
        O::Rethrow { relative_depth } => Rethrow(relative_depth),
        O::End => End,
        O::Br { relative_depth } => Br(relative_depth),
        O::BrIf { relative_depth } => BrIf(relative_depth),
        O::BrTable { table } => {
            BrTable(table.targets().collect::<Result<_, _>>()?, table.default())
        }
        O::Return => Return,
        O::Call { function_index } => Call(function_index),
        O::CallIndirect {
            index,
            table_index,
            table_byte,
        } => CallIndirect {
            ty: index,
            table: table_index,
        },
        O::ReturnCall { function_index } => unimplemented!(),
        O::ReturnCallIndirect { index, table_index } => unimplemented!(),
        O::Delegate { relative_depth } => Delegate(relative_depth),
        O::CatchAll => CatchAll,
        O::Drop => Drop,
        O::Select => Select,
        O::TypedSelect { ty } => TypedSelect(transform_ty(ty)),
        O::LocalGet { local_index } => LocalGet(local_index),
        O::LocalSet { local_index } => LocalSet(local_index),
        O::LocalTee { local_index } => LocalTee(local_index),
        O::GlobalGet { global_index } => GlobalGet(global_index),
        O::GlobalSet { global_index } => GlobalSet(global_index),
        O::I32Load { memarg } => I32Load(transform_memarg(memarg)),
        O::I64Load { memarg } => I64Load(transform_memarg(memarg)),
        O::F32Load { memarg } => F32Load(transform_memarg(memarg)),
        O::F64Load { memarg } => F64Load(transform_memarg(memarg)),
        O::I32Load8S { memarg } => I32Load8_S(transform_memarg(memarg)),
        O::I32Load8U { memarg } => I32Load8_U(transform_memarg(memarg)),
        O::I32Load16S { memarg } => I32Load16_S(transform_memarg(memarg)),
        O::I32Load16U { memarg } => I32Load16_U(transform_memarg(memarg)),
        O::I64Load8S { memarg } => I64Load8_S(transform_memarg(memarg)),
        O::I64Load8U { memarg } => I64Load8_U(transform_memarg(memarg)),
        O::I64Load16S { memarg } => I64Load16_S(transform_memarg(memarg)),
        O::I64Load16U { memarg } => I64Load16_U(transform_memarg(memarg)),
        O::I64Load32S { memarg } => I64Load32_S(transform_memarg(memarg)),
        O::I64Load32U { memarg } => I64Load32_U(transform_memarg(memarg)),
        O::I32Store { memarg } => I32Store(transform_memarg(memarg)),
        O::I64Store { memarg } => I64Store(transform_memarg(memarg)),
        O::F32Store { memarg } => F32Store(transform_memarg(memarg)),
        O::F64Store { memarg } => F64Store(transform_memarg(memarg)),
        O::I32Store8 { memarg } => I32Store8(transform_memarg(memarg)),
        O::I32Store16 { memarg } => I32Store16(transform_memarg(memarg)),
        O::I64Store8 { memarg } => I64Store8(transform_memarg(memarg)),
        O::I64Store16 { memarg } => I64Store16(transform_memarg(memarg)),
        O::I64Store32 { memarg } => I64Store32(transform_memarg(memarg)),
        O::MemorySize { mem, mem_byte } => MemorySize(mem),
        O::MemoryGrow { mem, mem_byte } => MemoryGrow(mem),
        O::I32Const { value } => I32Const(value),
        O::I64Const { value } => I64Const(value),
        O::F32Const { value } => F32Const(f32::from_bits(value.bits())),
        O::F64Const { value } => F64Const(f64::from_bits(value.bits())),
        O::RefNull { ty } => RefNull(transform_ty(ty)),
        O::RefIsNull => RefIsNull,
        O::RefFunc { function_index } => RefFunc(function_index),
        O::I32Eqz => I32Eqz,
        O::I32Eq => I32Eq,
        O::I32Ne => I32Ne,
        O::I32LtS => I32LtS,
        O::I32LtU => I32LtU,
        O::I32GtS => I32GtS,
        O::I32GtU => I32GtU,
        O::I32LeS => I32LeS,
        O::I32LeU => I32LeU,
        O::I32GeS => I32GeS,
        O::I32GeU => I32GeU,
        O::I64Eqz => I64Eqz,
        O::I64Eq => I64Eq,
        O::I64Ne => I64Ne,
        O::I64LtS => I64LtS,
        O::I64LtU => I64LtU,
        O::I64GtS => I64GtS,
        O::I64GtU => I64GtU,
        O::I64LeS => I64LeS,
        O::I64LeU => I64LeU,
        O::I64GeS => I64GeS,
        O::I64GeU => I64GeU,
        O::F32Eq => F32Eq,
        O::F32Ne => F32Ne,
        O::F32Lt => F32Lt,
        O::F32Gt => F32Gt,
        O::F32Le => F32Le,
        O::F32Ge => F32Ge,
        O::F64Eq => F64Eq,
        O::F64Ne => F64Ne,
        O::F64Lt => F64Lt,
        O::F64Gt => F64Gt,
        O::F64Le => F64Le,
        O::F64Ge => F64Ge,
        O::I32Clz => I32Clz,
        O::I32Ctz => I32Ctz,
        O::I32Popcnt => I32Popcnt,
        O::I32Add => I32Add,
        O::I32Sub => I32Sub,
        O::I32Mul => I32Mul,
        O::I32DivS => I32DivS,
        O::I32DivU => I32DivU,
        O::I32RemS => I32RemS,
        O::I32RemU => I32RemU,
        O::I32And => I32And,
        O::I32Or => I32Or,
        O::I32Xor => I32Xor,
        O::I32Shl => I32Shl,
        O::I32ShrS => I32ShrS,
        O::I32ShrU => I32ShrU,
        O::I32Rotl => I32Rotl,
        O::I32Rotr => I32Rotr,
        O::I64Clz => I64Clz,
        O::I64Ctz => I64Ctz,
        O::I64Popcnt => I64Popcnt,
        O::I64Add => I64Add,
        O::I64Sub => I64Sub,
        O::I64Mul => I64Mul,
        O::I64DivS => I64DivS,
        O::I64DivU => I64DivU,
        O::I64RemS => I64RemS,
        O::I64RemU => I64RemU,
        O::I64And => I64And,
        O::I64Or => I64Or,
        O::I64Xor => I64Xor,
        O::I64Shl => I64Shl,
        O::I64ShrS => I64ShrS,
        O::I64ShrU => I64ShrU,
        O::I64Rotl => I64Rotl,
        O::I64Rotr => I64Rotr,
        O::F32Abs => F32Abs,
        O::F32Neg => F32Neg,
        O::F32Ceil => F32Ceil,
        O::F32Floor => F32Floor,
        O::F32Trunc => F32Trunc,
        O::F32Nearest => F32Nearest,
        O::F32Sqrt => F32Sqrt,
        O::F32Add => F32Add,
        O::F32Sub => F32Sub,
        O::F32Mul => F32Mul,
        O::F32Div => F32Div,
        O::F32Min => F32Min,
        O::F32Max => F32Max,
        O::F32Copysign => F32Copysign,
        O::F64Abs => F64Abs,
        O::F64Neg => F64Neg,
        O::F64Ceil => F64Ceil,
        O::F64Floor => F64Floor,
        O::F64Trunc => F64Trunc,
        O::F64Nearest => F64Nearest,
        O::F64Sqrt => F64Sqrt,
        O::F64Add => F64Add,
        O::F64Sub => F64Sub,
        O::F64Mul => F64Mul,
        O::F64Div => F64Div,
        O::F64Min => F64Min,
        O::F64Max => F64Max,
        O::F64Copysign => F64Copysign,
        O::I32WrapI64 => I32WrapI64,
        O::I32TruncF32S => I32TruncF32S,
        O::I32TruncF32U => I32TruncF32U,
        O::I32TruncF64S => I32TruncF64S,
        O::I32TruncF64U => I32TruncF64U,
        O::I64ExtendI32S => I64ExtendI32S,
        O::I64ExtendI32U => I64ExtendI32U,
        O::I64TruncF32S => I64TruncF32S,
        O::I64TruncF32U => I64TruncF32U,
        O::I64TruncF64S => I64TruncF64S,
        O::I64TruncF64U => I64TruncF64U,
        O::F32ConvertI32S => F32ConvertI32S,
        O::F32ConvertI32U => F32ConvertI32U,
        O::F32ConvertI64S => F32ConvertI64S,
        O::F32ConvertI64U => F32ConvertI64U,
        O::F32DemoteF64 => F32DemoteF64,
        O::F64ConvertI32S => F64ConvertI32S,
        O::F64ConvertI32U => F64ConvertI32U,
        O::F64ConvertI64S => F64ConvertI64S,
        O::F64ConvertI64U => F64ConvertI64U,
        O::F64PromoteF32 => F64PromoteF32,
        O::I32ReinterpretF32 => I32ReinterpretF32,
        O::I64ReinterpretF64 => I64ReinterpretF64,
        O::F32ReinterpretI32 => F32ReinterpretI32,
        O::F64ReinterpretI64 => F64ReinterpretI64,
        O::I32Extend8S => I32Extend8S,
        O::I32Extend16S => I32Extend16S,
        O::I64Extend8S => I64Extend8S,
        O::I64Extend16S => I64Extend16S,
        O::I64Extend32S => I64Extend32S,
        O::I32TruncSatF32S => I32TruncSatF32S,
        O::I32TruncSatF32U => I32TruncSatF32U,
        O::I32TruncSatF64S => I32TruncSatF64S,
        O::I32TruncSatF64U => I32TruncSatF64U,
        O::I64TruncSatF32S => I64TruncSatF32S,
        O::I64TruncSatF32U => I64TruncSatF32U,
        O::I64TruncSatF64S => I64TruncSatF64S,
        O::I64TruncSatF64U => I64TruncSatF64U,
        O::MemoryInit { segment, mem } => MemoryInit { mem, data: segment },
        O::DataDrop { segment } => DataDrop(segment),
        O::MemoryCopy { src, dst } => MemoryCopy { src, dst },
        O::MemoryFill { mem } => MemoryFill(mem),
        O::TableInit { segment, table } => TableInit { segment, table },
        O::ElemDrop { segment } => ElemDrop { segment },
        O::TableCopy {
            dst_table,
            src_table,
        } => TableCopy {
            src: src_table,
            dst: dst_table,
        },
        O::TableFill { table } => TableFill { table },
        O::TableGet { table } => TableGet { table },
        O::TableSet { table } => TableSet { table },
        O::TableGrow { table } => TableGrow { table },
        O::TableSize { table } => TableSize { table },
        O::MemoryAtomicNotify { memarg } => todo!(),
        O::MemoryAtomicWait32 { memarg } => todo!(),
        O::MemoryAtomicWait64 { memarg } => todo!(),
        O::AtomicFence { flags } => todo!(),
        O::I32AtomicLoad { memarg } => todo!(),
        O::I64AtomicLoad { memarg } => todo!(),
        O::I32AtomicLoad8U { memarg } => todo!(),
        O::I32AtomicLoad16U { memarg } => todo!(),
        O::I64AtomicLoad8U { memarg } => todo!(),
        O::I64AtomicLoad16U { memarg } => todo!(),
        O::I64AtomicLoad32U { memarg } => todo!(),
        O::I32AtomicStore { memarg } => todo!(),
        O::I64AtomicStore { memarg } => todo!(),
        O::I32AtomicStore8 { memarg } => todo!(),
        O::I32AtomicStore16 { memarg } => todo!(),
        O::I64AtomicStore8 { memarg } => todo!(),
        O::I64AtomicStore16 { memarg } => todo!(),
        O::I64AtomicStore32 { memarg } => todo!(),
        O::I32AtomicRmwAdd { memarg } => todo!(),
        O::I64AtomicRmwAdd { memarg } => todo!(),
        O::I32AtomicRmw8AddU { memarg } => todo!(),
        O::I32AtomicRmw16AddU { memarg } => todo!(),
        O::I64AtomicRmw8AddU { memarg } => todo!(),
        O::I64AtomicRmw16AddU { memarg } => todo!(),
        O::I64AtomicRmw32AddU { memarg } => todo!(),
        O::I32AtomicRmwSub { memarg } => todo!(),
        O::I64AtomicRmwSub { memarg } => todo!(),
        O::I32AtomicRmw8SubU { memarg } => todo!(),
        O::I32AtomicRmw16SubU { memarg } => todo!(),
        O::I64AtomicRmw8SubU { memarg } => todo!(),
        O::I64AtomicRmw16SubU { memarg } => todo!(),
        O::I64AtomicRmw32SubU { memarg } => todo!(),
        O::I32AtomicRmwAnd { memarg } => todo!(),
        O::I64AtomicRmwAnd { memarg } => todo!(),
        O::I32AtomicRmw8AndU { memarg } => todo!(),
        O::I32AtomicRmw16AndU { memarg } => todo!(),
        O::I64AtomicRmw8AndU { memarg } => todo!(),
        O::I64AtomicRmw16AndU { memarg } => todo!(),
        O::I64AtomicRmw32AndU { memarg } => todo!(),
        O::I32AtomicRmwOr { memarg } => todo!(),
        O::I64AtomicRmwOr { memarg } => todo!(),
        O::I32AtomicRmw8OrU { memarg } => todo!(),
        O::I32AtomicRmw16OrU { memarg } => todo!(),
        O::I64AtomicRmw8OrU { memarg } => todo!(),
        O::I64AtomicRmw16OrU { memarg } => todo!(),
        O::I64AtomicRmw32OrU { memarg } => todo!(),
        O::I32AtomicRmwXor { memarg } => todo!(),
        O::I64AtomicRmwXor { memarg } => todo!(),
        O::I32AtomicRmw8XorU { memarg } => todo!(),
        O::I32AtomicRmw16XorU { memarg } => todo!(),
        O::I64AtomicRmw8XorU { memarg } => todo!(),
        O::I64AtomicRmw16XorU { memarg } => todo!(),
        O::I64AtomicRmw32XorU { memarg } => todo!(),
        O::I32AtomicRmwXchg { memarg } => todo!(),
        O::I64AtomicRmwXchg { memarg } => todo!(),
        O::I32AtomicRmw8XchgU { memarg } => todo!(),
        O::I32AtomicRmw16XchgU { memarg } => todo!(),
        O::I64AtomicRmw8XchgU { memarg } => todo!(),
        O::I64AtomicRmw16XchgU { memarg } => todo!(),
        O::I64AtomicRmw32XchgU { memarg } => todo!(),
        O::I32AtomicRmwCmpxchg { memarg } => todo!(),
        O::I64AtomicRmwCmpxchg { memarg } => todo!(),
        O::I32AtomicRmw8CmpxchgU { memarg } => todo!(),
        O::I32AtomicRmw16CmpxchgU { memarg } => todo!(),
        O::I64AtomicRmw8CmpxchgU { memarg } => todo!(),
        O::I64AtomicRmw16CmpxchgU { memarg } => todo!(),
        O::I64AtomicRmw32CmpxchgU { memarg } => todo!(),
        O::V128Load { memarg } => V128Load {
            memarg: transform_memarg(memarg),
        },
        O::V128Load8x8S { memarg } => V128Load8x8S {
            memarg: transform_memarg(memarg),
        },
        O::V128Load8x8U { memarg } => V128Load8x8U {
            memarg: transform_memarg(memarg),
        },
        O::V128Load16x4S { memarg } => V128Load16x4S {
            memarg: transform_memarg(memarg),
        },
        O::V128Load16x4U { memarg } => V128Load16x4U {
            memarg: transform_memarg(memarg),
        },
        O::V128Load32x2S { memarg } => V128Load32x2S {
            memarg: transform_memarg(memarg),
        },
        O::V128Load32x2U { memarg } => V128Load32x2U {
            memarg: transform_memarg(memarg),
        },
        O::V128Load8Splat { memarg } => V128Load8Splat {
            memarg: transform_memarg(memarg),
        },
        O::V128Load16Splat { memarg } => V128Load16Splat {
            memarg: transform_memarg(memarg),
        },
        O::V128Load32Splat { memarg } => V128Load32Splat {
            memarg: transform_memarg(memarg),
        },
        O::V128Load64Splat { memarg } => V128Load64Splat {
            memarg: transform_memarg(memarg),
        },
        O::V128Load32Zero { memarg } => V128Load32Zero {
            memarg: transform_memarg(memarg),
        },
        O::V128Load64Zero { memarg } => V128Load64Zero {
            memarg: transform_memarg(memarg),
        },
        O::V128Store { memarg } => V128Store {
            memarg: transform_memarg(memarg),
        },
        O::V128Load8Lane { memarg, lane } => V128Load8Lane {
            lane,
            memarg: transform_memarg(memarg),
        },
        O::V128Load16Lane { memarg, lane } => V128Load16Lane {
            lane,
            memarg: transform_memarg(memarg),
        },
        O::V128Load32Lane { memarg, lane } => V128Load32Lane {
            lane,
            memarg: transform_memarg(memarg),
        },
        O::V128Load64Lane { memarg, lane } => V128Load64Lane {
            lane,
            memarg: transform_memarg(memarg),
        },
        O::V128Store8Lane { memarg, lane } => V128Store8Lane {
            lane,
            memarg: transform_memarg(memarg),
        },
        O::V128Store16Lane { memarg, lane } => V128Store16Lane {
            lane,
            memarg: transform_memarg(memarg),
        },
        O::V128Store32Lane { memarg, lane } => V128Store32Lane {
            lane,
            memarg: transform_memarg(memarg),
        },
        O::V128Store64Lane { memarg, lane } => V128Store64Lane {
            lane,
            memarg: transform_memarg(memarg),
        },
        O::V128Const { value } => V128Const(value.i128()),
        O::I8x16Shuffle { lanes } => I8x16Shuffle { lanes },
        O::I8x16ExtractLaneS { lane } => I8x16ExtractLaneS { lane },
        O::I8x16ExtractLaneU { lane } => I8x16ExtractLaneU { lane },
        O::I8x16ReplaceLane { lane } => I8x16ReplaceLane { lane },
        O::I16x8ExtractLaneS { lane } => I16x8ExtractLaneS { lane },
        O::I16x8ExtractLaneU { lane } => I16x8ExtractLaneU { lane },
        O::I16x8ReplaceLane { lane } => I16x8ReplaceLane { lane },
        O::I32x4ExtractLane { lane } => I32x4ExtractLane { lane },
        O::I32x4ReplaceLane { lane } => I32x4ReplaceLane { lane },
        O::I64x2ExtractLane { lane } => I64x2ExtractLane { lane },
        O::I64x2ReplaceLane { lane } => I64x2ReplaceLane { lane },
        O::F32x4ExtractLane { lane } => F32x4ExtractLane { lane },
        O::F32x4ReplaceLane { lane } => F32x4ReplaceLane { lane },
        O::F64x2ExtractLane { lane } => F64x2ExtractLane { lane },
        O::F64x2ReplaceLane { lane } => F64x2ReplaceLane { lane },
        O::I8x16Swizzle => I8x16Swizzle,
        O::I8x16Splat => I8x16Splat,
        O::I16x8Splat => I16x8Splat,
        O::I32x4Splat => I32x4Splat,
        O::I64x2Splat => I64x2Splat,
        O::F32x4Splat => F32x4Splat,
        O::F64x2Splat => F64x2Splat,
        O::I8x16Eq => I8x16Eq,
        O::I8x16Ne => I8x16Ne,
        O::I8x16LtS => I8x16LtS,
        O::I8x16LtU => I8x16LtU,
        O::I8x16GtS => I8x16GtS,
        O::I8x16GtU => I8x16GtU,
        O::I8x16LeS => I8x16LeS,
        O::I8x16LeU => I8x16LeU,
        O::I8x16GeS => I8x16GeS,
        O::I8x16GeU => I8x16GeU,
        O::I16x8Eq => I16x8Eq,
        O::I16x8Ne => I16x8Ne,
        O::I16x8LtS => I16x8LtS,
        O::I16x8LtU => I16x8LtU,
        O::I16x8GtS => I16x8GtS,
        O::I16x8GtU => I16x8GtU,
        O::I16x8LeS => I16x8LeS,
        O::I16x8LeU => I16x8LeU,
        O::I16x8GeS => I16x8GeS,
        O::I16x8GeU => I16x8GeU,
        O::I32x4Eq => I32x4Eq,
        O::I32x4Ne => I32x4Ne,
        O::I32x4LtS => I32x4LtS,
        O::I32x4LtU => I32x4LtU,
        O::I32x4GtS => I32x4GtS,
        O::I32x4GtU => I32x4GtU,
        O::I32x4LeS => I32x4LeS,
        O::I32x4LeU => I32x4LeU,
        O::I32x4GeS => I32x4GeS,
        O::I32x4GeU => I32x4GeU,
        O::I64x2Eq => I64x2Eq,
        O::I64x2Ne => I64x2Ne,
        O::I64x2LtS => I64x2LtS,
        O::I64x2GtS => I64x2GtS,
        O::I64x2LeS => I64x2LeS,
        O::I64x2GeS => I64x2GeS,
        O::F32x4Eq => F32x4Eq,
        O::F32x4Ne => F32x4Ne,
        O::F32x4Lt => F32x4Lt,
        O::F32x4Gt => F32x4Gt,
        O::F32x4Le => F32x4Le,
        O::F32x4Ge => F32x4Ge,
        O::F64x2Eq => F64x2Eq,
        O::F64x2Ne => F64x2Ne,
        O::F64x2Lt => F64x2Lt,
        O::F64x2Gt => F64x2Gt,
        O::F64x2Le => F64x2Le,
        O::F64x2Ge => F64x2Ge,
        O::V128Not => V128Not,
        O::V128And => V128And,
        O::V128AndNot => V128AndNot,
        O::V128Or => V128Or,
        O::V128Xor => V128Xor,
        O::V128Bitselect => V128Bitselect,
        O::V128AnyTrue => V128AnyTrue,
        O::I8x16Abs => I8x16Abs,
        O::I8x16Neg => I8x16Neg,
        O::I8x16Popcnt => I8x16Popcnt,
        O::I8x16AllTrue => I8x16AllTrue,
        O::I8x16Bitmask => I8x16Bitmask,
        O::I8x16NarrowI16x8S => I8x16NarrowI16x8S,
        O::I8x16NarrowI16x8U => I8x16NarrowI16x8U,
        O::I8x16Shl => I8x16Shl,
        O::I8x16ShrS => I8x16ShrS,
        O::I8x16ShrU => I8x16ShrU,
        O::I8x16Add => I8x16Add,
        O::I8x16AddSatS => I8x16AddSatS,
        O::I8x16AddSatU => I8x16AddSatU,
        O::I8x16Sub => I8x16Sub,
        O::I8x16SubSatS => I8x16SubSatS,
        O::I8x16SubSatU => I8x16SubSatU,
        O::I8x16MinS => I8x16MinS,
        O::I8x16MinU => I8x16MinU,
        O::I8x16MaxS => I8x16MaxS,
        O::I8x16MaxU => I8x16MaxU,
        O::I8x16RoundingAverageU => I8x16RoundingAverageU,
        O::I16x8ExtAddPairwiseI8x16S => I16x8ExtAddPairwiseI8x16S,
        O::I16x8ExtAddPairwiseI8x16U => I16x8ExtAddPairwiseI8x16U,
        O::I16x8Abs => I16x8Abs,
        O::I16x8Neg => I16x8Neg,
        O::I16x8Q15MulrSatS => I16x8Q15MulrSatS,
        O::I16x8AllTrue => I16x8AllTrue,
        O::I16x8Bitmask => I16x8Bitmask,
        O::I16x8NarrowI32x4S => I16x8NarrowI32x4S,
        O::I16x8NarrowI32x4U => I16x8NarrowI32x4U,
        O::I16x8ExtendLowI8x16S => I16x8ExtendLowI8x16S,
        O::I16x8ExtendHighI8x16S => I16x8ExtendHighI8x16S,
        O::I16x8ExtendLowI8x16U => I16x8ExtendLowI8x16U,
        O::I16x8ExtendHighI8x16U => I16x8ExtendHighI8x16U,
        O::I16x8Shl => I16x8Shl,
        O::I16x8ShrS => I16x8ShrS,
        O::I16x8ShrU => I16x8ShrU,
        O::I16x8Add => I16x8Add,
        O::I16x8AddSatS => I16x8AddSatS,
        O::I16x8AddSatU => I16x8AddSatU,
        O::I16x8Sub => I16x8Sub,
        O::I16x8SubSatS => I16x8SubSatS,
        O::I16x8SubSatU => I16x8SubSatU,
        O::I16x8Mul => I16x8Mul,
        O::I16x8MinS => I16x8MinS,
        O::I16x8MinU => I16x8MinU,
        O::I16x8MaxS => I16x8MaxS,
        O::I16x8MaxU => I16x8MaxU,
        O::I16x8RoundingAverageU => I16x8RoundingAverageU,
        O::I16x8ExtMulLowI8x16S => I16x8ExtMulLowI8x16S,
        O::I16x8ExtMulHighI8x16S => I16x8ExtMulHighI8x16S,
        O::I16x8ExtMulLowI8x16U => I16x8ExtMulLowI8x16U,
        O::I16x8ExtMulHighI8x16U => I16x8ExtMulHighI8x16U,
        O::I32x4ExtAddPairwiseI16x8S => I32x4ExtAddPairwiseI16x8S,
        O::I32x4ExtAddPairwiseI16x8U => I32x4ExtAddPairwiseI16x8U,
        O::I32x4Abs => I32x4Abs,
        O::I32x4Neg => I32x4Neg,
        O::I32x4AllTrue => I32x4AllTrue,
        O::I32x4Bitmask => I32x4Bitmask,
        O::I32x4ExtendLowI16x8S => I32x4ExtendLowI16x8S,
        O::I32x4ExtendHighI16x8S => I32x4ExtendHighI16x8S,
        O::I32x4ExtendLowI16x8U => I32x4ExtendLowI16x8U,
        O::I32x4ExtendHighI16x8U => I32x4ExtendHighI16x8U,
        O::I32x4Shl => I32x4Shl,
        O::I32x4ShrS => I32x4ShrS,
        O::I32x4ShrU => I32x4ShrU,
        O::I32x4Add => I32x4Add,
        O::I32x4Sub => I32x4Sub,
        O::I32x4Mul => I32x4Mul,
        O::I32x4MinS => I32x4MinS,
        O::I32x4MinU => I32x4MinU,
        O::I32x4MaxS => I32x4MaxS,
        O::I32x4MaxU => I32x4MaxU,
        O::I32x4DotI16x8S => I32x4DotI16x8S,
        O::I32x4ExtMulLowI16x8S => I32x4ExtMulLowI16x8S,
        O::I32x4ExtMulHighI16x8S => I32x4ExtMulHighI16x8S,
        O::I32x4ExtMulLowI16x8U => I32x4ExtMulLowI16x8U,
        O::I32x4ExtMulHighI16x8U => I32x4ExtMulHighI16x8U,
        O::I64x2Abs => I64x2Abs,
        O::I64x2Neg => I64x2Neg,
        O::I64x2AllTrue => I64x2AllTrue,
        O::I64x2Bitmask => I64x2Bitmask,
        O::I64x2ExtendLowI32x4S => I64x2ExtendLowI32x4S,
        O::I64x2ExtendHighI32x4S => I64x2ExtendHighI32x4S,
        O::I64x2ExtendLowI32x4U => I64x2ExtendLowI32x4U,
        O::I64x2ExtendHighI32x4U => I64x2ExtendHighI32x4U,
        O::I64x2Shl => I64x2Shl,
        O::I64x2ShrS => I64x2ShrS,
        O::I64x2ShrU => I64x2ShrU,
        O::I64x2Add => I64x2Add,
        O::I64x2Sub => I64x2Sub,
        O::I64x2Mul => I64x2Mul,
        O::I64x2ExtMulLowI32x4S => I64x2ExtMulLowI32x4S,
        O::I64x2ExtMulHighI32x4S => I64x2ExtMulHighI32x4S,
        O::I64x2ExtMulLowI32x4U => I64x2ExtMulLowI32x4U,
        O::I64x2ExtMulHighI32x4U => I64x2ExtMulHighI32x4U,
        O::F32x4Ceil => F32x4Ceil,
        O::F32x4Floor => F32x4Floor,
        O::F32x4Trunc => F32x4Trunc,
        O::F32x4Nearest => F32x4Nearest,
        O::F32x4Abs => F32x4Abs,
        O::F32x4Neg => F32x4Neg,
        O::F32x4Sqrt => F32x4Sqrt,
        O::F32x4Add => F32x4Add,
        O::F32x4Sub => F32x4Sub,
        O::F32x4Mul => F32x4Mul,
        O::F32x4Div => F32x4Div,
        O::F32x4Min => F32x4Min,
        O::F32x4Max => F32x4Max,
        O::F32x4PMin => F32x4PMin,
        O::F32x4PMax => F32x4PMax,
        O::F64x2Ceil => F64x2Ceil,
        O::F64x2Floor => F64x2Floor,
        O::F64x2Trunc => F64x2Trunc,
        O::F64x2Nearest => F64x2Nearest,
        O::F64x2Abs => F64x2Abs,
        O::F64x2Neg => F64x2Neg,
        O::F64x2Sqrt => F64x2Sqrt,
        O::F64x2Add => F64x2Add,
        O::F64x2Sub => F64x2Sub,
        O::F64x2Mul => F64x2Mul,
        O::F64x2Div => F64x2Div,
        O::F64x2Min => F64x2Min,
        O::F64x2Max => F64x2Max,
        O::F64x2PMin => F64x2PMin,
        O::F64x2PMax => F64x2PMax,
        O::I32x4TruncSatF32x4S => I32x4TruncSatF32x4S,
        O::I32x4TruncSatF32x4U => I32x4TruncSatF32x4U,
        O::F32x4ConvertI32x4S => F32x4ConvertI32x4S,
        O::F32x4ConvertI32x4U => F32x4ConvertI32x4U,
        O::I32x4TruncSatF64x2SZero => I32x4TruncSatF64x2SZero,
        O::I32x4TruncSatF64x2UZero => I32x4TruncSatF64x2UZero,
        O::F64x2ConvertLowI32x4S => F64x2ConvertLowI32x4S,
        O::F64x2ConvertLowI32x4U => F64x2ConvertLowI32x4U,
        O::F32x4DemoteF64x2Zero => F32x4DemoteF64x2Zero,
        O::F64x2PromoteLowF32x4 => F64x2PromoteLowF32x4,
        O::I8x16RelaxedSwizzle => I8x16RelaxedSwizzle,
        O::I32x4RelaxedTruncSatF32x4S => I32x4RelaxedTruncSatF32x4S,
        O::I32x4RelaxedTruncSatF32x4U => I32x4RelaxedTruncSatF32x4U,
        O::I32x4RelaxedTruncSatF64x2SZero => I32x4RelaxedTruncSatF64x2SZero,
        O::I32x4RelaxedTruncSatF64x2UZero => I32x4RelaxedTruncSatF64x2UZero,
        O::F32x4Fma => F32x4Fma,
        O::F32x4Fms => F32x4Fms,
        O::F64x2Fma => F64x2Fma,
        O::F64x2Fms => F64x2Fms,
        O::I8x16LaneSelect => I8x16LaneSelect,
        O::I16x8LaneSelect => I16x8LaneSelect,
        O::I32x4LaneSelect => I32x4LaneSelect,
        O::I64x2LaneSelect => I64x2LaneSelect,
        O::F32x4RelaxedMin => F32x4RelaxedMin,
        O::F32x4RelaxedMax => F32x4RelaxedMax,
        O::F64x2RelaxedMin => F64x2RelaxedMin,
        O::F64x2RelaxedMax => F64x2RelaxedMax,
    })
}

pub(crate) fn transform_block_ty(ty: wp::BlockType) -> we::BlockType {
    use we::BlockType as BT;
    use wp::BlockType::*;
    match ty {
        Empty => BT::Empty,
        Type(vt) => BT::Result(transform_ty(vt)),
        FuncType(ft) => BT::FunctionType(ft),
    }
}

pub(crate) fn transform_ty(ty: wp::ValType) -> we::ValType {
    use we::ValType as VT;
    use wp::ValType::*;
    match ty {
        I32 => VT::I32,
        I64 => VT::I64,
        F32 => VT::F32,
        F64 => VT::F64,
        V128 => VT::V128,
        FuncRef => VT::FuncRef,
        ExternRef => VT::ExternRef,
    }
}

pub(crate) fn transform_memarg(memarg: wp::MemoryImmediate) -> we::MemArg {
    we::MemArg {
        offset: memarg.offset,
        align: memarg.align.into(),
        memory_index: memarg.memory,
    }
}

pub(crate) fn transform_name_map(
    mut reader: wp::NamingReader,
) -> Result<we::NameMap, BinaryReaderError> {
    let mut output = we::NameMap::new();
    for _ in 0..reader.get_count() {
        let name = reader.read()?;
        output.append(name.index, name.name);
    }
    Ok(output)
}
